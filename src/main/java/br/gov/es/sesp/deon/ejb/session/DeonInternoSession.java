package br.gov.es.sesp.deon.ejb.session;

import br.gov.es.sesp.inquerito.jpa.entity.SinqTipoProced;
import br.gov.es.sesp.inquerito.jpa.entity.SinqPecaAnexo;
import br.gov.es.sesp.inquerito.jpa.entity.SinqPecaGeradaInq;
import br.gov.es.sesp.inquerito.jpa.entity.SinqTemplate;
import static java.util.concurrent.TimeUnit.MILLISECONDS;
import static java.util.concurrent.TimeUnit.MINUTES;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.FlushModeType;
import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import br.gov.es.sesp.deon.ejb.exceptions.BusinessException;
import br.gov.es.sesp.deon.ejb.util.PDFUtil;
import br.gov.es.sesp.deon.jpa.common.Util;
import br.gov.es.sesp.deon.jpa.entity.*;
import br.gov.es.sesp.deon.jpa.entity.fake.AcessorioEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.ArmaEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.BopAvariaVeiculoFake;
import br.gov.es.sesp.deon.jpa.entity.fake.BopChamadoViaturaFake;
import br.gov.es.sesp.deon.jpa.entity.fake.BopEnvolvidoSimples;
import br.gov.es.sesp.deon.jpa.entity.fake.BopIncidenteSimples;
import br.gov.es.sesp.deon.jpa.entity.fake.BopUnidadePolicialFake;
import br.gov.es.sesp.deon.jpa.entity.fake.ConsultaDocumentoEnvoEspecialFake;
import br.gov.es.sesp.deon.jpa.entity.fake.ConsultaImeiTransiente;
import br.gov.es.sesp.deon.jpa.entity.fake.ConsultaOcorrenciaEnvolvidoTransient;
import br.gov.es.sesp.deon.jpa.entity.fake.ConsultaOcorrenciaObjTransient;
import br.gov.es.sesp.deon.jpa.entity.fake.ConsultaOcorrenciaTransient;
import br.gov.es.sesp.deon.jpa.entity.fake.DetidoConduzidoEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.DinheiroEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.DrogaEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.EnvolvidoTransient;
import br.gov.es.sesp.deon.jpa.entity.fake.EvolucaoOcorrenciaEnvolvido;
import br.gov.es.sesp.deon.jpa.entity.fake.MunicaoEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.OcorrenciaTransiente;
import br.gov.es.sesp.deon.jpa.entity.fake.UnidadeEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.VeiculoEntity;
import br.gov.es.sesp.deon.jpa.entity.fake.ViaturaEntity;
import br.gov.es.sesp.deon.jpa.entity.view.ViewConsultaUnificadaDet;
import br.gov.es.sesp.deon.jpa.entity.view.VwAgencia;
import br.gov.es.sesp.deon.jpa.entity.view.VwDeonAcabamentoArma;
import br.gov.es.sesp.deon.jpa.entity.view.VwDeonFuncionamentoArma;
import br.gov.es.sesp.deon.jpa.enuns.BopParametrosUnidade;
import br.gov.es.sesp.deon.jpa.enuns.StatusOcorrencia;
import br.gov.es.sesp.deon.jpa.enuns.TipoDocumento;
import br.gov.es.sesp.deon.jpa.enuns.TipoPeca;
import br.gov.es.sesp.deon.jpa.enuns.UnidadeAcessoSigiloso;
import br.gov.es.sesp.deon.jpa.util.EventoCabecalhoRodapePecaTemplate;
import br.gov.es.sesp.deonex.jpa.entity.DeonIncidenteProv;
import br.gov.es.sesp.deonex.jpa.entity.DeonOcorrenciaAnexoProv;
import br.gov.es.sesp.deonex.jpa.entity.view.VwBopCores;
import br.gov.es.sesp.deonex.jpa.entity.view.VwDeonMarcaObjeto;
import br.gov.es.sesp.deonex.jpa.entity.view.VwDeonTipoArma;
import br.gov.es.sesp.deonex.jpa.entity.view.VwDeonTipoObjeto;
import br.gov.es.sesp.inquerito.ejb.bo.PecaBOLocal;
import br.gov.es.sesp.inquerito.ejb.bo.TemplateBOLocal;
import br.gov.es.sesp.inquerito.jpa.entity.SinqPecaCadernoProced;
import br.gov.es.sesp.inquerito.jpa.entity.SinqPecaGeradaDTO;
import br.gov.es.sesp.inquerito.jpa.entity.SinqPecaTemplate;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.ElementList;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import com.itextpdf.tool.xml.exceptions.RuntimeWorkerException;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import javax.imageio.ImageIO;

@SuppressWarnings("unchecked")
@Stateless(mappedName = "ejb/DeonInternoSession")
public class DeonInternoSession implements DeonInternoSessionLocal, DeonInternoSessionRemote {

    @PersistenceContext(unitName = "DEONJPA")
    private EntityManager em;

    @EJB
    private UsuarioSessionLocal usuarioSessionLocal;

    @EJB
    private PecaBOLocal pecaBOLocal;

    @EJB
    private UnidadePolicialSessionLocal unidadePolicialSessionLocal;

    @EJB
    private TemplateBOLocal templateBOLocal;

    @EJB
    private IncidenteSessionLocal incidenteSessionLocal;

    private static final String LINE_BREAK = "--Quebra de página--";

    // Variável global usada no método appendWhereClause().
    private String connector;

    public void init() {

        if (BopIncidente.listBopIncidente == null) {

            List<BopIncidente> listBopIncidente = em.createNamedQuery(
                    "BopIncidente.findAll", BopIncidente.class).getResultList();

            BopIncidente.listBopIncidente = new ArrayList<BopIncidenteSimples>();

            for (BopIncidente bopIncidente : listBopIncidente) {

                BopIncidente.listBopIncidente.add(new BopIncidenteSimples(
                        bopIncidente));

            }

        }
    }

    // Método facilitador de construção da cláusula where.
    private void appendWhereClause(StringBuffer strBuffer, Object obj,
            String strClause) {

        if (connector == null) {
            connector = " where ";
        }

        if (obj != null && !obj.toString().trim().equals("")
                && !obj.toString().trim().equals("0")) {

            strBuffer.append(connector + strClause);
            connector = " and ";

        }

    }

    private boolean isNotNullOrEmpty(Object obj) {
        return obj != null && !obj.toString().trim().equals("")
                && !obj.toString().trim().equals("0");
    }

    private boolean isNullOrEmpty(Object obj) {
        return obj == null || obj.toString() == null
                || obj.toString().trim() == null
                || obj.toString().trim().equals("")
                || obj.toString().trim().equals("0");
    }

    // Método facilitador de construção da cláusula where.
    private void appendWhereClause(StringBuffer strBuffer, String strClause) {

        if (connector == null) {
            connector = " where ";
        }

        strBuffer.append(connector + strClause);
        connector = " and ";

    }

    // Método facilitador de construção de join.
    private void appendJoin(StringBuffer strBuffer, String strClause,
            Object object) {

        if (object != null) {

            strBuffer.append(strClause);

        }

    }

    public boolean existeChamadoLegado(String nrChamado)
            throws BusinessException {

        Query query = em
                .createNativeQuery("SELECT COUNT(*) FROM BOP_OCORRENCIA_UNIDADE_DEON WHERE NR_CHAMADO = ? ");

        query.setParameter(1, nrChamado);

        try {
            return Long.valueOf(query.getSingleResult().toString()).longValue() > 0;
        } catch (NoResultException e) {
            return false;
        } catch (NumberFormatException e) {
            e.printStackTrace();
        } catch (Exception e) {
            throw new BusinessException("012_1: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return false;
    }

    public List<BopSeguradoraDeon> getAllSeguradoras() throws BusinessException {
        try {
            return em.createNamedQuery("BopSeguradora.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_2: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoMedidaProtetivaDeon> getAllTipoMedidaProtetivaDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoMedidaProtetivaDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_3: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUtilidadeVeiculoDeon> getAllBopUtilidadeVeiculoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopUtilidadeVeiculoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_4: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopMotivoDevolucaoDeon> getAllMotivoDevolucao()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopMotivoDevolucaoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_5: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoEnvolvimento> getAllTipoEnvolvimento()
            throws BusinessException {
        try {
            return em.createNamedQuery(BopTipoEnvolvimento.FIND_ALL)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_6: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoEnvolvimento> getTipoEnvolvimentoTransito()
            throws BusinessException {
        try {
            return em.createNamedQuery(
                    BopTipoEnvolvimento.FIND_TIPO_ENVOLVIMENTO_TRANSITO)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_7: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopEstadoCivil> getAllEstadoCivil() throws BusinessException {
        try {
            return em.createNamedQuery("BopEstadoCivil.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_8: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonAcabamentoArma> getAllVwDeonAcabamentoArma()
            throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonAcabamentoArma.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_9: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonFuncionamentoArma> getAllVwDeonFuncionamentoArma()
            throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonFuncionamentoArma.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_10: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopEstadoCivil getEstadoCivil(int cdEstadoCivil)
            throws BusinessException {

        BopEstadoCivil bopEstadoCivil;

        try {
            bopEstadoCivil = (BopEstadoCivil) em
                    .createNamedQuery("BopEstadoCivil.findEstadoCivilById")
                    .setParameter("cdEstadoCivil", cdEstadoCivil)
                    .getSingleResult();

        } catch (NoResultException e) {
            bopEstadoCivil = null;
        } catch (Exception e) {
            throw new BusinessException("012_11: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopEstadoCivil;
    }

    public BopOcorrencia getOcorrenciaById(int nrBop, String tipoBop)
            throws BusinessException {

        BopOcorrencia bopOcorrencia;

        try {

            bopOcorrencia = (BopOcorrencia) em
                    .createNamedQuery("BopOcorrencia.findOcorrencia")
                    .setParameter("nrBop", nrBop)
                    .setParameter("tipoBop", tipoBop.trim())
                    .getSingleResult();

        } catch (NoResultException e) {
            bopOcorrencia = null;
        } catch (Exception e) {
            throw new BusinessException("012_12:Ocorreu um erro inesperado.", e);

        }

        return bopOcorrencia;

    }

    public List<BopNacionalidade> getAllNacionalidade()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopNacionalidade.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_13: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopNacionalidade getNacionalidade(int cdNacion)
            throws BusinessException {

        BopNacionalidade bopNacionalidade;

        try {
            bopNacionalidade = (BopNacionalidade) em
                    .createNamedQuery("BopNacionalidade.findNacionalidadeById")
                    .setParameter("cdNacion", cdNacion).getSingleResult();
        } catch (NoResultException e) {
            bopNacionalidade = null;
        } catch (Exception e) {
            throw new BusinessException("012_14: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopNacionalidade;
    }

    public List<BopNaturalidade> getAllNaturalidade() throws BusinessException {
        try {
            return em.createNamedQuery("BopNaturalidade.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_15: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopNaturalidade getNaturalidade(int cdNatur)
            throws BusinessException {

        BopNaturalidade bopNaturalidade;

        try {
            bopNaturalidade = (BopNaturalidade) em
                    .createNamedQuery("BopNaturalidade.findNaturalidadeById")
                    .setParameter("cdNatur", cdNatur).getSingleResult();
        } catch (NoResultException e) {
            bopNaturalidade = null;
        } catch (Exception e) {
            throw new BusinessException("012_16: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopNaturalidade;

    }

    public List<BopEscolaridade> getAllEscolaridade() throws BusinessException {
        try {

            Query query = em.createNativeQuery("SELECT CD_ESCOLARIDADE , DS_ESCOLARIDADE FROM BOP_ESCOLARIDADE WHERE ID_STATUS = 'A' ORDER BY DS_ESCOLARIDADE ", BopEscolaridade.class);
            List<BopEscolaridade> list = query.getResultList();
            return list;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_17: Ocorreu um erro inesperado.", e);
        }
    }

    public BopEscolaridade getEscolaridade(int cdEscolaridade)
            throws BusinessException {

        BopEscolaridade bopEscolaridade;

        try {
            bopEscolaridade = (BopEscolaridade) em
                    .createNamedQuery("BopEscolaridade.findEscolaridadeById")
                    .setParameter("cdEscolaridade", cdEscolaridade)
                    .getSingleResult();
        } catch (NoResultException e) {
            bopEscolaridade = null;
        } catch (Exception e) {
            throw new BusinessException("012_18: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopEscolaridade;

    }

    public BopOcorrencia mergeOcorrencia(BopOcorrencia ocorrencia,
            Comunicante comunicante) throws BusinessException {

        try {

            BopOcorrencia o = em.merge(ocorrencia);

            em.flush();
            em.refresh(o);
            /*
			 * if ( !existeChamadoOcorrencia( o ) ) { geraChamadoOcorrencia( o,
			 * comunicante ); geraEnvolvido( o, comunicante ); em.flush();
			 * em.refresh( o ); }
             */
            return o;

        } catch (Exception e) {
            throw new BusinessException("012_19: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopOcorrencia mergeOcorrencia(BopOcorrencia bopOcorrencia)
            throws BusinessException {

        try {
            BopOcorrencia retorno = em.merge(bopOcorrencia);

            em.flush();

            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_20: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopOcorrencia mergeOcorrenciaDadosOcorrencia(
            BopOcorrencia bopOcorrencia) throws BusinessException {

        try {
            BopOcorrencia retorno = null;

            retorno = em.merge(bopOcorrencia);

            em.flush();
            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_21: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopChamado mergeChamado(BopChamado bopChamado)
            throws BusinessException {

        try {
            BopChamado retorno = bopChamado;

            retorno = em.merge(bopChamado);

            // em.flush();
            // em.refresh( retorno );
            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_22: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopOcorrencia gerarDeclaracaoPerdaExtravioDocumento(
            BopOcorrencia bopOcorrencia, Comunicante comunicante,
            BopUnidadePolicial bopUnidadePolicialLogada, BopUsuarios bopUsuario)
            throws Exception {

        BopOcorrencia retorno = null;

        try {

            BopPlanOperacional bopPlanOperacional = this.getPlanOperacional(
                    bopOcorrencia, bopUnidadePolicialLogada);
            Long cdRegiaoPlan = 2L;

            if (bopPlanOperacional != null) {
                cdRegiaoPlan = bopPlanOperacional.getId().getCdRegiaoPlan();
            }

            Date dtSysDate = this.getSysDate();

            BopChamado bopChamado = new BopChamado(comunicante);

            bopChamado.setDtChamado(dtSysDate);
            bopChamado.setFlSituacao("0");
            bopChamado.setIdOperador(comunicante.getUsuario());
            bopChamado.setFlTitular("S");
            bopChamado
                    .setNmSolicitante(!Util.isNullOrEmpty(comunicante.getNome())
                            && comunicante.getNome().length() > 40 ? comunicante
                            .getNome().substring(0, 40) : comunicante.getNome());
            if (bopOcorrencia.getBopTipoLocal() != null) {
                bopChamado.setCdTipoLocal(bopOcorrencia.getBopTipoLocal()
                        .getCdTipoLocal());
            }
            bopChamado.setDsCidadeInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getBopMunicipio()
                    .getNmMunicipio());
            bopChamado.setDsBairroInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getBopBairro()
                    .getNmBairro());
            bopChamado.setDsEnderecoInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsLogradouro());
            bopChamado.setNrNumeroInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getNrNumero());
            bopChamado.setDsReferenciaInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsPontoReferencia());
            bopChamado.setDsComplementoInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsComplemento());

            if (bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getNrCep() != null
                    && !bopOcorrencia.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon().getNrCep().trim()
                            .equals("")) {
                bopChamado.setCdCepInf(Long.parseLong(bopOcorrencia
                        .getBopOcorrenciaDeon().getBopEnderecoOcorrenciaDeon()
                        .getNrCep().replace("-", "")));
            }

            List<BopOcorrenciaAgencia> listBopOcorrenciaAgencias = new ArrayList<BopOcorrenciaAgencia>();
            BopOcorrenciaAgencia bopOcorrenciaAgencia = new BopOcorrenciaAgencia(
                    bopOcorrencia);
            BopIncidente bopIncidente = this
                    .getBopIncidenteByTpIncidente("Z22");

            bopOcorrenciaAgencia
                    .setBopUnidadePolicial(bopUnidadePolicialLogada);
            bopOcorrenciaAgencia.setBopIncidente(bopIncidente);
            bopOcorrenciaAgencia.setBopFuncionario(this
                    .getFuncionarioByIdRegistro(bopUsuario.getBopFuncionario()
                            .getIdRegistro(), bopUnidadePolicialLogada
                                    .getBopAgencia().getCdAgencia()));
            bopOcorrenciaAgencia.setDsOcorrencia(bopOcorrencia
                    .getDsOcorrencia());

            BopOcorrenciaAgenciaDeon ocorrenciaAgenciaDeon = new BopOcorrenciaAgenciaDeon();

            ocorrenciaAgenciaDeon.setDtInicioConfeccao(dtSysDate);
            ocorrenciaAgenciaDeon.setDtPrimeiroConfeccao(dtSysDate);
            ocorrenciaAgenciaDeon.setFlTransito(false);
            ocorrenciaAgenciaDeon.setSituacao(StatusOcorrencia.ABERTO);
            ocorrenciaAgenciaDeon.setBopOcorrenciaAgencia(bopOcorrenciaAgencia);

            bopOcorrenciaAgencia
                    .setBopOcorrenciaAgenciaDeon(ocorrenciaAgenciaDeon);

            listBopOcorrenciaAgencias.add(bopOcorrenciaAgencia);
            bopOcorrencia.setBopOcorrenciaAgencias(listBopOcorrenciaAgencias);
            bopOcorrencia.setBopIncidente(bopIncidente);
            bopOcorrencia.setBopUnidadePolicial(bopUnidadePolicialLogada);

            BopDespachoAndamento bopDespachoAndamento = new BopDespachoAndamento(
                    bopChamado);
            bopDespachoAndamento.setCdRegiaoPlan(cdRegiaoPlan);
            bopDespachoAndamento.setCdAgencia(bopUnidadePolicialLogada.getId()
                    .getCdAgencia());
            bopDespachoAndamento.setCdUnidPolicial(bopUnidadePolicialLogada
                    .getId().getCdUnidPolicial());
            bopDespachoAndamento.setFlSituacao("0");
            bopDespachoAndamento.setNrBoletimOcorrencia(bopOcorrencia.getId()
                    .getNrBop());
            bopDespachoAndamento.setDtVisualizacao(dtSysDate);
            bopDespachoAndamento.setDtDespacho(dtSysDate);
            bopDespachoAndamento.setIdDespachador(comunicante.getUsuario());
            bopDespachoAndamento.setCdCep(bopChamado.getCdCepInf());
            bopDespachoAndamento.setDsCidade(bopChamado.getDsCidadeInf());
            bopDespachoAndamento.setDsBairro(bopChamado.getDsBairroInf());
            bopDespachoAndamento.setDsComplemento(bopChamado
                    .getDsComplementoInf());
            bopDespachoAndamento.setDsReferencia(bopChamado
                    .getDsReferenciaInf());
            bopDespachoAndamento.setDsRua(bopChamado.getDsEnderecoInf());
            bopDespachoAndamento.setNrNumero(bopChamado.getNrNumeroInf());
            bopDespachoAndamento.setUsrCriacao(comunicante.getUsuario());
            bopDespachoAndamento.setDtCriacao(dtSysDate);

            BopChamadoOcorrencia bopChamadoOcorrencia = new BopChamadoOcorrencia(
                    bopOcorrencia, bopChamado);

            bopChamadoOcorrencia.setUsGeracao(comunicante.getUsuario());
            bopChamadoOcorrencia.setDtGeracao(dtSysDate);
            bopChamadoOcorrencia.setUsUltAtualizacao(comunicante.getUsuario());
            bopChamadoOcorrencia.setDtUltAtualizacao(dtSysDate);

            bopChamado.setBopChamadoOcorrencia(bopChamadoOcorrencia);
            bopChamado.setBopDespachoAndamento(bopDespachoAndamento);

            BopChamado o = em.merge(bopChamado);

            em.flush();

            BopEnvolvidoTipoEnvolvido envolvidoTipoEnvolvido = new BopEnvolvidoTipoEnvolvido();
            envolvidoTipoEnvolvido
                    .setBopTipoEnvolvimento(getTipoEnvolvimento(26));
            envolvidoTipoEnvolvido
                    .setBopUnidadePolicial(bopUnidadePolicialLogada);
            envolvidoTipoEnvolvido.setFlagSeAplica(true);
            envolvidoTipoEnvolvido.setFlagEnvolvidoTransito(false);
            envolvidoTipoEnvolvido.setBopEnvolvidoOcorrenciaDeon(o
                    .getBopChamadoOcorrencia().getBopOcorrencia()
                    .getBopEnvolvidosOcorrencia().get(0)
                    .getBopEnvolvidoOcorrenciaDeon());

            envolvidoTipoEnvolvido = em.merge(envolvidoTipoEnvolvido);
            em.flush();

            for (BopOcorrenciaObjeto objeto : o.getBopChamadoOcorrencia()
                    .getBopOcorrencia().getBopOcorrenciaObjetos()) {

                for (BopObjetoOcorrDocumento documento : objeto
                        .getBopObjetoOcorrDocumentos()) {

                    BopObjetoUnidadePolicialDeon objetoUnidadePolicialDeon = new BopObjetoUnidadePolicialDeon();

                    objetoUnidadePolicialDeon
                            .setBopUnidadePolicial(bopUnidadePolicialLogada);
                    objetoUnidadePolicialDeon.setCodigoObjetoFilho(documento
                            .getIdDocumento());
                    objetoUnidadePolicialDeon.setBopOcorrenciaObjeto(documento
                            .getBopOcorrenciaObjeto());
                    objetoUnidadePolicialDeon.setFlagObjetoTransito(false);

                    em.merge(objetoUnidadePolicialDeon);
                }

            }

            em.flush();
            em.refresh(o);

            retorno = o.getBopChamadoOcorrencia().getBopOcorrencia();
            if (!Util.isListBlank(retorno.getBopEnvolvidosOcorrencia())) {
                retorno.getBopEnvolvidosOcorrencia().get(0)
                        .getBopEnvolvidoOcorrenciaDeon()
                        .getBopEnvolvidoTiposEnvolvido()
                        .add(envolvidoTipoEnvolvido);
            }
            if (retorno.getBopOcorrenciaDeon() != null
                    && retorno.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon() != null) {
                if (retorno.getBopOcorrenciaDeon()
                        .getBopEnderecoOcorrenciaDeon().getBopMunicipio() == null
                        && retorno.getBopOcorrenciaDeon()
                                .getBopEnderecoOcorrenciaDeon()
                                .getBopUnidadeFederacao() != null) {
                    retorno.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon()
                            .setBopMunicipio(
                                    (BopMunicipio) em
                                            .createNamedQuery(
                                                    BopMunicipio.FIND_BY_UF)
                                            .setParameter("cdUf", "NI")
                                            .getResultList().get(0));
                }
                if (retorno.getBopOcorrenciaDeon()
                        .getBopEnderecoOcorrenciaDeon().getBopBairro() == null
                        && retorno.getBopOcorrenciaDeon()
                                .getBopEnderecoOcorrenciaDeon()
                                .getBopUnidadeFederacao() != null) {
                    retorno.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon()
                            .setBopBairro(
                                    (BopBairro) em
                                            .createNamedQuery(
                                                    BopBairro.FIND_BY_MUNICIPIO)
                                            .setParameter("cdUf", "NI")
                                            .setParameter(
                                                    "cdMunicipio",
                                                    Long.parseLong("9999999999"))
                                            .getResultList().get(0));
                }
            }

        } catch (Exception e) {
            throw new BusinessException("012_23: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return retorno;

    }

    public BopOcorrencia gerarOcorrencia(BopOcorrencia bopOcorrencia,
            Comunicante comunicante,
            BopUnidadePolicial bopUnidadePolicialLogada,
            boolean flagOcorrenciaTransito) throws Exception {

        em.setFlushMode(FlushModeType.COMMIT);

        BopOcorrencia retorno = null;

        try {

            BopPlanOperacional bopPlanOperacional = this.getPlanOperacional(
                    bopOcorrencia, bopUnidadePolicialLogada);
            Long cdRegiaoPlan = 2L;

            if (bopPlanOperacional != null) {
                cdRegiaoPlan = bopPlanOperacional.getId().getCdRegiaoPlan();
            }

            Date dtSysDate = this.getSysDate();

            BopChamado bopChamado = new BopChamado(comunicante);

            bopChamado.setDtChamado(dtSysDate);
            bopChamado.setFlSituacao("0");
            bopChamado.setIdOperador(comunicante.getUsuario());
            bopChamado.setFlTitular("S");
            bopChamado
                    .setNmSolicitante(!Util.isNullOrEmpty(comunicante.getNome())
                            && comunicante.getNome().length() > 40 ? comunicante
                            .getNome().substring(0, 40) : comunicante.getNome());
            bopChamado.setCdTipoLocal(bopOcorrencia.getBopTipoLocal()
                    .getCdTipoLocal());
            bopChamado.setDsCidadeInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getBopMunicipio()
                    .getNmMunicipio());
            bopChamado.setDsBairroInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getBopBairro()
                    .getNmBairro());
            bopChamado.setDsEnderecoInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsLogradouro());
            bopChamado.setNrNumeroInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getNrNumero());
            bopChamado.setDsReferenciaInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsPontoReferencia());
            bopChamado.setDsComplementoInf(bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsComplemento());

            if (bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getNrCep() != null
                    && !bopOcorrencia.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon().getNrCep().trim()
                            .equals("")) {

                bopChamado.setCdCepInf(Long.parseLong(bopOcorrencia
                        .getBopOcorrenciaDeon().getBopEnderecoOcorrenciaDeon()
                        .getNrCep()));

            }

            BopDespachoAndamento bopDespachoAndamento = new BopDespachoAndamento(
                    bopChamado);
            bopDespachoAndamento.setCdRegiaoPlan(cdRegiaoPlan);
            bopDespachoAndamento.setCdAgencia(bopUnidadePolicialLogada.getId()
                    .getCdAgencia());
            bopDespachoAndamento.setCdUnidPolicial(bopUnidadePolicialLogada
                    .getId().getCdUnidPolicial());
            bopDespachoAndamento.setFlSituacao("0");
            bopDespachoAndamento.setNrBoletimOcorrencia(bopOcorrencia.getId()
                    .getNrBop());
            bopDespachoAndamento.setDtVisualizacao(dtSysDate);
            bopDespachoAndamento.setDtDespacho(dtSysDate);
            bopDespachoAndamento.setIdDespachador(comunicante.getUsuario());
            bopDespachoAndamento.setCdCep(bopChamado.getCdCepInf());
            bopDespachoAndamento.setDsCidade(bopChamado.getDsCidadeInf());
            bopDespachoAndamento.setDsBairro(bopChamado.getDsBairroInf());
            bopDespachoAndamento.setDsComplemento(bopChamado
                    .getDsComplementoInf());
            bopDespachoAndamento.setDsReferencia(bopChamado
                    .getDsReferenciaInf());
            bopDespachoAndamento.setDsRua(bopChamado.getDsEnderecoInf());
            bopDespachoAndamento.setNrNumero(bopChamado.getNrNumeroInf());
            bopDespachoAndamento.setUsrCriacao(comunicante.getUsuario());
            bopDespachoAndamento.setDtCriacao(dtSysDate);

            BopEnvolvidosOcorrencia bopEnvolOcor = new BopEnvolvidosOcorrencia(
                    bopOcorrencia);

            bopEnvolOcor
                    .setNmComplEnvol(!Util.isNullOrEmpty(comunicante.getNome())
                            && comunicante.getNome().length() > 50 ? comunicante
                            .getNome().substring(0, 50) : comunicante.getNome());

            bopEnvolOcor.setNmMae(!Util.isNullOrEmpty(comunicante.getNomeMae())
                    && comunicante.getNomeMae().length() > 50 ? comunicante
                    .getNomeMae().substring(0, 50) : comunicante.getNomeMae());

            bopEnvolOcor.setNmPai(!Util.isNullOrEmpty(comunicante.getNomePai())
                    && comunicante.getNomePai().length() > 50 ? comunicante
                    .getNomePai().substring(0, 50) : comunicante.getNomePai());

            bopEnvolOcor.setIdDocIdentid(comunicante.getRg() == null ? null
                    : comunicante.getRg().toString());
            bopEnvolOcor.setCdUfIdentid(comunicante.getBopUf() == null ? null
                    : comunicante.getBopUf().getCdUf());
            bopEnvolOcor.setNrCpf(comunicante.getCpf());
            bopEnvolOcor.setDtNascimento(comunicante.getDtNascimento());

            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setFlComunicante(
                    "true");
            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setDsObservacao(
                    comunicante.getObservacao());
            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon()
                    .setBopUnidadePolicialEspecial(
                            comunicante.getBopUnidadePolicialEspecial());
            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setBopCargo(
                    comunicante.getBopCargo());
            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setNrDocumento(
                    comunicante.getNrDocumento());
            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setBopTipoDocumento(
                    comunicante.getBopTipoDocumento());

            if (comunicante.getVitimaFatal() != null
                    && comunicante.getVitimaFatal().toString() != null) {
                bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setVitimaFatal(
                        comunicante.getVitimaFatal());
            }

            if (comunicante.getParturiente() != null
                    && comunicante.getParturiente().toString() != null) {
                bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon().setParturiente(
                        comunicante.getParturiente());
            }

            String telefone = comunicante.getTelefone();
            String ddd = comunicante.getDdd();

            if (ehCelular(telefone)) {
                telefone = ddd + telefone;
                bopEnvolOcor.setNrTelCelular(BigDecimal.valueOf(Double
                        .valueOf(telefone)));
            } else if (ehResidencial(telefone)) {

                bopEnvolOcor.setIdTelefone(ddd + telefone);

            }

            BopEnvolvidoTipoEnvolvido bopEnvolvidoTipoEnvolvido = BopEnvolvidoTipoEnvolvido
                    .criarBopEnvolvidoTipoEnvolvido(
                            comunicante.getBopTipoEnvolvimento(),
                            bopUnidadePolicialLogada,
                            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon(), true,
                            flagOcorrenciaTransito);

            bopEnvolOcor.getBopEnvolvidoOcorrenciaDeon()
                    .getBopEnvolvidoTiposEnvolvido()
                    .add(bopEnvolvidoTipoEnvolvido);

            bopOcorrencia
                    .setBopEnvolvidosOcorrencia(new ArrayList<BopEnvolvidosOcorrencia>());
            bopOcorrencia.getBopEnvolvidosOcorrencia().add(bopEnvolOcor);

            BopChamadoOcorrencia bopChamadoOcorrencia = new BopChamadoOcorrencia(
                    bopOcorrencia, bopChamado);

            bopChamadoOcorrencia.setUsGeracao(comunicante.getUsuario());
            bopChamadoOcorrencia.setDtGeracao(dtSysDate);
            bopChamadoOcorrencia.setUsUltAtualizacao(comunicante.getUsuario());
            bopChamadoOcorrencia.setDtUltAtualizacao(dtSysDate);

            bopChamado.setBopChamadoOcorrencia(bopChamadoOcorrencia);
            bopChamado.setBopDespachoAndamento(bopDespachoAndamento);

            bopChamado = em.merge(bopChamado);

            BopOcorrenciaAgencia ocorrenciaAgencia = new BopOcorrenciaAgencia(
                    bopChamado.getBopChamadoOcorrencia().getBopOcorrencia(),
                    bopUnidadePolicialLogada);

            ocorrenciaAgencia.setBopDespachoAndamento(bopChamado
                    .getBopDespachoAndamento());

            if (bopChamado.getBopChamadoOcorrencia().getBopOcorrencia()
                    .getBopOcorrenciaSubTipoLocal() != null
                    && bopChamado.getBopChamadoOcorrencia().getBopOcorrencia()
                            .getBopOcorrenciaSubTipoLocal().getCdSubTipoLocal() != null) {
                bopChamado
                        .getBopChamadoOcorrencia()
                        .getBopOcorrencia()
                        .getBopOcorrenciaSubTipoLocal()
                        .setNrBop(
                                bopChamado.getBopChamadoOcorrencia()
                                        .getBopOcorrencia().getId().getNrBop());
                bopChamado
                        .getBopChamadoOcorrencia()
                        .getBopOcorrencia()
                        .getBopOcorrenciaSubTipoLocal()
                        .setTipoBop(
                                bopChamado.getBopChamadoOcorrencia()
                                        .getBopOcorrencia().getId()
                                        .getTipoBop());
            } else {

                bopChamado.getBopChamadoOcorrencia().getBopOcorrencia()
                        .setBopOcorrenciaSubTipoLocal(null);
            }

            BopOcorrenciaAgenciaDeon bopOcorrenciaAgenciaDeon = new BopOcorrenciaAgenciaDeon();

            bopOcorrenciaAgenciaDeon.setBopOcorrenciaAgencia(ocorrenciaAgencia);

            bopOcorrenciaAgenciaDeon.setDtInicioConfeccao(getSysDate());

            bopOcorrenciaAgenciaDeon.setDtPrimeiroConfeccao(getSysDate());

            bopOcorrenciaAgenciaDeon.setFlTransito(flagOcorrenciaTransito);

            bopOcorrenciaAgenciaDeon.setSituacao(bopOcorrencia
                    .getStatusOcorrencia());

            ocorrenciaAgencia
                    .setBopOcorrenciaAgenciaDeon(bopOcorrenciaAgenciaDeon);

            ocorrenciaAgencia = em.merge(ocorrenciaAgencia);

            bopChamado.getBopChamadoOcorrencia().getBopOcorrencia()
                    .adicionarOcorrenciaAgencia(ocorrenciaAgencia);

            bopChamado = em.merge(bopChamado);

            em.flush();

            em.refresh(bopChamado);

            em.clear();

            // em.refresh( o );
            // o = refreshEntity(o, o.getId() );
            retorno = bopChamado.getBopChamadoOcorrencia().getBopOcorrencia();

            retorno.getBopEnvolvidosOcorrencia().get(0).getId()
                    .setNrBop(retorno.getId().getNrBop());

            if (retorno.getBopOcorrenciaDeon() != null
                    && retorno.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon() != null) {

                if (retorno.getBopOcorrenciaDeon()
                        .getBopEnderecoOcorrenciaDeon().getBopMunicipio() == null
                        && retorno.getBopOcorrenciaDeon()
                                .getBopEnderecoOcorrenciaDeon()
                                .getBopUnidadeFederacao() != null) {

                    retorno.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon()
                            .setBopMunicipio(
                                    (BopMunicipio) em
                                            .createNamedQuery(
                                                    BopMunicipio.FIND_BY_UF)
                                            .setParameter("cdUf", "NI")
                                            .getResultList().get(0));
                }

                if (retorno.getBopOcorrenciaDeon()
                        .getBopEnderecoOcorrenciaDeon().getBopBairro() == null
                        && retorno.getBopOcorrenciaDeon()
                                .getBopEnderecoOcorrenciaDeon()
                                .getBopUnidadeFederacao() != null) {

                    retorno.getBopOcorrenciaDeon()
                            .getBopEnderecoOcorrenciaDeon()
                            .setBopBairro(
                                    (BopBairro) em
                                            .createNamedQuery(
                                                    BopBairro.FIND_BY_MUNICIPIO)
                                            .setParameter("cdUf", "NI")
                                            .setParameter(
                                                    "cdMunicipio",
                                                    Long.parseLong("9999999999"))
                                            .getResultList().get(0));

                }

            }

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_24: Ocorreu um erro inesperado.", e);
        }

        return retorno;

    }

    private boolean ehCelular(String telefone) {
        String first = telefone.trim().substring(0, 1);
        if (isNotNullOrEmpty(telefone)
                && ("8".equals(first) || "9".equals(first))) {
            return true;
        }
        return false;
    }

    private boolean ehResidencial(String telefone) {
        if (isNotNullOrEmpty(telefone) && (!"19000000".equals(telefone))) {
            return true;
        }
        return false;
    }

    public void mergeOcorrenciaDeon(BopOcorrenciaDeon ocorrenciaDeon)
            throws BusinessException {
        try {
            em.merge(ocorrenciaDeon);
        } catch (Exception e) {
            throw new BusinessException("012_25: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoEndereco> getAllTipoEndereco() throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoEndereco.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_26: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopNaturalidade getNaturalidadeByNmMunicipio(String nmMunicipio)
            throws BusinessException {

        BopNaturalidade bopNaturalidade = null;
        BopMunicipio bopMunicipio = null;

        StringBuilder sql = new StringBuilder();

        Query query;

        if (isNotNullOrEmpty(nmMunicipio)) {

            sql.append(" SELECT * ");
            sql.append("	FROM BOP_MUNICIPIOS_GERAL");
            sql.append("		WHERE NM_MUNICIPIO LIKE RETIRAACENTO(?)");
            sql.append(" ORDER BY NM_MUNICIPIO");

            List<BopMunicipio> listaBopMunicipio;
            try {
                query = em
                        .createNativeQuery(sql.toString(), BopMunicipio.class);

                query.setParameter(1, nmMunicipio.trim());

                listaBopMunicipio = query.getResultList();
            } catch (Exception e) {
                throw new BusinessException("012_27: "
                        + "Ocorreu um erro inesperado.", e);

            }
            if (listaBopMunicipio != null && listaBopMunicipio.size() > 0) {
                bopMunicipio = listaBopMunicipio.get(0);
            }
            if (isNotNullOrEmpty(bopMunicipio)) {

                List<BopNaturalidade> listaBopNaturalidade = em
                        .createNamedQuery(
                                "BopNaturalidade.findNaturalidadeByDs")
                        .setParameter("dsNatur", bopMunicipio.getId().getCdUf())
                        .getResultList();
                if (listaBopNaturalidade != null
                        && listaBopNaturalidade.size() > 0) {
                    bopNaturalidade = listaBopNaturalidade.get(0);
                }
            }
        }
        return bopNaturalidade;
    }

    public BopMunicipio getMunicipioByNm(String nmMunicipio)
            throws BusinessException {
        BopMunicipio bopMunicipio = null;

        StringBuilder sql = new StringBuilder();

        if (isNotNullOrEmpty(nmMunicipio)) {

            sql.append(" SELECT * ");
            sql.append("	FROM BOP_MUNICIPIOS_GERAL");
            sql.append("		WHERE NM_MUNICIPIO LIKE RETIRAACENTO(?)");
            sql.append(" ORDER BY NM_MUNICIPIO");

            List<BopMunicipio> listaBopMunicipio;
            try {
                Query query = em.createNativeQuery(sql.toString(),
                        BopMunicipio.class);

                query.setParameter(1, nmMunicipio.trim());

                listaBopMunicipio = query.getResultList();
            } catch (Exception e) {
                throw new BusinessException("012_28: "
                        + "Ocorreu um erro inesperado.", e);

            }

            if (listaBopMunicipio != null && listaBopMunicipio.size() > 0) {
                bopMunicipio = listaBopMunicipio.get(0);
            }
        }

        return bopMunicipio;
    }

    public BopMunicipio getMunicipioByNm(String nmMunicipio, String cdUf)
            throws BusinessException {
        BopMunicipio bopMunicipio = null;

        StringBuilder sql = new StringBuilder();

        if (isNotNullOrEmpty(nmMunicipio) && isNotNullOrEmpty(cdUf)) {

            sql.append(" SELECT * ");
            sql.append("	FROM BOP_MUNICIPIOS_GERAL");
            sql.append("		WHERE NM_MUNICIPIO = RETIRAACENTO(?)");
            sql.append("          AND CD_UF = ?");
            sql.append(" ORDER BY NM_MUNICIPIO");

            List<BopMunicipio> listaBopMunicipio;
            try {
                Query query = em.createNativeQuery(sql.toString(),
                        BopMunicipio.class);

                query.setParameter(1, nmMunicipio.trim());
                query.setParameter(2, cdUf.trim());

                listaBopMunicipio = query.getResultList();
            } catch (Exception e) {
                throw new BusinessException("012_29: "
                        + "Ocorreu um erro inesperado.", e);

            }

            if (listaBopMunicipio != null && listaBopMunicipio.size() > 0) {
                bopMunicipio = listaBopMunicipio.get(0);
            }

        }

        return bopMunicipio;
    }

    public List<BopMunicipio> getMunicipio(
            BopUnidadesFederacao bopUnidadesFederacao, boolean comNaoInformado)
            throws BusinessException {
        if (bopUnidadesFederacao == null) {
            return null;
        }
        List<BopMunicipio> listBopMunicipio;
        try {
            listBopMunicipio = em.createNamedQuery(BopMunicipio.FIND_BY_UF)
                    .setParameter("cdUf", bopUnidadesFederacao.getCdUf())
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_30: "
                    + "Ocorreu um erro inesperado.", e);

        }
        if (!bopUnidadesFederacao.getCdUf().trim().equals("NI")
                && comNaoInformado) {
            List<BopMunicipio> listNaoInformado = em
                    .createNamedQuery(BopMunicipio.FIND_BY_UF)
                    .setParameter("cdUf", "NI").getResultList();
            listBopMunicipio.addAll(listNaoInformado);
        }
        return listBopMunicipio;
    }

    public List<BopBairro> getBairro(BopMunicipio bopMunicipio,
            boolean comNaoInformado) throws BusinessException {
        if (bopMunicipio == null) {
            return null;
        }
        List<BopBairro> listBopBairro;
        try {
            listBopBairro = em
                    .createNamedQuery(BopBairro.FIND_BY_MUNICIPIO)
                    .setParameter("cdUf",
                            bopMunicipio.getBopUnidadeFederacao().getCdUf())
                    .setParameter("cdMunicipio",
                            bopMunicipio.getId().getCdMunicipio())
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_31: "
                    + "Ocorreu um erro inesperado.", e);

        }
        if (!bopMunicipio.getBopUnidadeFederacao().getCdUf().trim()
                .equals("NI")
                && comNaoInformado) {
            List<BopBairro> listNaoInformado = em
                    .createNamedQuery(BopBairro.FIND_BY_MUNICIPIO)
                    .setParameter("cdUf", "NI")
                    .setParameter("cdMunicipio", Long.parseLong("9999999999"))
                    .getResultList();
            listBopBairro.addAll(listNaoInformado);
        }
        return listBopBairro;
    }

    public List<BopUnidadesFederacao> getAllUf() throws BusinessException {
        try {
            return em.createNamedQuery("BopUnidadesFederacao.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_32: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopUnidadesFederacao getUf(String cdUf) throws BusinessException {

        BopUnidadesFederacao bopUnidadesFederacao;

        try {
            bopUnidadesFederacao = (BopUnidadesFederacao) em
                    .createNamedQuery("BopUnidadesFederacao.findCdUf")
                    .setParameter("cdUf", cdUf).getSingleResult();
        } catch (NoResultException e) {
            bopUnidadesFederacao = null;
        } catch (Exception e) {
            throw new BusinessException("012_33: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopUnidadesFederacao;

    }

    public List<BopSituacaoEnvolvido> getAllSituacaoEnvolvido()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopSituacaoEnvolvido.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_34: "
                    + "Ocorreu um erro inesperado.", e);
        }
    }

    public List<BopReligiao> getAllReligiao() throws BusinessException {
        try {
            return em.createNamedQuery("BopReligiao.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_35: "
                    + "Ocorreu um erro inesperado.", e);
        }
    }

    public List<BopProfissaoOcupacao> getAllProfissaoOcupacao()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopProfissaoOcupacao.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_36: "
                    + "Ocorreu um erro inesperado.", e);
        }
    }

    public List<BopCutis> getAllCutis() throws BusinessException {
        try {
            return em.createNamedQuery("BopCutis.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_37: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopAgencia> getAllAgencia() throws BusinessException {
        try {
            return em.createNamedQuery("BopAgencia.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_38: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopPericulosidade> getAllPericulosidade()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopPericulosidade.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_39: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopOcorrenciaAgencia> getMapaOcorrencias(String usuario)
            throws BusinessException {

        try {
            List<BopOcorrenciaAgencia> listaBoa = em
                    .createNamedQuery(
                            "BopOcorrenciaAgencia.findMapaOcorrencias")
                    .setParameter("pUsuario", usuario).setMaxResults(100)
                    .getResultList();

            return listaBoa;
        } catch (Exception e) {
            throw new BusinessException("012_40: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopOcorrencia> getOcorrencia(OcorrenciaTransiente ocorrTrans,
            int indexPaginacao, int rows) throws BusinessException {

        // Zerando conector.
        connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strBufferQuery = new StringBuffer();

        // Consulta por campos específicos para ganho de velocidade na execução
        // da query.
        strBufferQuery
                .append(" SELECT OC.NR_BOP, OC.TIPO_BOP, OC.CD_AGENCIA, OC.TP_INCIDENTE_PRINCIPAL, OC.CD_UNID_POLICIAL, OC.DT_CRIACAO FROM BOP_OCORRENCIA OC ");

        if (ocorrTrans.getNrChamado() == null
                && ocorrTrans.getDtOcorrenciaIni() == null
                && ocorrTrans.getDtOcorrenciaFim() == null
                && ocorrTrans.getDescricao() == null
                && ocorrTrans.getBopIncidente() == null
                && ocorrTrans.getNmEnvolvido() == null) {

            Calendar cal = Calendar.getInstance();
            ocorrTrans.setDtOcorrenciaFim(cal.getTime());

        }

        if (ocorrTrans.getNrChamado() != null) {

            strBufferQuery
                    .append(" JOIN BOP_CHAMADO_OCORRENCIA CO ON CO.NR_BOP = OC.NR_BOP AND CO.TIPO_BOP = OC.TIPO_BOP "
                            + " WHERE CO.NR_CHAMADO = "
                            + ocorrTrans.getNrChamado());
        } else {

            // Inserção de início de query para utilização de páginação com
            // ROWNUM.
            strBufferQuery.insert(0,
                    "SELECT * FROM (SELECT a.*, ROWNUM rnum  FROM ( ");

            appendJoin(
                    strBufferQuery,
                    " JOIN BOP_OCORRENCIA_AGENCIA OCA ON OCA.NR_BOP = OC.NR_BOP ",
                    ocorrTrans.getDescricao());
            appendJoin(
                    strBufferQuery,
                    " JOIN BOP_UNIDADE_POLICIAL BE ON (BE.CD_UNID_POLICIAL =  OC.CD_UNID_POLICIAL AND BE.CD_AGENCIA =  OC.CD_AGENCIA) ",
                    ocorrTrans.getBopUnidadePolicial());
            appendJoin(
                    strBufferQuery,
                    " JOIN BOP_ENVOLVIDOS_OCORRENCIA EO ON EO.NR_BOP = OC.NR_BOP AND EO.TIPO_BOP = OC.TIPO_BOP ",
                    ocorrTrans.getNmEnvolvido());

            appendWhereClause(strBufferQuery, ocorrTrans.getDtOcorrenciaIni(),
                    " ( TRUNC( OC.DT_CRIACAO ) >= TRUNC( ? ) ) ");
            appendWhereClause(strBufferQuery, ocorrTrans.getDtOcorrenciaFim(),
                    " ( TRUNC( OC.DT_CRIACAO ) <= TRUNC( ? ) ) ");

            // Query de consulta por descrição foi removida, por motivo de
            // verificação de uma ferramenta da Oracle para realizar esse tipo
            // de consulta.
            // appendWhereClause( strBufferQuery, dsOcorrencia,
            // " ( upper( RETIRAACENTO( OCA.DS_OCORRENCIA ) ) like upper( RETIRAACENTO( ? ) )  )");
            appendWhereClause(strBufferQuery, ocorrTrans.getBopIncidente(),
                    " ( OC.TP_INCIDENTE_PRINCIPAL = ? )");
            appendWhereClause(strBufferQuery,
                    ocorrTrans.getBopUnidadePolicial(),
                    " ( OC.CD_UNID_POLICIAL = ? ) ");
            appendWhereClause(
                    strBufferQuery,
                    ocorrTrans.getNmEnvolvido(),
                    " ( translate( EO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE "
                    + " translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') )");
            strBufferQuery
                    .append("AND (OC.DT_CRIACAO IS NOT NULL) ORDER BY OC.DT_CRIACAO DESC ");

            strBufferQuery.append(" ) a WHERE ROWNUM <= "
                    + (indexPaginacao + rows) + " ) WHERE rnum >"
                    + indexPaginacao);

        }

        query = em.createNativeQuery(strBufferQuery.toString(),
                BopOcorrencia.class);

        if (ocorrTrans.getDtOcorrenciaIni() != null) {
            query.setParameter(parametros++, ocorrTrans.getDtOcorrenciaIni());
        }
        if (ocorrTrans.getDtOcorrenciaFim() != null) {
            query.setParameter(parametros++, ocorrTrans.getDtOcorrenciaFim());
        }
        if (ocorrTrans.getDescricao() != null) {
            query.setParameter(parametros++, ocorrTrans.getDescricao());
        }
        if (ocorrTrans.getBopIncidente() != null) {
            query.setParameter(parametros++, ocorrTrans.getBopIncidente()
                    .getTpIncidente());
        }
        if (ocorrTrans.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrTrans.getBopUnidadePolicial()
                    .getId().getCdUnidPolicial());
        }
        if (ocorrTrans.getNmEnvolvido() != null) {
            query.setParameter(parametros++, ocorrTrans.getNmEnvolvido());
        }

        List<BopOcorrencia> listBopOcorrencia;
        try {
            listBopOcorrencia = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_41: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listBopOcorrencia;
    }

    public int getOcorrenciaCount(OcorrenciaTransiente ocorrTrans)
            throws BusinessException {

        // Zerando conector.
        connector = null;
        Query query = null;
        int parametros = 1;
        int resultado;

        StringBuffer strBufferQuery = new StringBuffer();

        // Consulta por campos específicos para ganho de velocidade na execução
        // da query.
        strBufferQuery.append(" SELECT COUNT(1) FROM BOP_OCORRENCIA OC ");

        if (ocorrTrans.getNrChamado() == null
                && ocorrTrans.getDtOcorrenciaIni() == null
                && ocorrTrans.getDtOcorrenciaFim() == null
                && ocorrTrans.getDescricao() == null
                && ocorrTrans.getBopIncidente() == null
                && ocorrTrans.getNmEnvolvido() == null) {

            Calendar cal = Calendar.getInstance();
            ocorrTrans.setDtOcorrenciaFim(cal.getTime());

        }

        if (ocorrTrans.getNrChamado() != null) {

            strBufferQuery
                    .append(" JOIN BOP_CHAMADO_OCORRENCIA CO ON CO.NR_BOP = OC.NR_BOP AND CO.TIPO_BOP = OC.TIPO_BOP "
                            + " WHERE CO.NR_CHAMADO = "
                            + ocorrTrans.getNrChamado());
        } else {

            appendJoin(
                    strBufferQuery,
                    " JOIN BOP_OCORRENCIA_AGENCIA OCA ON OCA.NR_BOP = OC.NR_BOP ",
                    ocorrTrans.getDescricao());
            appendJoin(
                    strBufferQuery,
                    " JOIN BOP_UNIDADE_POLICIAL BE ON (BE.CD_UNID_POLICIAL =  OC.CD_UNID_POLICIAL AND BE.CD_AGENCIA =  OC.CD_AGENCIA) ",
                    ocorrTrans.getBopUnidadePolicial());
            appendJoin(
                    strBufferQuery,
                    " JOIN BOP_ENVOLVIDOS_OCORRENCIA EO ON EO.NR_BOP = OC.NR_BOP AND EO.TIPO_BOP = OC.TIPO_BOP ",
                    ocorrTrans.getNmEnvolvido());

            appendWhereClause(strBufferQuery, ocorrTrans.getDtOcorrenciaIni(),
                    " ( TRUNC( OC.DT_CRIACAO ) >= TRUNC( ? ) ) ");
            appendWhereClause(strBufferQuery, ocorrTrans.getDtOcorrenciaFim(),
                    " ( TRUNC( OC.DT_CRIACAO ) <= TRUNC( ? ) ) ");

            // Query de consulta por descrição foi removida, por motivo de
            // verificação de uma ferramenta da Oracle para realizar esse tipo
            // de consulta.
            // appendWhereClause( strBufferQuery, dsOcorrencia,
            // " ( upper( RETIRAACENTO( OCA.DS_OCORRENCIA ) ) like upper( RETIRAACENTO( ? ) )  )");
            appendWhereClause(strBufferQuery, ocorrTrans.getBopIncidente(),
                    " ( OC.TP_INCIDENTE_PRINCIPAL = ? )");
            appendWhereClause(strBufferQuery,
                    ocorrTrans.getBopUnidadePolicial(),
                    " ( OC.CD_UNID_POLICIAL = ? ) ");
            appendWhereClause(
                    strBufferQuery,
                    ocorrTrans.getNmEnvolvido(),
                    " ( translate( EO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE "
                    + " translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') )");
            strBufferQuery
                    .append("AND (OC.DT_CRIACAO IS NOT NULL) ORDER BY OC.DT_CRIACAO DESC ");

        }

        query = em.createNativeQuery(strBufferQuery.toString());

        if (ocorrTrans.getDtOcorrenciaIni() != null) {
            query.setParameter(parametros++, ocorrTrans.getDtOcorrenciaIni());
        }
        if (ocorrTrans.getDtOcorrenciaFim() != null) {
            query.setParameter(parametros++, ocorrTrans.getDtOcorrenciaFim());
        }
        if (ocorrTrans.getDescricao() != null) {
            query.setParameter(parametros++, ocorrTrans.getDescricao());
        }
        if (ocorrTrans.getBopIncidente() != null) {
            query.setParameter(parametros++, ocorrTrans.getBopIncidente()
                    .getTpIncidente());
        }
        if (ocorrTrans.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrTrans.getBopUnidadePolicial()
                    .getId().getCdUnidPolicial());
        }
        if (ocorrTrans.getNmEnvolvido() != null) {
            query.setParameter(parametros++, ocorrTrans.getNmEnvolvido());
        }

        try {

            resultado = ((BigInteger) query.getSingleResult()).intValue();
            return (resultado > 0) ? resultado : 0;
        } catch (NoResultException e) {
            return 0;
        } catch (Exception e) {
            throw new BusinessException("012_42: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopIncidente> getAllBopIncidente() throws BusinessException {

        try {
            List<BopIncidente> listBopIncidente = em.createNamedQuery(
                    "BopIncidente.findAll").getResultList();

            return listBopIncidente;
        } catch (Exception e) {
            throw new BusinessException("012_43: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopIncidente getBopIncidenteByTpIncidente(String tpIncidente)
            throws BusinessException {

        List<BopIncidente> listBopIncidente;
        try {
            listBopIncidente = em
                    .createNamedQuery("BopIncidente.findByTpIncidente")
                    .setParameter("tpIncidente", tpIncidente).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_44: "
                    + "Ocorreu um erro inesperado.", e);
        }
        if (listBopIncidente.size() > 0) {
            return listBopIncidente.get(0);
        } else {
            return null;
        }
    }

    // Exluir substituir por metodo que manilupe a Lista Estatica
    public List<BopIncidente> getBopIncidentes(String tpIncidente,
            String dsIncidente) throws BusinessException {

        connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strQuery = new StringBuffer();

        strQuery.append(" SELECT TP_INCIDENTE, DS_INCIDENTE, ID_INCIDENTE_PAI FROM BOP_INCIDENTE BI ");
        appendWhereClause(strQuery, tpIncidente, " BI.TP_INCIDENTE LIKE ? ");
        appendWhereClause(strQuery, dsIncidente, " BI.DS_INCIDENTE LIKE ? ");
        strQuery.append(" ORDER BY BI.DS_INCIDENTE ");

        query = em.createNativeQuery(strQuery.toString(), BopIncidente.class);

        if (!Util.isNullOrEmpty(tpIncidente)) {
            query.setParameter(parametros++, "%" + tpIncidente + "%");
        }

        if (!Util.isNullOrEmpty(dsIncidente)) {
            query.setParameter(parametros++, "%" + dsIncidente + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_45: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopIncidente> getListaGruposBopIncidente()
            throws BusinessException {

        try {
            Query query = em
                    .createNativeQuery(
                            "select TP_INCIDENTE,( TP_INCIDENTE || ' - ' || pa_incidente.get_incidente(TP_INCIDENTE)) as DS_INCIDENTE from bop_incidente where length(TP_INCIDENTE) = 1 order by TP_INCIDENTE",
                            BopIncidente.class);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_46: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public String removerEnvolvidosOcorrencia(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {

        try {

            em.setFlushMode(FlushModeType.COMMIT);

            bopEnvolvidosOcorrencia.getBopEnvolvidoAcidente();
            bopEnvolvidosOcorrencia.setBopEnvolvidoAcidente(null);
            bopEnvolvidosOcorrencia = (BopEnvolvidosOcorrencia) em
                    .merge(bopEnvolvidosOcorrencia);

            em.flush();

            List<BopEnvolvidoOcorNomeFonema> lista = em
                    .createNativeQuery(
                            "SELECT * FROM EBOP.BOP_ENVOLVIDO_OCOR_NOME_FONEMA WHERE ID_ENVOLVIDO_DEON = ?",
                            BopEnvolvidoOcorNomeFonema.class)
                    .setParameter(
                            1,
                            bopEnvolvidosOcorrencia
                                    .getBopEnvolvidoOcorrenciaDeon()
                                    .getIdEnvolvidoDeon()).getResultList();

            em.flush();

            if (!Util.isListBlank(lista)) {

                for (BopEnvolvidoOcorNomeFonema nome : lista) {

                    nome = em.find(BopEnvolvidoOcorNomeFonema.class,
                            nome.getId());
                    em.remove(nome);
                    em.flush();

                }

            }

            em.remove(bopEnvolvidosOcorrencia);

            em.flush();

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_47: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return null;

    }

    public void removerEnderecoEnvolvidos(
            BopEnderecoEnvolvido bopEnderecoEnvolvido) throws BusinessException {

        try {

            bopEnderecoEnvolvido = (BopEnderecoEnvolvido) em
                    .merge(bopEnderecoEnvolvido);

            em.flush();

            em.remove(bopEnderecoEnvolvido);

            em.flush();

        } catch (Exception e) {

            throw new BusinessException("012_48: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    public BopEnvolvidosOcorrencia mergeEnvolvidosOcorrencia(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {

        try {
            BopEnvolvidosOcorrencia retorno = em.merge(bopEnvolvidosOcorrencia);

            em.flush();
            em.refresh(retorno);

            // Chamada para forcar o carregamento da lista que e lazy.
            retorno.getBopOcorrencia().getBopEnvolvidosOcorrencia().size();

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_49: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopEnvolvidosOcorrencia refresh(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {
        try {
            em.flush();
            em.refresh(bopEnvolvidosOcorrencia);

            return bopEnvolvidosOcorrencia;
        } catch (Exception e) {
            throw new BusinessException("012_50: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopOcorrencia refresh(BopOcorrencia bopOcorrencia)
            throws BusinessException {
        try {
            em.flush();
            em.refresh(bopOcorrencia);

            return bopOcorrencia;
        } catch (Exception e) {
            throw new BusinessException("012_51: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopEnvolvidosOcorrencia persistEnvolvidoOcorrencia(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {

        try {
            em.persist(bopEnvolvidosOcorrencia);

            em.flush();
            em.refresh(bopEnvolvidosOcorrencia);

            return bopEnvolvidosOcorrencia;
        } catch (Exception e) {
            throw new BusinessException("012_52: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public void updateBopEnvOcorrFotoDeon(byte[] imFoto, byte[] imFotoOriginal,
            byte[] imThumbnail, long id) throws BusinessException {

        try {

            String sql = " UPDATE BOP_ENV_OCORR_FOTO_DEON SET IM_FOTO = ?, IM_FOTO_ORIGINAL = ?, IM_THUMBNAIL = ? WHERE ID_FOTO_ENVOLVIDO = ? ";

            Query q = em.createNativeQuery(sql).setParameter(1, imFoto)
                    .setParameter(2, imFotoOriginal)
                    .setParameter(3, imThumbnail).setParameter(4, id);

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_53: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public void updateFotoPrincipalEnvolvido(long idFoto, long id)
            throws BusinessException {

        try {

            String sql = " UPDATE BOP_ENVOLVIDO_OCORRENCIA_DEON SET ID_FOTO_ENVOLVIDO_PRINCIPAL = ? WHERE ID_ENVOLVIDO_DEON = ? ";

            Query q = em.createNativeQuery(sql).setParameter(1, idFoto)
                    .setParameter(2, id);

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_54: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopEnvOcorrFotoDeon mergeBopEnvOcorrFotoDeon(
            BopEnvOcorrFotoDeon bopEnvOcorrFotoDeon) throws BusinessException {

        try {
            BopEnvOcorrFotoDeon retorno = em.merge(bopEnvOcorrFotoDeon);

            em.flush();
            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_55: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public void updateBopPeculiaridadeEnvolFotoDeon(byte[] imFoto,
            byte[] imFotoOriginal, byte[] imThumbnail, long id)
            throws BusinessException {

        try {

            String sql = " UPDATE BOP_PECULI_ENVOL_FOTO_DEON SET IM_FOTO = ?, IM_FOTO_ORIGINAL = ?, IM_THUMBNAIL = ? WHERE ID_PECULIARIDADE_ENVOL_FOTO = ? ";

            Query q = em.createNativeQuery(sql).setParameter(1, imFoto)
                    .setParameter(2, imFotoOriginal)
                    .setParameter(3, imThumbnail).setParameter(4, id);

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_56: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopPeculiaridadeEnvolvido mergeBopPeculiaridadeEnvolDeon(
            BopPeculiaridadeEnvolvido bopPeculiaridadeEnvolvido)
            throws BusinessException {

        try {
            BopPeculiaridadeEnvolvido retorno = em
                    .merge(bopPeculiaridadeEnvolvido);

            em.flush();
            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_57: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public void updateBopAnexoOcorrencia(byte[] documento, long id)
            throws BusinessException {

        try {

            if (documento != null && documento.length > 0) {

                String sql = " UPDATE BOP_ANEXO_OCORRENCIA_DEON SET DOCUMENTO = ? WHERE ID_ANEXO = ? ";

                Query q = em.createNativeQuery(sql).setParameter(1, documento)
                        .setParameter(2, id);

                q.executeUpdate();

            } else {

                byte[] bytes = null;

                try {

                    bytes = (byte[]) em
                            .createNativeQuery(
                                    "SELECT DOCUMENTO FROM BOP_ANEXO_OCORRENCIA_DEON WHERE ID_ANEXO = ? ")
                            .setParameter(1, id).getSingleResult();

                } catch (NoResultException e) {

                    bytes = null;

                } catch (Exception e) {
                    throw new BusinessException("012_58: "
                            + "Ocorreu um erro inesperado.", e);

                }

                bytes.toString().getBytes();

            }

        } catch (NullPointerException e) {

            String sql = "DELETE FROM BOP_ANEXO_OCORRENCIA_DEON WHERE ID_ANEXO = ? ";

            Query q = em.createNativeQuery(sql).setParameter(1, id);

            q.executeUpdate();

            throw new BusinessException(
                    "Ocorreu um erro ao salvar. Carregue a imagem novamente.");

        } catch (Exception e) {

            throw new BusinessException("012_58: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopTipoEnvolvimento getTipoEnvolvimento(int cdTipoEnv)
            throws BusinessException {

        if (cdTipoEnv > 0) {

            BopTipoEnvolvimento bopTipoEnvolvimento;

            try {

                bopTipoEnvolvimento = (BopTipoEnvolvimento) em
                        .createNamedQuery(BopTipoEnvolvimento.FIND_BY_ID)
                        .setParameter("cdTipoEnv", cdTipoEnv).getSingleResult();

            } catch (NoResultException e) {

                bopTipoEnvolvimento = null;

            } catch (Exception e) {
                throw new BusinessException("012_59: "
                        + "Ocorreu um erro inesperado.", e);

            }

            return bopTipoEnvolvimento;

        } else {

            return null;

        }

    }

    public List<BopProfissaoOcupacao> getAllProfissoes()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopProfissaoOcupacao.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_60: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public VwDeonTipoObjeto getTipoObjeto(int idTipoObjeto)
            throws BusinessException {
        List<VwDeonTipoObjeto> listVwDeonTipoObjeto = null;
        try {
            listVwDeonTipoObjeto = em
                    .createNamedQuery("VwDeonTipoObjeto.findById")
                    .setParameter("idTipoObjeto", idTipoObjeto).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_61: "
                    + "Ocorreu um erro inesperado.", e);

        }
        if (listVwDeonTipoObjeto.size() > 0) {
            return listVwDeonTipoObjeto.get(0);
        } else {
            return null;
        }
    }

    public List<BopModeloMatApreendido> getModelo(
            VwDeonMarcaObjeto vwDeonMarcaObjeto) throws BusinessException {
        if (vwDeonMarcaObjeto == null) {
            return null;
        }
        try {
            return em.createNamedQuery("BopModeloMatApreendido.findByMarca")
                    .setParameter("pCdMarca", vwDeonMarcaObjeto.getIdMarca())
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_62: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonMarcaObjeto> getMarca(VwDeonTipoObjeto vwDeonTipoObjeto)
            throws BusinessException {
        if (vwDeonTipoObjeto == null) {
            return null;
        }
        try {
            return em
                    .createNamedQuery("VwDeonMarcaObjeto.findByTipoObjeto")
                    .setParameter("idTipoObjeto",
                            vwDeonTipoObjeto.getIdTipoObjeto()).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_63: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonMarcaObjeto> getMarcaLazy(
            VwDeonTipoObjeto vwDeonTipoObjeto, String dsMarca,
            int indiceInicial, int nrLinhas) throws BusinessException {

        if (vwDeonTipoObjeto == null) {
            return null;
        }

        try {
            List<VwDeonMarcaObjeto> listaVwDeonMarcaObjeto = em
                    .createNativeQuery(
                            "select * from VW_DEON_MARCA_OBJETO where ID_TIPO_OBJETO = "
                            + vwDeonTipoObjeto.getIdTipoObjeto()
                            + " and DS_MARCA like '"
                            + dsMarca
                            + "' ORDER BY DECODE(DS_MARCA, 'TAURUS', 1,'GLOCK', 2, 'IMBEL', 3, 'ROSSI', 4)",
                            VwDeonMarcaObjeto.class).getResultList();

            return listaVwDeonMarcaObjeto;
        } catch (Exception e) {
            throw new BusinessException("012_64: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public int getMarcaCount(VwDeonTipoObjeto vwDeonTipoObjeto, String dsMarca)
            throws BusinessException {

        try {
            return Integer
                    .parseInt(em
                            .createNamedQuery(
                                    "VwDeonMarcaObjeto.findByTipoObjetoCount")
                            .setParameter("idTipoObjeto",
                                    vwDeonTipoObjeto.getIdTipoObjeto())
                            .setParameter("dsMarca", dsMarca).getSingleResult()
                            .toString());
        } catch (NoResultException e) {
            return 0;
        } catch (Exception e) {
            throw new BusinessException("012_65: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopTipoDocumento> getAllTipoDocumento()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoDocumento.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_66: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Método que retorna os documentos com exceção de RG, CPF e CNPJ
     *
     * @return List<BopTipoDocumento>
     * @throws BusinessException
     */
    public List<BopTipoDocumento> getTipoDocumentoExceptCommon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoDocumento.findExceptCommon")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_67: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoDocumento> getTipoDocumentoGroupEspecialPasso1()
            throws BusinessException {
        try {
            return em.createNamedQuery(
                    "BopTipoDocumento.findByGroupEspecialPasso1")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_68: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoDocumento> getTipoDocumentoGroupEspecialPasso3()
            throws BusinessException {
        try {
            return em.createNamedQuery(
                    "BopTipoDocumento.findByGroupEspecialPasso3")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_69: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopBandeiraCartao> getAllBandeiraCartao()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopBandeiraCartao.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_70: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopOperadora> getAllOperadora() throws BusinessException {
        try {
            return em.createNamedQuery("BopOperadora.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_71: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonTipoObjeto> getAllVwDeonTipoObjeto()
            throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonTipoObjeto.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_72: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonTipoObjeto> getTransitoVwDeonTipoObjeto()
            throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonTipoObjeto.findTransito")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_73: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopGrauRelac> getAllGrauRelacionamento()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopGrauRelac.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_74: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadePolicial> getListOfUnidadePolicialBu(
            int unidadePolicialUsuario, int agenciaPolicial)
            throws BusinessException {
        if (unidadePolicialUsuario == 357) {
            try {
                return em
                        .createNamedQuery(BopUnidadePolicial.FIND_UNIDADE_BU)
                        .setParameter("agenciaUsuario", agenciaPolicial)
                        .setParameter("unidadePolicialUsuario",
                                unidadePolicialUsuario).getResultList();
            } catch (Exception e) {
                throw new BusinessException("012_75: "
                        + "Ocorreu um erro inesperado.", e);

            }
        } else {
            try {
                return em.createNamedQuery(BopUnidadePolicial.FIND_UNIDADE_BU)
                        .setParameter("agenciaUsuario", agenciaPolicial)
                        .setParameter("unidadePolicialUsuario", 0)
                        .getResultList();
            } catch (Exception e) {
                throw new BusinessException("012_75: "
                        + "Ocorreu um erro inesperado.", e);

            }
        }

    }

    public BopAgencia getAgencia(long cdAgencia) throws BusinessException {

        if (cdAgencia > 0) {

            BopAgencia bopAgencia;

            try {
                bopAgencia = (BopAgencia) em
                        .createNamedQuery("BopAgencia.findById")
                        .setParameter("pCdAgencia", cdAgencia)
                        .getSingleResult();
            } catch (NoResultException e) {
                bopAgencia = null;
            } catch (Exception e) {
                throw new BusinessException("012_76: "
                        + "Ocorreu um erro inesperado.", e);

            }

            return bopAgencia;
        } else {
            return null;
        }

    }

    public List<BopUnidadePolicial> getUnidadePolicial(BopAgencia bopAgencia,
            boolean adminstradorTransito) throws BusinessException {
        if (bopAgencia == null) {
            return new ArrayList<BopUnidadePolicial>();
        } else {

            StringBuilder sql = new StringBuilder();
            sql.append("SELECT * ");
            sql.append("	FROM BOP_UNIDADE_POLICIAL");
            sql.append("		WHERE CD_AGENCIA = ?");
            sql.append("			AND FL_ATIVO = 'S'");
            sql.append("			AND ID_EMITE_RG <> 'S'");

            if (!adminstradorTransito) {
                sql.append("			AND CD_UNID_POLICIAL NOT IN (357)");
            }

            sql.append("	ORDER BY DS_UNID_POLICIAL");

            try {
                Query query = em.createNativeQuery(sql.toString(),
                        BopUnidadePolicial.class);

                query.setParameter(1, bopAgencia.getCdAgencia());

                List<BopUnidadePolicial> lista = query.getResultList();

                return lista;
            } catch (Exception e) {
                throw new BusinessException("012_77: "
                        + "Ocorreu um erro inesperado.", e);

            }
        }

    }

    public List<BopUnidadePolicial> getUnidadePolicial()
            throws BusinessException {
        try {
            return em.createNamedQuery(BopUnidadePolicial.FIND_ALL)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_78: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadePolicialFake> getBopUnidadePolicialFakeByAgencia(
            long cdAgencia) throws BusinessException {
        try {
            return em.createNamedQuery("BopUnidadePolicialFake.findByAgencia")
                    .setParameter(1, cdAgencia).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_79: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadePolicialFake> getBopUnidadePolicialFakeByAgenciaFiltro(
            int inicio, int fim, String cdUnidPolicial, String dsUnidPolicial,
            Long cdAgencia) throws BusinessException {

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();
        Integer indexParameters = 0;
        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * FROM ( ");
        sbAppend(sb, " 	 SELECT CONSULTA.*, ROWNUM RNUM FROM ( ");
        sbAppend(sb, " 		SELECT ");
        sbAppend(sb, " 		CD_UNID_POLICIAL, ");
        sbAppend(sb, " 		CD_AGENCIA, ");
        sbAppend(sb, " 		DS_UNID_POLICIAL, ");
        sbAppend(sb, " 		COUNT (1) OVER () AS TOTAL ");
        sbAppend(sb, " 			FROM  BOP_UNIDADE_POLICIAL ");
        sbAppend(sb, " 				 WHERE  FL_ATIVO = 'S' ");

        if (!Util.isNullOrEmpty(cdUnidPolicial)) {
            sbAppend(sb, " 		 AND CD_UNID_POLICIAL LIKE ? ");
            parameters.put(++indexParameters, '%' + cdUnidPolicial + '%');
        }

        if (!Util.isNullOrEmpty(dsUnidPolicial)) {
            sbAppend(sb, " 	AND DS_UNID_POLICIAL LIKE ? ");
            parameters.put(++indexParameters, '%' + dsUnidPolicial + '%');

        }

        if (cdAgencia != null) {
            sbAppend(sb, " 	AND CD_AGENCIA = ? ");
            parameters.put(++indexParameters, cdAgencia);

        }

        sbAppend(sb,
                " 		ORDER BY DS_UNID_POLICIAL ) CONSULTA WHERE ROWNUM <= ? ) ");
        sbAppend(sb, " 		WHERE RNUM > ? ");

        parameters.put(++indexParameters, inicio + fim);
        parameters.put(++indexParameters, inicio);

        Query query = em.createNativeQuery(sb.toString(),
                BopUnidadePolicialFake.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {

            query.setParameter(entry.getKey(), entry.getValue());

        }

        try {

            try {
                List<BopUnidadePolicialFake> listBopUnidadePolicialFakes = query
                        .getResultList();
                return listBopUnidadePolicialFakes;
            } catch (Exception e) {
                throw new BusinessException("012_80: "
                        + "Ocorreu um erro inesperado.", e);

            }

        } catch (Exception e) {
            throw new BusinessException("012_80: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    public BopUnidadePolicial getBopUnidadePolicialById(long cdUnidadePolicial)
            throws BusinessException {
        try {
            return (BopUnidadePolicial) em
                    .createNamedQuery(BopUnidadePolicial.FIND_UNIDADE_BY_ID)
                    .setParameter("pCdUnidPolicial", cdUnidadePolicial)
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_81: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopCargo> getListaBopCargoDeon() throws BusinessException {
        try {
            return em.createNamedQuery("BopCargo.findCargosDeon")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_82: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoLocal> getAllTipoLocal() throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoLocal.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_83: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoLocalWeb> getAllTipoLocalWeb() throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoLocalWeb.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_84: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoLocal> getTipoLocaisFurto() throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoLocal.findTipoLocaisFurto")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_85: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwBopCores> getCoresVeiculo() throws BusinessException {
        try {
            return em.createNamedQuery("VwBopCores.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_86: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadeMedida> getAllUnidadeMedida()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopUnidadeMedida.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_87: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopOcorrenciaObjeto mergeObjetoRelacionado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto) throws BusinessException {

        try {
            BopOcorrenciaObjeto retorno = em.merge(bopOcorrenciaObjeto);

            em.flush();

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_88: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopUnidadePolicial> getUnidadePolicialById(long cdAgencia)
            throws BusinessException {
        try {
            return em.createNamedQuery(BopUnidadePolicial.FIND_BY_ID)
                    .setParameter("pCdAgencia", cdAgencia).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_89: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopFuncionario> getAllFuncionario() throws BusinessException {
        try {
            return em.createNamedQuery("BopFuncionario.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_90: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<BopFuncionario> findAllFuncionarioByAgencia(Integer cdAgencia)
            throws BusinessException {
        try {
            return em.createNamedQuery("BopFuncionario.findAllByAgencia")
                    .setParameter("cdAgencia", cdAgencia).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_91: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopFuncionario> getFuncionarioByIdUnidPolicial(
            long cdUnidPolicia) throws BusinessException {
        try {
            return em.createNamedQuery("BopFuncionario.findByidUnidPolicial")
                    .setParameter("pcdUnidPolicial", cdUnidPolicia)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_92: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonTipoArma> getAllTipoArma() throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonTipoArma.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_93: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopCalibreArma> getCalibreArma(
            VwDeonMarcaObjeto vwDeonMarcaObjeto) throws BusinessException {
        if (vwDeonMarcaObjeto == null) {
            return null;
        }
        try {
            return em.createNamedQuery("BopCalibreArma.findByMarca")
                    .setParameter("pCdMarca", vwDeonMarcaObjeto.getIdMarca())
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_94: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopPartesCorpoDeon> getPartesCorpo(int idGrupoCorpo)
            throws BusinessException {
        if (idGrupoCorpo == 0) {
            return null;
        }
        try {
            return em.createNamedQuery("BopPartesCorpoDeon.findByGrupo")
                    .setParameter("pIdGrupoCorpo", idGrupoCorpo)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_95: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopPartesCorpoDeon> getPartesCorpo() throws BusinessException {
        try {
            return em.createNamedQuery("BopPartesCorpoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_96: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoPeculiaridade> getAllTipoPeculiaridade()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoPeculiaridade.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_97: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopEnvolvidosOcorrencia> getEnvolvimentoOcorrencias(
            String nome, String nmMae, Date dtNasc) throws BusinessException {

        // Zerando conector.
        this.connector = null;
        Query query = null;

        StringBuilder str = new StringBuilder();

        str.append(" SELECT BOP_ENVOLVIDOS_OCORRENCIA.* FROM BOP_ENVOLVIDO_OCORRENCIA_DEON JOIN BOP_ENVOLVIDOS_OCORRENCIA  ON ");
        str.append(" (BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO = BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO AND BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP)JOIN BOP_OCORRENCIA ON ");
        str.append(" (BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP) WHERE  BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP IN (?,?) ");
        str.append(" AND EXISTS ( SELECT 1 FROM BOP_OCORRENCIA_AGENCIA BOA JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON (  BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA )");
        str.append("  WHERE BOA.NR_BOP = BOP_OCORRENCIA.NR_BOP ");
        str.append("  AND BOA.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP ");
        str.append("  AND BOAD.FL_SITUACAO_OCORRENCIA IN (?,?,?) ");
        str.append("  )  AND BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL NOT IN (?) AND BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL = ? AND ");
        str.append(" BOP_ENVOLVIDOS_OCORRENCIA.NM_MAE = ? AND BOP_ENVOLVIDOS_OCORRENCIA.DT_NASCIMENTO = ? ");

        query = em.createNativeQuery(str.toString(),
                BopEnvolvidosOcorrencia.class);

        query.setParameter(1, 'S');
        query.setParameter(2, 'D');
        query.setParameter(3, 1);
        query.setParameter(4, 4);
        query.setParameter(5, 10);
        query.setParameter(6, "Z98");

        query.setParameter(7, nome);
        query.setParameter(8, nmMae);
        query.setParameter(9, dtNasc);

        List<BopEnvolvidosOcorrencia> lista;
        try {
            lista = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_98: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return lista;
    }

    @Override
    public byte[] getEnvOcorrFotoFindIdEnvolvido(long idFoto)
            throws BusinessException {

        byte[] bytes;

        try {
            bytes = (byte[]) em
                    .createNativeQuery(
                            "SELECT IM_FOTO FROM BOP_ENV_OCORR_FOTO_DEON WHERE ID_FOTO_ENVOLVIDO = ? ")
                    .setParameter(1, idFoto).getSingleResult();
        } catch (NoResultException e) {
            bytes = null;
        } catch (Exception e) {
            throw new BusinessException("012_99: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bytes;
    }

    @Override
    public byte[] getEnvOcorrFotoThumbnailFindIdEnvolvido(long idFotoThumbnail)
            throws BusinessException {
        byte[] bytes;

        try {
            bytes = (byte[]) em
                    .createNativeQuery(
                            "SELECT IM_THUMBNAIL FROM BOP_ENV_OCORR_FOTO_DEON WHERE ID_FOTO_ENVOLVIDO = ? ")
                    .setParameter(1, idFotoThumbnail).getSingleResult();
        } catch (NoResultException e) {
            bytes = null;
        } catch (Exception e) {
            throw new BusinessException("012_100: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bytes;
    }

    @Override
    public byte[] getPecuEnvolFotoFindIdPecuEnvolFoto(long idFoto)
            throws BusinessException {

        byte[] bytes;

        try {

            bytes = (byte[]) em
                    .createNativeQuery(
                            "SELECT IM_FOTO FROM BOP_PECULI_ENVOL_FOTO_DEON WHERE ID_PECULIARIDADE_ENVOL_FOTO = ? ")
                    .setParameter(1, idFoto).getSingleResult();

        } catch (NoResultException e) {

            bytes = null;

        } catch (Exception e) {
            throw new BusinessException("012_101: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bytes;

    }

    @Override
    public byte[] getPecuEnvolFotoThumbnailFindIdPecuEnvolFoto(
            long idFotoThumbnail) throws BusinessException {
        byte[] bytes;

        try {

            bytes = (byte[]) em
                    .createNativeQuery(
                            "SELECT IM_THUMBNAIL FROM BOP_PECULI_ENVOL_FOTO_DEON WHERE ID_PECULIARIDADE_ENVOL_FOTO = ? ")
                    .setParameter(1, idFotoThumbnail).getSingleResult();

        } catch (NoResultException e) {

            bytes = null;

        } catch (Exception e) {
            throw new BusinessException("012_102: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bytes;

    }

    public BopRg getRg(BigDecimal idRg) throws BusinessException {
        if (idRg == null) {
            return null;
        }

        BopRg pessoa;

        try {

            pessoa = (BopRg) em.createNamedQuery("BopRg.findByRg")
                    .setParameter("pIdRg", idRg).getSingleResult();

        } catch (NoResultException e) {

            pessoa = null;

        } catch (Exception e) {
            throw new BusinessException("012_103: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return pessoa;

    }

    public byte[] getImagemRg(long idRg) throws BusinessException {

        byte[] bytes;

        try {

            bytes = (byte[]) em
                    .createNativeQuery(
                            "SELECT IM_FOTO FROM BOP_IMAGEM_RG WHERE ID_RG = ? ")
                    .setParameter(1, idRg).getSingleResult();

        } catch (NoResultException e) {

            bytes = null;

        } catch (Exception e) {
            throw new BusinessException("012_104: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bytes;
    }

    public byte[] getDocumentoBopAnexoOcorrencia(long idAnexo)
            throws BusinessException {

        byte[] bytes;

        try {

            bytes = (byte[]) em
                    .createNativeQuery(
                            "SELECT DOCUMENTO FROM BOP_ANEXO_OCORRENCIA_DEON WHERE ID_ANEXO = ? ")
                    .setParameter(1, idAnexo).getSingleResult();

        } catch (NoResultException e) {

            bytes = null;

        } catch (Exception e) {
            throw new BusinessException("012_105: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bytes;

    }

    public List<VwPessoa> getPessoaSispes(String nome, String nmMae, Date dtNasc)
            throws BusinessException {

        List<VwPessoa> list = null;
        Query q = em
                .createNativeQuery(
                        "select * from pessoa@sispes "
                        + "  where "
                        + " (NOME_COMPLETO = ?) and "
                        + " ((? is null and NOME_MAE is null) or (NOME_MAE = ?)) and "
                        + " ((? is null and DATA_NASCIMENTO is null) or ( DATA_NASCIMENTO = ? )) ",
                        VwPessoa.class);

        q.setParameter(1, nome).setParameter(2, nmMae).setParameter(3, nmMae)
                .setParameter(4, dtNasc).setParameter(5, dtNasc);

        try {

            list = q.getResultList();

        } catch (Exception e) {
            throw new BusinessException("012_106: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return list;
    }

    @Override
    public BopPlanOperacional getPlanOperacional(BopOcorrencia bopOcorrencia,
            BopUnidadePolicial bopUnidadePolicial) throws BusinessException {

        BopPlanOperacional bopPlanOperacional;

        try {
            bopPlanOperacional = (BopPlanOperacional) em
                    .createNamedQuery(
                            "BopPlanOperacional.findByUsuarioEnderecoFato")
                    .setParameter(
                            "pCdMunicipio",
                            bopOcorrencia.getBopOcorrenciaDeon()
                                    .getBopEnderecoOcorrenciaDeon()
                                    .getBopMunicipio().getId().getCdMunicipio())
                    .setParameter(
                            "pCdBairro",
                            bopOcorrencia.getBopOcorrenciaDeon()
                                    .getBopEnderecoOcorrenciaDeon()
                                    .getBopBairro().getId().getCdBairro())
                    .setParameter(
                            "pCdUf",
                            bopOcorrencia.getBopOcorrenciaDeon()
                                    .getBopEnderecoOcorrenciaDeon()
                                    .getBopUnidadeFederacao().getCdUf())
                    .setParameter("pCdUnidadePolicial",
                            bopUnidadePolicial.getId().getCdUnidPolicial())
                    .setParameter("pCdAgencia",
                            bopUnidadePolicial.getId().getCdAgencia())
                    .getSingleResult();

        } catch (NoResultException e) {
            bopPlanOperacional = null;
        } catch (Exception e) {
            throw new BusinessException("012_107: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopPlanOperacional;
    }

    public boolean existeChamadoOcorrencia(BopOcorrencia bopOcorrencia)
            throws BusinessException {
        try {
            Query query = em
                    .createNativeQuery(
                            "select PA_CHAMADO_OCORRENCIA.EXISTE_CHAMADO(?,?) from dual")
                    .setParameter(1, bopOcorrencia.getId().getNrBop())
                    .setParameter(2, bopOcorrencia.getId().getTipoBop());

            return ((BigDecimal) query.getSingleResult())
                    .compareTo(BigDecimal.ZERO) > 0;
        } catch (NoResultException e) {
            return false;
        } catch (Exception e) {
            throw new BusinessException("012_108: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public void geraChamadoOcorrencia(BopOcorrencia bopOcorrencia,
            Comunicante comunicante) throws BusinessException {

        if ((!comunicante.getDdd().isEmpty())
                && (!comunicante.getTelefone().isEmpty())
                && (!comunicante.getNome().isEmpty())
                && (bopOcorrencia.getBopOcorrenciaDeon()
                        .getBopEnderecoOcorrenciaDeon() != null)) {

            Query query = em
                    .createNativeQuery("BEGIN EBOP.PO_GERA_CHAMADO_OCOR_DEON(?,?,?,?,?,?,?,?,?,?,?,?,?,?); END;");

            query.setParameter(1, bopOcorrencia.getId().getNrBop());
            query.setParameter(2, bopOcorrencia.getId().getTipoBop());
            query.setParameter(3, bopOcorrencia.getBopTipoLocal()
                    .getCdTipoLocal());
            query.setParameter(4, bopOcorrencia.getDsOcorrencia());
            query.setParameter(5, bopOcorrencia.getBopIncidente()
                    .getTpIncidente());
            query.setParameter(6, bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getBopMunicipio()
                    .getNmMunicipio());
            query.setParameter(7, bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getBopBairro()
                    .getNmBairro());
            query.setParameter(8, bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsLogradouro());
            query.setParameter(9, bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getNrNumero());
            query.setParameter(10, bopOcorrencia.getBopOcorrenciaDeon()
                    .getBopEnderecoOcorrenciaDeon().getDsPontoReferencia());
            query.setParameter(11, comunicante.getDdd());
            query.setParameter(12, comunicante.getTelefone());
            query.setParameter(13, comunicante.getNome());
            query.setParameter(14, comunicante.getUsuario());
            try {
                query.executeUpdate();
            } catch (Exception e) {
                throw new BusinessException("012_109: "
                        + "Ocorreu um erro inesperado.", e);

            }

        }
    }

    public void geraEnvolvido(BopOcorrencia bopOcorrencia,
            Comunicante comunicante) throws BusinessException {

        if (comunicante.getBopUf() == null) {
            comunicante.setBopUf(new BopUnidadesFederacao());
        }

        Query query = em
                .createNativeQuery("BEGIN PO_GERA_ENVOL_OCORRENCIA_DEON(?,?,?,?,?,?,?,?,?,?); END;");

        query.setParameter(1, bopOcorrencia.getId().getNrBop());
        query.setParameter(2, bopOcorrencia.getId().getTipoBop());
        query.setParameter(3, comunicante.getBopTipoEnvolvimento()
                .getCdTipoEnv());
        query.setParameter(4, comunicante.getNome());
        query.setParameter(5, comunicante.getDdd());
        query.setParameter(6, comunicante.getTelefone());
        query.setParameter(7, comunicante.getRg());
        query.setParameter(8, comunicante.getCpf());
        query.setParameter(9, comunicante.getDtNascimento());
        query.setParameter(10, comunicante.getBopUf().getCdUf());
        try {
            query.executeUpdate();
        } catch (Exception e) {
            throw new BusinessException("012_110: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopEnvolvidosOcorrencia> getEnvolvimentoPesquisado(
            EnvolvidoTransient envolvidoTransiente, int inicio, int fim)
            throws BusinessException {

        String bufferQuery = "select bopEnvolvidosOcorrencia from BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia ";
        String bufferQueryEnvolvido = createBufferQueryEnvolvido(
                envolvidoTransiente, bufferQuery);

        Query query = em.createQuery(bufferQueryEnvolvido);
        query = addParameterBufferQueryEnvolvido(query, envolvidoTransiente,
                bufferQueryEnvolvido);

        try {
            return query.setFirstResult(inicio).setMaxResults(fim)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_111: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<EnvolvidoTransient> getListaEnvolvidosOcorrencias(
            EnvolvidoTransient envolvidoTransient, int inicio, int fim)
            throws BusinessException {

        // Zerando conector.
        connector = null;
        String wNome = "";

        if (envolvidoTransient.getNmComplEnvolNorm() != null
                & !envolvidoTransient.getNmComplEnvolNorm().isEmpty()) {

            char cTam, cPosi, cPriNome;

            if (envolvidoTransient.isCheckNmComplEnvol()) {

                cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                // quantidade de partes (após fonetizado) do nome
                // informado
                cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                // exatamente na posição das partes do nome
                // informado
                cPriNome = 'S'; // [S]im -> A primeira parte do nome deve ser
                // extamente igual a primeira parte do nome
                // informado

            } else {

                cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade ou
                // mais de partes do nome informado
                cPosi = 'R'; // [R]elativo -> As partes do nome devem estar na
                // mesma ordem das partes do nome informado
                cPriNome = 'N'; // [N]ão -> Não importa a posição da primeira
                // parte do nome

            }

            // wNome = "INNER JOIN  (SELECT" +
            // " COLUMN_VALUE   FROM TABLE (PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_NOME_FONETIZADO_PK ('"
            // + envolvidoTransient.getNmComplEnvolNorm() + "' ,'" + cTam +
            // "', "
            // + " '" + cPosi + "', " + " '" + cPriNome + "' ))) FONE" +
            // " ON ((BEO.NR_BOP || BEO.TIPO_BOP || BEO.ID_ENVOLVIDO) = FONE.COLUMN_VALUE )";
            wNome = " (BEOD.ID_ENVOLVIDO_DEON) in (SELECT COLUMN_VALUE "
                    + " FROM TABLE (PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_PESSOA_FONETIZADA_DEON ("
                    + " ?, \'" + cTam + "\', " + " \'" + cPosi + "\', " + " \'"
                    + cPriNome + "\', 'O' )))";

        }

        StringBuffer strBufferQuery = new StringBuffer();
        strBufferQuery
                .append("select BEO.ID_ENVOLVIDO, BEO.NR_BOP, BEO.TIPO_BOP, BEO.NM_COMPL_ENVOL, BEO.DT_NASCIMENTO, BEO.ID_SEXO, BEOD.ID_FOTO_ENVOLVIDO_PRINCIPAL, COUNT (1) OVER () AS TOTAL from BOP_ENVOLVIDOS_OCORRENCIA BEO ");

        if (envolvidoTransient.getNmMaeNorm() != null
                || envolvidoTransient.getNmPaiNorm() != null) {

            strBufferQuery
                    .append(" JOIN BOP_ENVOLVIDOS_OCORRENCIA_NORM BEON ON (BEO.ID_ENVOLVIDO = BEON.ID_ENVOLVIDO AND BEO.NR_BOP = BEON.NR_BOP AND BEO.TIPO_BOP = BEON.TIPO_BOP) ");
        }

        strBufferQuery
                .append("JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD ON (BEO.ID_ENVOLVIDO = BEOD.ID_ENVOLVIDO AND BEO.NR_BOP = BEOD.NR_BOP AND BEO.TIPO_BOP = BEOD.TIPO_BOP) ");

        if ((isNotNullOrEmpty(envolvidoTransient.getBopMunicipioOcorrencia()) && isNotNullOrEmpty(envolvidoTransient
                .getBopMunicipioOcorrencia().getNmMunicipio()))
                || (isNotNullOrEmpty(envolvidoTransient
                        .getBopBairroOcorrencia()) && isNotNullOrEmpty(envolvidoTransient
                        .getBopBairroOcorrencia().getNmBairro()))) {
            strBufferQuery
                    .append(" JOIN BOP_OCORRENCIA BO ON ( BEO.NR_BOP = BO.NR_BOP AND BEO.TIPO_BOP = BO.TIPO_BOP) ");
        }

        if ((isNotNullOrEmpty(envolvidoTransient.getBopTipoPeculiaridade()) && isNotNullOrEmpty(envolvidoTransient
                .getBopTipoPeculiaridade().getCdTipoPeculiaridade()))
                || (isNotNullOrEmpty(envolvidoTransient.getBopPartesCorpoDeon()) && isNotNullOrEmpty(envolvidoTransient
                .getBopPartesCorpoDeon().getCdPartes()))
                || (isNotNullOrEmpty(envolvidoTransient
                        .getDescricaoPeculiaridade()))) {

            strBufferQuery
                    .append("LEFT JOIN BOP_PECULIARIDADE_ENVOL_DEON BPED ON ( BEOD.ID_ENVOLVIDO_DEON = BPED.ID_ENVOLVIDO_DEON ) ");
        }

        if (isNotNullOrEmpty(envolvidoTransient.getBopMunicipioOcorrencia())
                && isNotNullOrEmpty(envolvidoTransient
                        .getBopMunicipioOcorrencia().getNmMunicipio())) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopMunicipioOcorrencia().getNmMunicipio(),
                    " BO.DS_CIDADE = ? ");
        }

        if (isNotNullOrEmpty(envolvidoTransient.getBopBairroOcorrencia())
                && isNotNullOrEmpty(envolvidoTransient.getBopBairroOcorrencia()
                        .getNmBairro())) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopBairroOcorrencia().getNmBairro(),
                    " BO.DS_BAIRRO = ? ");
        }

        if ((isNotNullOrEmpty(envolvidoTransient.getBopTipoPeculiaridade()) && isNotNullOrEmpty(envolvidoTransient
                .getBopTipoPeculiaridade().getCdTipoPeculiaridade()))) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopTipoPeculiaridade().getCdTipoPeculiaridade(),
                    " BPED.CD_TIPO_PECULIARIDADE = ? ");
        }

        if ((isNotNullOrEmpty(envolvidoTransient.getBopPartesCorpoDeon()) && isNotNullOrEmpty(envolvidoTransient
                .getBopPartesCorpoDeon().getCdPartes()))) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopPartesCorpoDeon().getCdPartes(),
                    " BPED.CD_PARTES = ? ");
        }

        if ((isNotNullOrEmpty(envolvidoTransient.getDescricaoPeculiaridade()))) {
            appendWhereClause(strBufferQuery,
                    envolvidoTransient.getDescricaoPeculiaridade(),
                    " BPED.DS_DESCRICAO LIKE ? ");
        }

        appendWhereClause(strBufferQuery,
                envolvidoTransient.getNmComplEnvolNorm(), wNome);
        appendWhereClause(strBufferQuery,
                envolvidoTransient.getDsApelidoNorm(),
                " ( DS_APELIDO_NORM LIKE UPPER(?) ) ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getNmMaeNorm(),
                " ( NM_MAE_NORM LIKE UPPER(?) ) ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getNmPaiNorm(),
                " ( NM_PAI_NORM LIKE UPPER(?) ) ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getRg(),
                " ID_DOC_IDENTID = ? ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getCpf(),
                " NR_CPF = ? ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getIdSexo(),
                " ID_SEXO = ? ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getIdadeInicial(),
                " ID_IDADE_APROX >= ? ");
        appendWhereClause(strBufferQuery, envolvidoTransient.getIdadeFinal(),
                " ID_IDADE_APROX <= ? ");

        if (isNotNullOrEmpty(envolvidoTransient.getBopProfissaoOcupacao())
                && isNotNullOrEmpty(envolvidoTransient
                        .getBopProfissaoOcupacao().getCdProfOcup())) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopProfissaoOcupacao().getCdProfOcup(),
                    " CD_PROF_OCUP = ? ");
        }

        if (isNotNullOrEmpty(envolvidoTransient.getBopIncidente())
                && isNotNullOrEmpty(envolvidoTransient.getBopIncidente()
                        .getTpIncidente())) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopIncidente().getTpIncidente(), " TP_INCIDENTE = ? ");
        }

        if (isNotNullOrEmpty(envolvidoTransient.getBopMunicipioEnvolvido())
                && isNotNullOrEmpty(envolvidoTransient
                        .getBopMunicipioEnvolvido().getNmMunicipio())) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopMunicipioEnvolvido().getNmMunicipio(),
                    " BEO.DS_CIDADE = ? ");
        }

        if (isNotNullOrEmpty(envolvidoTransient.getBopBairroEnvolvido())
                && isNotNullOrEmpty(envolvidoTransient.getBopBairroEnvolvido()
                        .getBopMunicipio())) {
            appendWhereClause(strBufferQuery, envolvidoTransient
                    .getBopMunicipioEnvolvido().getNmMunicipio(),
                    " BEO.DS_BAIRRO = ? ");
        }

        if (isNotNullOrEmpty(envolvidoTransient.getBopCutis())
                && isNotNullOrEmpty(envolvidoTransient.getBopCutis()
                        .getCdCutis())) {
            appendWhereClause(strBufferQuery, envolvidoTransient.getBopCutis()
                    .getCdCutis(), " BEO.CD_CUTIS = ? ");
        }

        Query query;
        List<EnvolvidoTransient> listaEnvolvidos;
        try {
            query = em.createNativeQuery(strBufferQuery.toString(),
                    EnvolvidoTransient.class);

            query = addParameterBufferQueryEnvolvidoNativeSQL(query,
                    envolvidoTransient, strBufferQuery.toString());

            listaEnvolvidos = query.setFirstResult(inicio).setMaxResults(fim)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_112: "
                    + "Ocorreu um erro inesperado.", e);

        }

        if (listaEnvolvidos != null) {

            query = em.createNamedQuery("BopEnvOcorrFotoDeon.findByEnvolvido");

            for (EnvolvidoTransient envolvido : listaEnvolvidos) {

                query.setParameter(1, envolvido.getId().getIdEnvolvido())
                        .setParameter(2, envolvido.getId().getNrBop())
                        .setParameter(3, envolvido.getId().getTipoBop());

                List<BopEnvOcorrFotoDeon> listaFoto = query.getResultList();

                envolvido.setListaBopEnvOcorrFotoDeon(listaFoto);

                if (listaFoto != null && envolvido.getIdFotoPrincipal() != null) {

                    for (BopEnvOcorrFotoDeon bopEnvOcorrFotoDeon : listaFoto) {

                        if (bopEnvOcorrFotoDeon.getId().getIdFotoEnvolvido() == envolvido
                                .getIdFotoPrincipal()) {

                            envolvido
                                    .setBopEnvOcorrFotoDeon(bopEnvOcorrFotoDeon);

                            break;

                        }

                    }

                }

            }

        }

        return listaEnvolvidos;

    }

    public long getEnvolvimentoPesquisadoCount(
            EnvolvidoTransient envolvidoTransiente) throws BusinessException {

        Long count;

        try {
            String bufferQuery = "select count(bopEnvolvidosOcorrencia) from BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia ";

            String bufferQueryEnvolvido = createBufferQueryEnvolvido(
                    envolvidoTransiente, bufferQuery);

            Query query = em.createQuery(bufferQueryEnvolvido);
            query = addParameterBufferQueryEnvolvido(query,
                    envolvidoTransiente, bufferQueryEnvolvido);

            count = (Long) query.getSingleResult();
        } catch (NoResultException e) {
            count = null;
        } catch (Exception e) {
            throw new BusinessException("012_113: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return count;
    }

    public long getEnvolvimentoPesquisadoCountComTranslate(
            EnvolvidoTransient envolvidoTransiente) throws BusinessException {

        // Zerando conector.
        connector = null;

        Long count;

        String wNome = "";

        if (envolvidoTransiente.getNmComplEnvolNorm() != null
                & !envolvidoTransiente.getNmComplEnvolNorm().isEmpty()) {

            char cTam, cPosi, cPriNome;

            if (envolvidoTransiente.isCheckNmComplEnvol()) {

                cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                // quantidade de partes (após fonetizado) do nome
                // informado
                cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                // exatamente na posição das partes do nome
                // informado
                cPriNome = 'S'; // [S]im -> A primeira parte do nome deve ser
                // extamente igual a primeira parte do nome
                // informado

            } else {

                cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade ou
                // mais de partes do nome informado
                cPosi = 'R'; // [R]elativo -> As partes do nome devem estar na
                // mesma ordem das partes do nome informado
                cPriNome = 'N'; // [N]ão -> Não importa a posição da primeira
                // parte do nome

            }

            wNome = " (BEOD.ID_ENVOLVIDO_DEON) in (SELECT COLUMN_VALUE "
                    + " FROM TABLE (PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_PESSOA_FONETIZADA_DEON ("
                    + " ?, '" + cTam + "', " + " '" + cPosi + "', " + " '"
                    + cPriNome + "', 'O' )))";
        }

        try {

            StringBuffer strBufferQuery = new StringBuffer();
            strBufferQuery
                    .append("select COUNT(1) from BOP_ENVOLVIDOS_OCORRENCIA BEO ");

            if (envolvidoTransiente.getNmMaeNorm() != null
                    || envolvidoTransiente.getNmPaiNorm() != null) {

                strBufferQuery
                        .append(" join BOP_ENVOLVIDOS_OCORRENCIA_NORM BEON ON (BEO.ID_ENVOLVIDO = BEON.ID_ENVOLVIDO AND BEO.NR_BOP = BEON.NR_BOP AND BEO.TIPO_BOP = BEON.TIPO_BOP ) ");
            }

            strBufferQuery
                    .append("LEFT OUTER JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD ON (BEO.ID_ENVOLVIDO = BEOD.ID_ENVOLVIDO AND BEO.NR_BOP = BEOD.NR_BOP AND BEO.TIPO_BOP = BEOD.TIPO_BOP) ");

            if ((isNotNullOrEmpty(envolvidoTransiente
                    .getBopMunicipioOcorrencia()) && isNotNullOrEmpty(envolvidoTransiente
                            .getBopMunicipioOcorrencia().getNmMunicipio()))
                    || (isNotNullOrEmpty(envolvidoTransiente
                            .getBopBairroOcorrencia()) && isNotNullOrEmpty(envolvidoTransiente
                            .getBopBairroOcorrencia().getNmBairro()))) {
                strBufferQuery
                        .append("LEFT JOIN BOP_OCORRENCIA BO ON ( BEO.NR_BOP = BO.NR_BOP AND BEO.TIPO_BOP = BO.TIPO_BOP) ");
            }

            if (isNotNullOrEmpty(envolvidoTransiente
                    .getBopMunicipioOcorrencia())
                    && isNotNullOrEmpty(envolvidoTransiente
                            .getBopMunicipioOcorrencia().getNmMunicipio())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopMunicipioOcorrencia().getNmMunicipio(),
                        " BO.DS_CIDADE = ? ");
            }

            if (isNotNullOrEmpty(envolvidoTransiente.getBopBairroOcorrencia())
                    && isNotNullOrEmpty(envolvidoTransiente
                            .getBopBairroOcorrencia().getNmBairro())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopBairroOcorrencia().getNmBairro(),
                        " BO.DS_BAIRRO = ? ");
            }

            if ((isNotNullOrEmpty(envolvidoTransiente.getBopTipoPeculiaridade()) && isNotNullOrEmpty(envolvidoTransiente
                    .getBopTipoPeculiaridade().getCdTipoPeculiaridade()))
                    || (isNotNullOrEmpty(envolvidoTransiente
                            .getBopPartesCorpoDeon()) && isNotNullOrEmpty(envolvidoTransiente
                            .getBopPartesCorpoDeon().getCdPartes()))
                    || (isNotNullOrEmpty(envolvidoTransiente
                            .getDescricaoPeculiaridade()))) {

                strBufferQuery
                        .append("LEFT JOIN BOP_PECULIARIDADE_ENVOL_DEON BPED ON ( BEOD.ID_ENVOLVIDO_DEON = BPED.ID_ENVOLVIDO_DEON ) ");
            }

            if ((isNotNullOrEmpty(envolvidoTransiente.getBopTipoPeculiaridade()) && isNotNullOrEmpty(envolvidoTransiente
                    .getBopTipoPeculiaridade().getCdTipoPeculiaridade()))) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopTipoPeculiaridade().getCdTipoPeculiaridade(),
                        " BPED.CD_TIPO_PECULIARIDADE = ? ");
            }

            if ((isNotNullOrEmpty(envolvidoTransiente.getBopPartesCorpoDeon()) && isNotNullOrEmpty(envolvidoTransiente
                    .getBopPartesCorpoDeon().getCdPartes()))) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopPartesCorpoDeon().getCdPartes(),
                        " BPED.CD_PARTES = ? ");
            }

            if ((isNotNullOrEmpty(envolvidoTransiente
                    .getDescricaoPeculiaridade()))) {
                appendWhereClause(strBufferQuery,
                        envolvidoTransiente.getDescricaoPeculiaridade(),
                        " BPED.DS_DESCRICAO LIKE ? ");
            }

            appendWhereClause(strBufferQuery,
                    envolvidoTransiente.getNmComplEnvolNorm(), wNome);
            appendWhereClause(strBufferQuery,
                    envolvidoTransiente.getDsApelidoNorm(),
                    " ( UPPER(DS_APELIDO_NORM) LIKE UPPER(?) ) ");
            appendWhereClause(strBufferQuery,
                    envolvidoTransiente.getNmMaeNorm(),
                    " ( UPPER(NM_MAE_NORM) LIKE UPPER(?) ) ");
            appendWhereClause(strBufferQuery,
                    envolvidoTransiente.getNmPaiNorm(),
                    " ( UPPER(NM_PAI_NORM) LIKE UPPER(?) ) ");
            appendWhereClause(strBufferQuery, envolvidoTransiente.getRg(),
                    " ID_DOC_IDENTID = ? ");
            appendWhereClause(strBufferQuery, envolvidoTransiente.getCpf(),
                    " NR_CPF = ? ");
            appendWhereClause(strBufferQuery, envolvidoTransiente.getIdSexo(),
                    " ID_SEXO = ? ");
            appendWhereClause(strBufferQuery,
                    envolvidoTransiente.getIdadeInicial(),
                    " ID_IDADE_APROX >= ? ");
            appendWhereClause(strBufferQuery,
                    envolvidoTransiente.getIdadeFinal(),
                    " ID_IDADE_APROX <= ? ");

            if (isNotNullOrEmpty(envolvidoTransiente.getBopProfissaoOcupacao())
                    && isNotNullOrEmpty(envolvidoTransiente
                            .getBopProfissaoOcupacao().getCdProfOcup())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopProfissaoOcupacao().getCdProfOcup(),
                        " CD_PROF_OCUP = ? ");
            }

            if (isNotNullOrEmpty(envolvidoTransiente.getBopIncidente())
                    && isNotNullOrEmpty(envolvidoTransiente.getBopIncidente()
                            .getTpIncidente())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopIncidente().getTpIncidente(),
                        " TP_INCIDENTE = ? ");
            }

            if (isNotNullOrEmpty(envolvidoTransiente.getBopMunicipioEnvolvido())
                    && isNotNullOrEmpty(envolvidoTransiente
                            .getBopMunicipioEnvolvido().getNmMunicipio())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopMunicipioEnvolvido().getNmMunicipio(),
                        " BEO.DS_CIDADE = ? ");
            }

            if (isNotNullOrEmpty(envolvidoTransiente.getBopBairroEnvolvido())
                    && isNotNullOrEmpty(envolvidoTransiente
                            .getBopBairroEnvolvido().getBopMunicipio())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopMunicipioEnvolvido().getNmMunicipio(),
                        " BEO.DS_BAIRRO = ? ");
            }

            if (isNotNullOrEmpty(envolvidoTransiente.getBopCutis())
                    && isNotNullOrEmpty(envolvidoTransiente.getBopCutis()
                            .getCdCutis())) {
                appendWhereClause(strBufferQuery, envolvidoTransiente
                        .getBopCutis().getCdCutis(), " BEO.CD_CUTIS = ? ");
            }

            Query query = em.createNativeQuery(strBufferQuery.toString());
            query = addParameterBufferQueryEnvolvidoNativeSQL(query,
                    envolvidoTransiente, strBufferQuery.toString());

            count = Long.parseLong(query.getSingleResult().toString());

        } catch (NoResultException e) {

            count = null;

        } catch (Exception e) {
            throw new BusinessException("012_114: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return count;
    }

    public List<BopProfissaoOcupacao> getOcupacaoPesquisado(int inicio,
            int fim, String cdProfOcup, String dsProfOcup)
            throws BusinessException {
        Query query = null;
        int parametros = 1;
        String consulta = "select * from (select a.*, ROWNUM rnum from BOP_PROFISSAO_OCUPACAO  a where a.CD_PROF_OCUP_CBO like ? and "
                + "translate( a.DS_PROF_OCUP, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                + "like translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') and "
                + "a.CD_PROF_OCUP_CBO IS NOT NULL and ROWNUM <= ?)  where rnum  > ?";
        query = em.createNativeQuery(consulta, BopProfissaoOcupacao.class);

        query.setParameter(parametros++,
                this.montarLike(cdProfOcup == null ? "" : cdProfOcup));
        query.setParameter(parametros++,
                this.montarLike(dsProfOcup == null ? "" : dsProfOcup));
        query.setParameter(parametros++, inicio + fim);
        query.setParameter(parametros, inicio);

        List<BopProfissaoOcupacao> listBopProfissaoOcupacao;
        try {
            listBopProfissaoOcupacao = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_115: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listBopProfissaoOcupacao;

    }

    public long getOcupacaoPesquisadoCount(String cdProfOcup, String dsProfOcup)
            throws BusinessException {
        Long count;
        Query query = null;
        int parametros = 1;

        try {
            String consulta = "select COUNT(*) from BOP_PROFISSAO_OCUPACAO  a where a.CD_PROF_OCUP_CBO like ? and "
                    + "translate( a.DS_PROF_OCUP, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                    + "like translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') and a.CD_PROF_OCUP_CBO IS NOT NULL ";
            query = em.createNativeQuery(consulta);

            query.setParameter(parametros++,
                    this.montarLike(cdProfOcup == null ? "" : cdProfOcup));
            query.setParameter(parametros++,
                    this.montarLike(dsProfOcup == null ? "" : dsProfOcup));
            count = Long.parseLong(query.getSingleResult().toString());
        } catch (NoResultException e) {
            count = null;
        } catch (Exception e) {
            throw new BusinessException("012_116: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return count;
    }

    public String createBufferQueryEnvolvido(
            EnvolvidoTransient envolvidoTransiente, String query)
            throws BusinessException {

        // Zerando conector.
        connector = null;

        StringBuffer strBufferQuery = new StringBuffer(query);

        appendWhereClause(strBufferQuery,
                envolvidoTransiente.getNmComplEnvol(),
                "bopEnvolvidosOcorrencia.nmComplEnvol like :pNmComplEnvol");
        appendWhereClause(strBufferQuery, envolvidoTransiente.getDsApelido(),
                "bopEnvolvidosOcorrencia.dsApelido like :pDsApelido");
        appendWhereClause(strBufferQuery, envolvidoTransiente.getNmMae(),
                "bopEnvolvidosOcorrencia.nmMae like :pNmMae");
        appendWhereClause(strBufferQuery, envolvidoTransiente.getNmPai(),
                "bopEnvolvidosOcorrencia.nmPai like :pNmPai");
        appendWhereClause(strBufferQuery, envolvidoTransiente.getRg(),
                "bopEnvolvidosOcorrencia.idDocIdentid = :pRg");
        appendWhereClause(strBufferQuery, envolvidoTransiente.getCpf(),
                "bopEnvolvidosOcorrencia.nrCpf = :pCPF");

        try {
            return strBufferQuery.toString();
        } catch (Exception e) {
            throw new BusinessException("012_117: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public Query addParameterBufferQueryEnvolvido(Query query,
            EnvolvidoTransient envolvidoTransiente, String strBufferQuery)
            throws BusinessException {

        if (strBufferQuery.indexOf("pNmComplEnvol") > 0) {
            query.setParameter(
                    "pNmComplEnvol",
                    montarLike(envolvidoTransiente.isCheckNmComplEnvol(),
                            envolvidoTransiente.getNmComplEnvol()));
        }

        if (strBufferQuery.indexOf("pDsApelido") > 0) {
            query.setParameter(
                    "pDsApelido",
                    montarLike(envolvidoTransiente.isCheckDsApelido(),
                            envolvidoTransiente.getDsApelido()));
        }

        if (strBufferQuery.indexOf("pNmMae") > 0) {
            query.setParameter(
                    "pNmMae",
                    montarLike(envolvidoTransiente.isCheckNmMae(),
                            envolvidoTransiente.getNmMae()));
        }

        if (strBufferQuery.indexOf("pNmPai") > 0) {
            query.setParameter(
                    "pNmPai",
                    montarLike(envolvidoTransiente.isCheckNmPai(),
                            envolvidoTransiente.getNmPai()));
        }

        if (strBufferQuery.indexOf("pRg") > 0) {
            query.setParameter("pRg", envolvidoTransiente.getRg());
        }

        if (strBufferQuery.indexOf("pCPF") > 0) {
            query.setParameter("pCPF", new BigDecimal(envolvidoTransiente
                    .getCpf().trim()));
        }

        return query;
    }

    public Query addParameterBufferQueryEnvolvidoNativeSQL(Query query,
            EnvolvidoTransient envolvidoTransiente, String strBufferQuery)
            throws BusinessException {

        int parametros = 1;

        if (isNotNullOrEmpty(envolvidoTransiente.getBopMunicipioOcorrencia())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopMunicipioOcorrencia().getNmMunicipio())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopMunicipioOcorrencia().getNmMunicipio());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopBairroOcorrencia())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopBairroOcorrencia().getNmBairro())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopBairroOcorrencia().getNmBairro());
        }

        if ((isNotNullOrEmpty(envolvidoTransiente.getBopTipoPeculiaridade()) && isNotNullOrEmpty(envolvidoTransiente
                .getBopTipoPeculiaridade().getCdTipoPeculiaridade()))) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopTipoPeculiaridade().getCdTipoPeculiaridade());
        }

        if ((isNotNullOrEmpty(envolvidoTransiente.getBopPartesCorpoDeon()) && isNotNullOrEmpty(envolvidoTransiente
                .getBopPartesCorpoDeon().getCdPartes()))) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopPartesCorpoDeon().getCdPartes());
        }

        if ((isNotNullOrEmpty(envolvidoTransiente.getDescricaoPeculiaridade()))) {
            query.setParameter(parametros++,
                    montarLike(envolvidoTransiente.getDescricaoPeculiaridade()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getNmComplEnvolNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckNmComplEnvol(),
                            envolvidoTransiente.getNmComplEnvolNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getDsApelidoNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckDsApelido(),
                            envolvidoTransiente.getDsApelidoNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getNmMaeNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckNmMae(),
                            envolvidoTransiente.getNmMaeNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getNmPaiNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckNmPai(),
                            envolvidoTransiente.getNmPaiNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getRg())) {
            query.setParameter(parametros++, envolvidoTransiente.getRg());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getCpf())) {
            query.setParameter(parametros++, new BigDecimal(envolvidoTransiente
                    .getCpf().trim()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getIdSexo())) {
            query.setParameter(parametros++, envolvidoTransiente.getIdSexo()
                    .substring(0, 1));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getIdadeInicial())) {
            query.setParameter(parametros++,
                    new BigDecimal(envolvidoTransiente.getIdadeInicial()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getIdadeFinal())) {
            query.setParameter(parametros++,
                    new BigDecimal(envolvidoTransiente.getIdadeFinal()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopProfissaoOcupacao())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopProfissaoOcupacao().getCdProfOcup())) {
            query.setParameter(parametros++, new BigDecimal(envolvidoTransiente
                    .getBopProfissaoOcupacao().getCdProfOcup()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopIncidente())
                && isNotNullOrEmpty(envolvidoTransiente.getBopIncidente()
                        .getTpIncidente())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopIncidente().getTpIncidente());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopMunicipioEnvolvido())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopMunicipioEnvolvido().getNmMunicipio())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopMunicipioEnvolvido().getNmMunicipio());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopBairroEnvolvido())
                && isNotNullOrEmpty(envolvidoTransiente.getBopBairroEnvolvido()
                        .getNmBairro())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopBairroEnvolvido().getNmBairro());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopCutis())
                && isNotNullOrEmpty(envolvidoTransiente.getBopCutis()
                        .getCdCutis())) {
            query.setParameter(parametros++, envolvidoTransiente.getBopCutis()
                    .getCdCutis());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopBairroOcorrencia())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopBairroOcorrencia().getNmBairro())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopBairroOcorrencia().getNmBairro());
        }

        if ((isNotNullOrEmpty(envolvidoTransiente.getBopTipoPeculiaridade()) && isNotNullOrEmpty(envolvidoTransiente
                .getBopTipoPeculiaridade().getCdTipoPeculiaridade()))) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopTipoPeculiaridade().getCdTipoPeculiaridade());
        }

        if ((isNotNullOrEmpty(envolvidoTransiente.getBopPartesCorpoDeon()) && isNotNullOrEmpty(envolvidoTransiente
                .getBopPartesCorpoDeon().getCdPartes()))) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopPartesCorpoDeon().getCdPartes());
        }

        if ((isNotNullOrEmpty(envolvidoTransiente.getDescricaoPeculiaridade()))) {
            query.setParameter(parametros++,
                    montarLike(envolvidoTransiente.getDescricaoPeculiaridade()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getNmComplEnvolNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckNmComplEnvol(),
                            envolvidoTransiente.getNmComplEnvolNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getDsApelidoNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckDsApelido(),
                            envolvidoTransiente.getDsApelidoNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getNmMaeNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckNmMae(),
                            envolvidoTransiente.getNmMaeNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getNmPaiNorm())) {
            query.setParameter(
                    parametros++,
                    montarLike(envolvidoTransiente.isCheckNmPai(),
                            envolvidoTransiente.getNmPaiNorm()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getRg())) {
            query.setParameter(parametros++, envolvidoTransiente.getRg());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getCpf())) {
            query.setParameter(parametros++, new BigDecimal(envolvidoTransiente
                    .getCpf().trim()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getIdSexo())) {
            query.setParameter(parametros++, envolvidoTransiente.getIdSexo()
                    .substring(0, 1));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getIdadeInicial())) {
            query.setParameter(parametros++,
                    new BigDecimal(envolvidoTransiente.getIdadeInicial()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getIdadeFinal())) {
            query.setParameter(parametros++,
                    new BigDecimal(envolvidoTransiente.getIdadeFinal()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopProfissaoOcupacao())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopProfissaoOcupacao().getCdProfOcup())) {
            query.setParameter(parametros++, new BigDecimal(envolvidoTransiente
                    .getBopProfissaoOcupacao().getCdProfOcup()));
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopIncidente())
                && isNotNullOrEmpty(envolvidoTransiente.getBopIncidente()
                        .getTpIncidente())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopIncidente().getTpIncidente());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopMunicipioEnvolvido())
                && isNotNullOrEmpty(envolvidoTransiente
                        .getBopMunicipioEnvolvido().getNmMunicipio())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopMunicipioEnvolvido().getNmMunicipio());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopBairroEnvolvido())
                && isNotNullOrEmpty(envolvidoTransiente.getBopBairroEnvolvido()
                        .getNmBairro())) {
            query.setParameter(parametros++, envolvidoTransiente
                    .getBopBairroEnvolvido().getNmBairro());
        }

        if (isNotNullOrEmpty(envolvidoTransiente.getBopCutis())
                && isNotNullOrEmpty(envolvidoTransiente.getBopCutis()
                        .getCdCutis())) {
            query.setParameter(parametros++, envolvidoTransiente.getBopCutis()
                    .getCdCutis());
        }

        return query;
    }

    public String montarLike(Boolean flag, String valor)
            throws BusinessException {

        try {
            if (flag) {
                return "%" + valor + "%";
            }

            return valor;
        } catch (Exception e) {
            throw new BusinessException("012_118: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public String montarLike(String valor) throws BusinessException {
        try {
            return montarLike(true, valor);
        } catch (Exception e) {
            throw new BusinessException("012_119: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarios> getUsuarioAll() throws BusinessException {
        try {
            return em.createNamedQuery(BopUsuarios.FIND_ALL).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_120: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopUsuarios mergeBopUsuario(BopUsuarios bopUsuarios)
            throws BusinessException {
        try {
            return em.merge(bopUsuarios);
        } catch (Exception e) {
            throw new BusinessException("012_121: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadePolicial> getListaUnidadePolicialCivil()
            throws BusinessException {
        try {
            return em.createNamedQuery(
                    BopUnidadePolicial.FIND_UNIDADES_POLICIA_CIVIL)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_122: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadePolicial> getListaUnidadePolicialCivilByDsUnidPolicial(
            String dsUnidPolicial) throws BusinessException {
        try {
            return em
                    .createNamedQuery(
                            BopUnidadePolicial.FIND_UNIDADES_POLICIA_CIVIL_BY_DS_UNID_POLICIAL)
                    .setParameter("dsUnidPolicial", "%" + dsUnidPolicial + "%")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_123: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUnidadePolicial> getListaUnidadePolicialByUsuario(
            long cdUsuario) throws BusinessException {
        try {
            return em
                    .createNamedQuery("BopUnidadePolicial.findUnidadeByUsuario")
                    .setParameter("cdUsuario", cdUsuario).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_124: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarioUnidadeDeon> getListaUsuarioUnidadeDeon(long cdUsuario)
            throws BusinessException {
        try {
            return em.createNamedQuery("findUsuarioUnidadeByUsuario")
                    .setParameter("cdUsuario", cdUsuario).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_125: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarioUnidadeDeon> removeBopUsuarioUnidadeDeon(
            BopUsuarioUnidadeDeon bopUsuarioUnidadeDeon)
            throws BusinessException {

        long cdUsuario = bopUsuarioUnidadeDeon.getBopUsuario().getCdUsuario();

        try {
            BopUsuarioUnidadeDeon usuarioUnidade = em
                    .merge(bopUsuarioUnidadeDeon);
            em.remove(usuarioUnidade);
        } catch (Exception e) {
            throw new BusinessException("012_126: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return this.getListaUsuarioUnidadeDeon(cdUsuario);
    }

    public List<BopUnidadePolicial> getAllListaUnidadePolicail()
            throws BusinessException {
        try {
            return em.createNamedQuery(BopUnidadePolicial.FIND_ALL)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_127: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopOcorrenciaAgencia> getListaOcorrenciaAgenciaByUnidadePolicial(
            BopUnidadePolicial bopUnidadePolicial) throws BusinessException {

        List<BopOcorrenciaAgencia> listBopOcorrenciaAgencia;
        try {
            listBopOcorrenciaAgencia = (List<BopOcorrenciaAgencia>) em
                    .createNamedQuery(
                            "BopOcorrenciaAgencia.findMapaOcorrenciasByUnidadePolicial")
                    .setMaxResults(20)
                    .setParameter("bopUnidade", bopUnidadePolicial)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_128: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listBopOcorrenciaAgencia;

    }

    public List<BopTipoProvidenciaDeon> getAllBopTipoProvidencia()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoProvidenciaDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_129: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoExameDeon> getAllBopTipoExameDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoExameDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_130: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopEnderecoEnvolvido> getBopEnderecosEnvolvidoByEnvolvidoDeon(
            BopEnvolvidoOcorrenciaDeon envolvidoDeon) throws BusinessException {
        try {
            return em
                    .createNamedQuery("BopEnderecoEnvolvido.findEnvolvidoDeon")
                    .setParameter("envolvidoDeon", envolvidoDeon)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_131: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public BopEnderecoEnvolvido salvaEnderecoEnvolvido(
            BopEnderecoEnvolvido enderecoEnvolvido) throws BusinessException {
        try {
            BopEnderecoEnvolvido bopEnderecoEnvolvido = em
                    .merge(enderecoEnvolvido);
            em.flush();
            em.refresh(bopEnderecoEnvolvido);

            return bopEnderecoEnvolvido;
        } catch (Exception e) {
            throw new BusinessException("012_132: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopOcorrencia> getOcorrenciaEnvolvido(String nmEnvolvido)
            throws BusinessException {
        try {
            return em
                    .createNamedQuery("BopOcorrencia.findOcorrenciaEnvolvidos")
                    .setParameter("nmEnvolvido", nmEnvolvido).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_133: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopOrientacaoSexual> getAllBopOrientacaoSexual()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopOrientacaoSexual.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_134: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopChamadoOcorrencia getBopChamadoOcorrenciaByNrChamado(
            long nrChamado) throws BusinessException {

        BopOcorrencia bopOcorrencia;
        BopChamadoOcorrencia bopChamadoOcorrencia;

        try {

            TypedQuery<BopChamadoOcorrencia> query = em.createNamedQuery(
                    "BopChamadoOcorrencia.findByNrChamado",
                    BopChamadoOcorrencia.class);

            query.setParameter("pNrChamado", nrChamado);

            bopChamadoOcorrencia = (BopChamadoOcorrencia) query
                    .getSingleResult();

            if (bopChamadoOcorrencia != null) {

                bopOcorrencia = bopChamadoOcorrencia.getBopOcorrencia();

                em.refresh(bopOcorrencia);

            }

        } catch (NoResultException e) {

            bopChamadoOcorrencia = null;

        } catch (Exception e) {
            throw new BusinessException("012_135: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopChamadoOcorrencia;
    }

    public BopChamadoOcorrencia getBopChamadoOcorrenciaByNrBopTipoBop(
            long nrBop, String tipoBop) throws BusinessException {

        BopChamadoOcorrencia bopChamadoOcorrencia;

        try {

            bopChamadoOcorrencia = (BopChamadoOcorrencia) em
                    .createNamedQuery("BopChamadoOcorrencia.findByNrBopTipoBop")
                    .setParameter("pnrBop", nrBop)
                    .setParameter("ptipoBop", tipoBop).setMaxResults(1)
                    .getSingleResult();

        } catch (NoResultException e) {

            bopChamadoOcorrencia = null;

        } catch (Exception e) {
            throw new BusinessException("012_136: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopChamadoOcorrencia;
    }

    public BopChamado getBopOcorrenciaByNrBop(long nrBop)
            throws BusinessException {
        BopChamado bopChamado;
        try {
            bopChamado = (BopChamado) em
                    .createNamedQuery("BopChamado.findByNrBop")
                    .setParameter("pNrBop", nrBop).setMaxResults(1)
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            bopChamado = null;
            throw new BusinessException("012_137: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopChamado;
    }

    public BopEnvolvidosOcorrencia getEnvolvidoOcorrenciaByRg(String nmRg,
            String cdUfRg) throws BusinessException {

        // em.getEntityManagerFactory().getCache().evictAll();
        Query query = em
                .createNamedQuery("BopEnvolvidosOcorrencia.findEnvolvimentoForRg");

        query.setParameter("nmRg", nmRg);
        query.setParameter("cdUfRg", cdUfRg.toUpperCase());

        query.setHint("cache.usage", "DoNotCheckCache");

        try {
            List<BopEnvolvidosOcorrencia> bopEnvolvidosOcorrencia = query
                    .getResultList();

            return bopEnvolvidosOcorrencia.isEmpty() ? null
                    : bopEnvolvidosOcorrencia.get(0);
        } catch (Exception e) {
            throw new BusinessException("012_138: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopEnvolvidosOcorrencia getEnvolvidoOcorrenciaByIdEnvolvido(
            long idEnvolvido, int nrBop, String tipoBop)
            throws BusinessException {

        try {
            List<BopEnvolvidosOcorrencia> bopEnvolvidosOcorrencia = em
                    .createNamedQuery(
                            "BopEnvolvidosOcorrencia.findEnvolvimentoForIdEnvolvido")
                    .setParameter("idEnvolvido", idEnvolvido)
                    .setParameter("nrBop", nrBop)
                    .setParameter("tipoBop", tipoBop).getResultList();

            return bopEnvolvidosOcorrencia.isEmpty() ? null
                    : bopEnvolvidosOcorrencia.get(0);
        } catch (Exception e) {
            throw new BusinessException("012_139: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopBairro getBairroByNmMunicipio(String nmUF, String nmMunicipio,
            String nmBairro) throws BusinessException {

        if (nmBairro == null || nmMunicipio == null) {
            return null;
        }

        BopBairro bairro;

        try {

            bairro = (BopBairro) em
                    .createNamedQuery(BopBairro.FIND_BY_NM_MUNICIPIO)
                    .setParameter("nmUF", nmUF)
                    .setParameter("nmMunicipio", nmMunicipio)
                    .setParameter("nmBairro", nmBairro).getSingleResult();

        } catch (NoResultException e) {

            bairro = null;

        } catch (NonUniqueResultException e) {

            bairro = null;

        } catch (Exception e) {
            throw new BusinessException("012_140: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bairro;

    }

    public List<BopIncidente> getListBopIncidenteByUnidadePolicialCivil()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopIncidente.findByUnidadeCivil")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_141: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopAgencia> getListAgenciasPoliciais() throws BusinessException {
        try {
            return em.createNamedQuery("BopAgencia.findAgenciasPoliciais")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_142: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopAgencia> getListAgenciaLocalTrabalho()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopAgencia.findAgenciasLocalTrabalho")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_143: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopFuncionario getFuncionarioByIdRegistro(long idRegistro,
            long cdAgencia) throws BusinessException {

        BopFuncionario funcionario;

        try {

            funcionario = (BopFuncionario) em
                    .createNamedQuery(
                            "BopFuncionario.findFuncionarioByIdRegistro")
                    .setParameter("idRegistro", idRegistro)
                    .setParameter("cdAgencia", cdAgencia).getSingleResult();

        } catch (NoResultException e) {
            funcionario = null;
        } catch (Exception e) {
            throw new BusinessException("012_144: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return funcionario;
    }

    public BopFuncionario getFuncionarioRgMilitar(
            BopFuncionario bopFuncionario, BopAgencia bopAgencia)
            throws BusinessException {

        BopFuncionario funcionario;

        try {
            funcionario = (BopFuncionario) em
                    .createNamedQuery("BopFuncionario.findRgMilitar")
                    .setParameter("rgMilitar", bopFuncionario.getCdIdentidade())
                    .setParameter("cdAgencia", bopAgencia.getCdAgencia())
                    .getSingleResult();
        } catch (NoResultException e) {
            funcionario = null;
        } catch (Exception e) {
            throw new BusinessException("012_145: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return funcionario;
    }

    public BopUsuarios getBopUsuarioByNomeAbrev(String nmAbrevUsuario)
            throws BusinessException {

        BopUsuarios bopUsuarios;

        try {

            bopUsuarios = (BopUsuarios) em
                    .createNamedQuery(BopUsuarios.FIND_BY_NOME_ABREV)
                    .setParameter("nmAbrevUsuario", nmAbrevUsuario)
                    .getSingleResult();

        } catch (NoResultException e) {
            bopUsuarios = null;
        } catch (Exception e) {
            throw new BusinessException("012_146: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopUsuarios;

    }

    public List<BopTipoMunicaoDeon> getAllBopTipoMunicaoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoMunicaoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_147: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopMarcaMunicaoDeon> getAllBopMarcaMunicaoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopMarcaMunicaoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_148: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopCalibreArma> getAllBopCalibreArma() throws BusinessException {
        try {
            return em.createNamedQuery("BopCalibreArma.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_149: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopCoronhaArmaDeon> getAllBopCoronhaArmaDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopCoronhaArmaDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_150: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopConservacaoArmaDeon> getAllBopConservacaoArmaDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopConservacaoArmaDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_151: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoAcessorioArmaDeon> getAllBopTipoAcessorioArmaDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoAcessorioArmaDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_152: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopUnidadePolicial mergeBopUnidadePolicial(
            BopUnidadePolicial bopUnidadePolicial) throws BusinessException {

        try {

            BopUnidadePolicial bup = em.merge(bopUnidadePolicial);
            em.flush();
            em.refresh(bup);

            return bup;

        } catch (Exception e) {
            throw new BusinessException("012_153: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    public List<BopFuncionario> getListDelegadosByUnidadePolicial(
            BopUnidadePolicial bopUnidadePolicial) throws BusinessException {

        try {
            return em
                    .createNamedQuery(
                            "BopFuncionario.findDelegadosByUnidadePolicial")
                    .setParameter("cdUnidPolicial",
                            bopUnidadePolicial.getId().getCdUnidPolicial())
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_154: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopTipoProvidenciaDeon getBopTipoProvidenciaDeonById(
            int idTipoProvidencia) throws BusinessException {

        BopTipoProvidenciaDeon bopTipoProvidenciaDeon;

        try {
            bopTipoProvidenciaDeon = (BopTipoProvidenciaDeon) em
                    .createNamedQuery("BopTipoProvidenciaDeon.findId")
                    .setParameter("idTipoProvidencia", idTipoProvidencia)
                    .getSingleResult();
        } catch (NoResultException e) {
            bopTipoProvidenciaDeon = null;
        } catch (Exception e) {
            throw new BusinessException("012_155: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopTipoProvidenciaDeon;

    }

    public List<BopUnidadePolicial> getListBopUnidadePolicial(
            int indexPaginacao, int rows, String nome, int agencia,
            boolean pesquisarApenasAgenciaDoUsuario) throws BusinessException {

        Query query = null;

        int parametros = 1;

        String str = "SELECT * FROM (SELECT A.*, ROWNUM RNUM FROM BOP_UNIDADE_POLICIAL A WHERE A.DS_UNID_POLICIAL LIKE ? AND FL_ATIVO = 'S' AND ROWNUM <= ? ";

        if (pesquisarApenasAgenciaDoUsuario) {

            if (agencia > 0 && agencia != 11) {
                str += " AND CD_AGENCIA = ? ";
            }

        }

        str += " )  WHERE RNUM  > ? ";

        query = em.createNativeQuery(str, BopUnidadePolicial.class);

        query.setParameter(parametros++, this.montarLike(nome));

        query.setParameter(parametros++, indexPaginacao + rows);

        if (pesquisarApenasAgenciaDoUsuario) {
            if (agencia > 0 && agencia != 11) {
                query.setParameter(parametros++, agencia);
            }
        }

        query.setParameter(parametros--, indexPaginacao);

        try {
            List<BopUnidadePolicial> listBopUnidadePolicial = query
                    .getResultList();

            return listBopUnidadePolicial;
        } catch (Exception e) {
            throw new BusinessException("012_156: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public int getListBopUnidadePolicialCount(String nome, int agencia,
            boolean pesquisarApenasAgenciaDoUsuario) throws BusinessException {

        Query query = null;

        int parametros = 1;

        String str = "SELECT COUNT(*) FROM BOP_UNIDADE_POLICIAL A WHERE A.DS_UNID_POLICIAL LIKE ? AND FL_ATIVO = 'S' ";

        if (!pesquisarApenasAgenciaDoUsuario) {

            str += " AND (CD_AGENCIA = " + BopAgencia.BOMBEIROS
                    + " OR CD_AGENCIA = " + BopAgencia.POLICIA_CIVIL
                    + " OR CD_AGENCIA = " + BopAgencia.POLICIA_MILITAR;

            if (agencia > 0 && agencia != 11) {
                str += " OR CD_AGENCIA = ? ";
            }

            str += " ) ";
        } else {

            if (agencia > 0 && agencia != 11) {
                str += " AND CD_AGENCIA = ? ";
            }

        }

        query = em.createNativeQuery(str);

        query.setParameter(parametros++, this.montarLike(nome));

        if (agencia > 0 && agencia != 11) {
            query.setParameter(parametros++, agencia);
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_157: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarios> getListBopUsuario(int indexPaginacao, int rows,
            String login, String nome, int agencia) throws BusinessException {

        Query query = null;
        int parametros = 1;
        StringBuffer strbfQuery = new StringBuffer();

        strbfQuery
                .append("SELECT * FROM (SELECT A.*, ROWNUM RNUM FROM BOP_USUARIOS A "
                        + "WHERE FL_ATIVO = 'S' AND TRANSLATE( UPPER(A.NM_USUARIO), 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                        + "LIKE TRANSLATE( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ");

        if (!login.equals("")) {
            strbfQuery.append("AND A.NM_ABREV_USUARIO like ? ");
        }

        if (agencia > 0 && agencia != 11) {
            strbfQuery.append("AND ( A.CD_AGENCIA = " + agencia + " ) ");
        }

        strbfQuery.append("AND ROWNUM <= ?)  WHERE RNUM  > ?");

        query = em.createNativeQuery(strbfQuery.toString(), BopUsuarios.class);

        query.setParameter(parametros++,
                this.montarLike(nome == null ? "" : nome));

        if (!login.equals("")) {
            query.setParameter(parametros++,
                    this.montarLike(login == null ? "" : login));
        }

        query.setParameter(parametros++, indexPaginacao + rows);
        query.setParameter(parametros, indexPaginacao);

        List<BopUsuarios> listBopUsuario;
        try {
            listBopUsuario = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_158: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listBopUsuario;
    }

    public int getListBopUsuarioCount(String login, String nome, int agencia)
            throws BusinessException {

        Query query = null;
        int parametros = 1;
        StringBuffer strbfQuery = new StringBuffer();

        strbfQuery
                .append("SELECT COUNT(*) FROM BOP_USUARIOS A "
                        + "WHERE FL_ATIVO = 'S' AND TRANSLATE( A.NM_USUARIO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                        + "LIKE TRANSLATE( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ");

        if (!login.equals("")) {
            strbfQuery.append("AND A.NM_ABREV_USUARIO like ? ");
        }

        if (agencia > 0 && agencia != 11) {
            strbfQuery.append("AND ( A.CD_AGENCIA = " + agencia + " ) ");
        }

        query = em.createNativeQuery(strbfQuery.toString());

        query.setParameter(parametros++,
                this.montarLike(nome == null ? "" : nome));

        if (!login.equals("")) {
            query.setParameter(parametros++,
                    this.montarLike(login == null ? "" : login));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_159: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopTipoDocumento getTipoDocumentoById(long idTipoDocumento)
            throws BusinessException {

        BopTipoDocumento bopTipoDocumento;

        try {

            bopTipoDocumento = (BopTipoDocumento) em
                    .createNamedQuery("BopTipoDocumento.findById")
                    .setParameter("idTipoDocumento", idTipoDocumento)
                    .getSingleResult();

        } catch (NoResultException e) {
            bopTipoDocumento = null;
        } catch (Exception e) {
            throw new BusinessException("012_160: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopTipoDocumento;
    }

    public List<BopMotivoCancelamento> getListBopMotivoCancelamento()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopMotivoCancelamento.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_161: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public Date getSysDate() throws BusinessException {

        Timestamp dataAtualStamp;
        Date dataAtual = null;

        try {

            dataAtualStamp = (Timestamp) em.createNativeQuery(
                    "SELECT SYSDATE FROM DUAL").getSingleResult();
            dataAtual = new Date(dataAtualStamp.getTime());

        } catch (NoResultException e) {
            dataAtualStamp = null;
        } catch (Exception e) {
            throw new BusinessException("012_162: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return dataAtual;
    }

    public List<BopTipoDroga> getListBopTipoDroga() throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoDroga.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_163: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopMoedaDeon> getListBopMoedaDeon() throws BusinessException {
        try {
            return em.createNamedQuery("BopMoedaDeon.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_164: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopBancoDeon> getListBopBancoDeon() throws BusinessException {
        try {
            return em.createNamedQuery("BopBancoDeon.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_165: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonTipoArma> getTipoArmaFogo() throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonTipoArma.findByFlTipoArma")
                    .setParameter("flTipoArma", VwDeonTipoArma.FL_ARMA_FOGO)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_166: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwDeonTipoArma> getTipoArmaBranca() throws BusinessException {
        try {
            return em.createNamedQuery("VwDeonTipoArma.findByFlTipoArma")
                    .setParameter("flTipoArma", VwDeonTipoArma.FL_ARMA_BRANCA)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_167: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopUnidadeResponsavelDeon getAtualResponsavelUnidadeDeon(
            BopUnidadePolicial pBopUnidadePolicial, char pStatusResponsavel,
            long pCdCargo) throws BusinessException {

        BopUnidadeResponsavelDeon responsavelDeon;

        try {

            responsavelDeon = (BopUnidadeResponsavelDeon) em
                    .createNamedQuery(
                            "BopUnidadeResponsavelDeon.findForUnidadePolicial")
                    .setParameter("pBopUnidadePolicial", pBopUnidadePolicial)
                    .setParameter("pStatusResponsavel", pStatusResponsavel)
                    .setParameter("pCdCargo", pCdCargo).getSingleResult();

        } catch (NoResultException e) {

            responsavelDeon = null;
        } catch (Exception e) {
            throw new BusinessException("012_168: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return responsavelDeon;
    }

    public BopProvidenciaEnvolvidoDeon getBopProvidenciaFindEnvolvido(
            BopEnvolvidosOcorrencia envolvidosOcorrencia, int idTipoProvidencia)
            throws BusinessException {

        BopProvidenciaEnvolvidoDeon bopProvidenciaEnvolvidoDeon;

        try {

            StringBuilder str = new StringBuilder();

            if (idTipoProvidencia == 8) {// tipo da providência igual a Termo de
                // Requerimento

                str.append("SELECT  BPED.* ");
                str.append("	FROM Bop_Providencia_Envolvido_Deon BPED");
                str.append("		INNER JOIN Bop_Adendo_Providencia_Deon BAPD ON (BPED.id_Providencia_Deon = BAPD.id_Providencia_Deon)");
                str.append("		INNER JOIN Bop_Envolvidos_Ocorrencia BEO ON (BEO.id_Envolvido = BPED.id_Envolvido  AND BEO.nr_Bop = BPED.nr_Bop   AND BEO.tipo_Bop =  BPED.tipo_Bop)");
                str.append("		INNER JOIN  Bop_Envolvido_Ocorrencia_Deon BEOD ON (BEOD.id_Envolvido =  BEO.id_Envolvido  AND BEOD.nr_Bop = BEO.nr_Bop  AND BEOD.tipo_Bop =  BEO.tipo_Bop)");
                str.append("		INNER JOIN  Bop_Prov_Requerimento_Deon BPRD ON (BPED.id_Providencia_Deon = BPRD.id_Providencia_Deon)");
                str.append("		WHERE BPED.id_Tipo_Providencia = 8 ");
                str.append("			AND BPED.id_Envolvido != ").append(
                        envolvidosOcorrencia.getId().getIdEnvolvido());
                str.append("			AND BEO.NR_BOP = ").append(
                        envolvidosOcorrencia.getId().getNrBop());
                str.append("			AND BPRD.id_Envolvido_Acusado = ").append(
                        envolvidosOcorrencia.getId().getIdEnvolvido());
                str.append("			AND BEO.TIPO_BOP = '")
                        .append(envolvidosOcorrencia.getId().getTipoBop())
                        .append("'");
                str.append("		ORDER BY BAPD.id_Adendo_Providencia_Deon DESC");

            } else {

                str.append("SELECT  BPED.* ");
                str.append("	FROM Bop_Providencia_Envolvido_Deon BPED");
                str.append("		INNER JOIN Bop_Adendo_Providencia_Deon BAPD ON (BPED.id_Providencia_Deon = BAPD.id_Providencia_Deon)");
                str.append("		INNER JOIN Bop_Envolvidos_Ocorrencia BEO ON (BEO.id_Envolvido = BPED.id_Envolvido  AND BEO.nr_Bop = BPED.nr_Bop AND BEO.tipo_Bop =  BPED.tipo_Bop)");
                str.append("		INNER JOIN  Bop_Envolvido_Ocorrencia_Deon BEOD ON (BEOD.id_Envolvido =  BEO.id_Envolvido  AND BEOD.nr_Bop = BEO.nr_Bop  AND BEOD.tipo_Bop =  BEO.tipo_Bop)");
                str.append("		WHERE BPED.id_Tipo_Providencia = ").append(
                        idTipoProvidencia);
                str.append("			AND BPED.id_Envolvido = ").append(
                        envolvidosOcorrencia.getId().getIdEnvolvido());
                str.append("			AND BEO.NR_BOP = ").append(
                        envolvidosOcorrencia.getId().getNrBop());
                str.append("			AND BEO.TIPO_BOP = '")
                        .append(envolvidosOcorrencia.getId().getTipoBop())
                        .append("'");
                str.append("		ORDER BY BAPD.id_Adendo_Providencia_Deon DESC ");

            }

            List<BopProvidenciaEnvolvidoDeon> lista = em.createNativeQuery(
                    str.toString(), BopProvidenciaEnvolvidoDeon.class)
                    .getResultList();

            bopProvidenciaEnvolvidoDeon = (lista != null && lista.size() > 1 && !lista
                    .isEmpty()) ? lista.get(0) : null;

        } catch (Exception e) {
            throw new BusinessException("012_169: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopProvidenciaEnvolvidoDeon;
    }

    public <T> T refreshEntity(T t, Object object) throws BusinessException {

        t = (T) em.find(t.getClass(), object);

        if (t != null) {

            try {
                em.refresh(t);
            } catch (Exception e) {
                throw new BusinessException("012_170: "
                        + "Ocorreu um erro inesperado.", e);

            }

        }

        return t;

    }

    public <T extends Serializable> T refreshEntity(Class<T> objClass, Object pk)
            throws BusinessException {

        T t = (T) em.find(objClass, pk);

        if (t != null) {

            try {
                em.refresh(t);
            } catch (Exception e) {
                throw new BusinessException("012_171: "
                        + "Ocorreu um erro inesperado.", e);

            }

        }

        return t;

    }

    // Eletrônico
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select count(distinct chamado.id.nrChamado) from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrEletros) as eletro ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNmProprietario(),
                " eletro.nmProprietario like :nmProprietario ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrSerial(),
                " eletro.nrSerial like :nrSerial ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrLinha(),
                " eletro.nrLinha = :nrLinha ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrEletro.getVwDeonMarcaObjeto(),
                " eletro.vwDeonMarcaObjeto = :vwDeonMarcaObjeto ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei(),
                " eletro.bopObjetoOcorrEletroDeon.dsImei like :dsImei ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo(),
                " eletro.bopObjetoOcorrEletroDeon.nmModelo like :nmModelo ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter("nmProprietario",
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter("nrSerial",
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter("nrLinha", bopObjetoOcorrEletro.getNrLinha());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter("vwDeonMarcaObjeto",
                    bopObjetoOcorrEletro.getVwDeonMarcaObjeto());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter("dsImei", "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter("nmModelo", "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_174: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Eletro".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrEletro
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<BopOcorrencia> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, int indexPaginacao,
            int rows) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select distinct o from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrEletros) as eletro ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNmProprietario(),
                " eletro.nmProprietario like :nmProprietario ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrSerial(),
                " eletro.nrSerial like :nrSerial ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrLinha(),
                " eletro.nrLinha = :nrLinha ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrEletro.getVwDeonMarcaObjeto(),
                " eletro.vwDeonMarcaObjeto = :vwDeonMarcaObjeto ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei(),
                " eletro.bopObjetoOcorrEletroDeon.dsImei like :dsImei ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo(),
                " eletro.bopObjetoOcorrEletroDeon.nmModelo like :nmModelo ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter("nmProprietario",
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter("nrSerial",
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter("nrLinha", bopObjetoOcorrEletro.getNrLinha());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter("vwDeonMarcaObjeto",
                    bopObjetoOcorrEletro.getVwDeonMarcaObjeto());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter("dsImei", "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter("nmModelo", "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        try {
            return (List<BopOcorrencia>) query.setFirstResult(indexPaginacao)
                    .setMaxResults(rows).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_175: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private void contarQuery(StringBuffer strbfQuery) {
        strbfQuery.insert(0, " SELECT COUNT(1) FROM ( ");
        strbfQuery.append(" ) A ");
    }

    private void paginarQuery(StringBuffer strbfQuery, int inicio, int fim) {
        strbfQuery.insert(0,
                " SELECT ID_OBJETO,"
                + "  DT_FATO "
                + ", DT_CRIACAO"
                + ", NR_CHAMADO"
                + ", DS_INCIDENTE"
                + ", ID_INCIDENTE_PAI"
                + ", TP_INCIDENTE"
                + ", NR_BOP"
                + ", TIPO_BOP"
                + ", AGENCIA_RECEBIMENTO"
                + ", UNIDADE_RECEBIMENTO"
                + ", AGENCIA_REGISTRO"
                + ", UNIDADE_REGISTRO"
                + ", CD_UF"
                + ", DS_CIDADE"
                + ", DS_BAIRRO"
                + ", TIPO_ACAO"
                + ", TIPO_OBJETO,"
                + "  DS_LOGRADOURO,  "
                + "  NR_NUMERO,  "
                + "  DS_COMPLEMENTO,  "
                + "  DS_TIPO_LOCAL,  "
                + "  DS_MARCA,  "
                + "  NM_MODELO,  "
                + "  DS_OBSERVACAO,  "
                + "  TIPO, "
                + " NR_ANO, "
                + " CD_COR, "
                + " NR_PLACA, "
                + " NR_PLACA_APARENTE_FALSA, "
                + " NR_RENAVAM, "
                + " NR_CHASS, "
                + " NR_CALIBRE, "
                + " NR_SERIE, "
                + " DS_TIPO_FABRICACAO, "
                + " ESPECIE, "
                + " FL_SERIE_ILEGIVEL, "
                + " FL_SERIE_RASPADO "
                + ", RNUM FROM ( "
                + "					SELECT /*+ FIRST_ROWS */ "
                + "  ID_OBJETO, A.DT_FATO "
                + ", A.DT_CRIACAO "
                + ", A.NR_CHAMADO "
                + ", A.DS_INCIDENTE "
                + ", A.ID_INCIDENTE_PAI "
                + ", A.TP_INCIDENTE "
                + ", A.NR_BOP "
                + ", A.TIPO_BOP "
                + ", AGENCIA_RECEBIMENTO "
                + ", UNIDADE_RECEBIMENTO "
                + ", AGENCIA_REGISTRO "
                + ", UNIDADE_REGISTRO "
                + ", CD_UF, DS_CIDADE "
                + ", DS_BAIRRO "
                + ", DS_TIPO_ACAO_OBJETO AS TIPO_ACAO "
                + ", TIPO_OBJETO, "
                + "  DS_LOGRADOURO,  "
                + "  NR_NUMERO,  "
                + "  DS_COMPLEMENTO,  "
                + "  DS_TIPO_LOCAL,  "
                + "  DS_MARCA,  "
                + "  NM_MODELO,  "
                + "  DS_OBSERVACAO,  "
                + "  TIPO,  "
                + "  NR_ANO,  "
                + "  CD_COR,  "
                + "  NR_PLACA,  "
                + "  NR_PLACA_APARENTE_FALSA,  "
                + "  NR_RENAVAM,  "
                + "  NR_CHASS,  "
                + "  NR_CALIBRE,  "
                + "  NR_SERIE,  "
                + "  DS_TIPO_FABRICACAO,  "
                + "  ESPECIE,  "
                + "  FL_SERIE_ILEGIVEL,  "
                + "  FL_SERIE_RASPADO  "
                + ",  ROWNUM RNUM FROM ( ");

        strbfQuery.append(" ) A WHERE ROWNUM <= " + (inicio + fim) + " ) WHERE RNUM > " + inicio);
    }

    //Arma
    public int getQuantidadeObjetoArma(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrArma bopObjetoOcorrArma, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT COUNT( BCO.NR_CHAMADO) "
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_ARMA BOOA ON BOOA.TIPO_BOP = BOO.TIPO_BOP AND BOOA.ID_OBJETO = BOO.ID_OBJETO AND BOOA.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_ARMA_DEON BOOAD ON BOOAD.TIPO_BOP = BOOA.TIPO_BOP AND BOOAD.ID_ARMA = BOOA.ID_ARMA AND BOOAD.NR_BOP = BOOA.NR_BOP AND BOOAD.ID_OBJETO = BOOA.ID_OBJETO "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
            appendWhereClause(strbfQuery,
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
            appendWhereClause(strbfQuery,
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                    " BOO.ID_TIPO_ACAO = ? ");

            appendWhereClause(strbfQuery,
                    bopObjetoOcorrArma.getVwDeonTipoArma(),
                    " BOOA.CD_TIPO_ARMA = ? ");
            appendWhereClause(strbfQuery,
                    bopObjetoOcorrArma.getVwDeonMarcaObjeto(),
                    " BOOA.CD_MARCA = ? ");
            appendWhereClause(strbfQuery,
                    bopObjetoOcorrArma.getBopModeloMatApreendido(),
                    " BOOA.CD_MODELO = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre(),
                    " BOOAD.NR_CALIBRE LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie(),
                    " BOOAD.NR_SERIE LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getNrPatrimonio(),
                    " BOOA.NR_PATRIMONIO LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm(),
                    " BOOAD.DS_REGISTRO_SINARM LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSigma(),
                    " BOOAD.DS_REGISTRO_SIGMA LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma(),
                    " BOOAD.CD_TIPO_ARMA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon(),
                    " BOOAD.ID_CORONHA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade(),
                    " BOOAD.DS_CAPACIDADE = ? ");

        } else {

            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsObservacao(),
                    " BOOAD.DS_OBSERVACAO LIKE ? ");

        }

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getVwDeonTipoObjeto().getIdTipoObjeto());
            }

            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonTipoArma().getIdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonMarcaObjeto())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonMarcaObjeto().getIdMarca());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopModeloMatApreendido())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopModeloMatApreendido().getId().getCdModelo());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrCalibre() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrSerie() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getNrPatrimonio())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrArma.getNrPatrimonio() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSinarm() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSigma())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSigma() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getCdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon()
                        .getId());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsCapacidade());
            }

        } else {
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsObservacao() + "%");
            }
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_178: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    private StringBuffer getQueryOcorrenciaArma(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrArma bopObjetoOcorrArma,
            Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal,
            Date dataRegistroInicial, Date dataRegistroFinal,
            BopAgencia agenciaSelecionada,
            BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOOA.ID_ARMA ID_OBJETO, "
                + "        BO.DT_FATO,"
                + "        BO.DT_CRIACAO,"
                + "        BCO.NR_CHAMADO,"
                + "        BOI.DS_INCIDENTE,"
                + "        BOI.ID_INCIDENTE_PAI,"
                + "        BOI.TP_INCIDENTE,"
                + "        BO.NR_BOP,"
                + "        BO.TIPO_BOP,"
                + "        (SELECT BOP_AGENCIA.DS_AGENCIA"
                + "           FROM BOP_AGENCIA"
                + "          WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA)"
                + "           AS AGENCIA_RECEBIMENTO,"
                + "        (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL"
                + "           FROM BOP_UNIDADE_POLICIAL"
                + "          WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL ="
                + "                   BO.CD_UNID_POLICIAL)"
                + "           AS UNIDADE_RECEBIMENTO, "
                + "        FU_CONCATENA_AGENCIA (BO.NR_BOP, BO.TIPO_BOP) "
                + "           AGENCIA_REGISTRO, "
                + "        FU_CONCATENA_UNIDADE_POLICIAL (BO.NR_BOP, BO.TIPO_BOP) "
                + "           UNIDADE_REGISTRO, "
                + "        BEOD.CD_UF, "
                + "        BMG.NM_MUNICIPIO AS DS_CIDADE, "
                + "        BBG.NM_BAIRRO AS DS_BAIRRO, "
                + "        BTAOD.DS_TIPO_ACAO_OBJETO, "
                + "        BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + "        BEOD.DS_LOGRADOURO DS_LOGRADOURO, "
                + "        BEOD.NR_NUMERO, "
                + "        BEOD.DS_COMPLEMENTO, "
                + "        BTL.DS_TIPO_LOCAL, "
                + "        DS_MARCA, "
                + "        DS_MODELO NM_MODELO, "
                + "        BOOAD.DS_OBSERVACAO, "
                + "        DECODE (BOOAD.CD_TIPO_ARMA, 1, 'ARMA DE FOGO', "
                + "            2, 'SIMULACRO', "
                + "            3, 'ARMA DE BRINQUEDO')   TIPO, "
                + "        NULL NR_ANO, "
                + "        NULL CD_COR, "
                + "        NULL NR_PLACA, "
                + "        NULL NR_RENAVAM, "
                + "        NULL NR_CHASS, "
                + "   	  NULL NR_PLACA_APARENTE_FALSA, "
                + "        DS_CALIBRE_ARMA NR_CALIBRE, "
                + "        NR_SERIE NR_SERIE, "
                + "        DECODE (BOOAD.ID_TIPO_FABRICACAO, 1, 'INDUSTRIAL', "
                + "            2, 'ARTESANAL')  DS_TIPO_FABRICACAO, "
                + "        DS_TIPO_ARMA ESPECIE, "
                + "        FL_SERIE_ILEGIVEL FL_SERIE_ILEGIVEL, "
                + "        FL_SERIE_RASPADO FL_SERIE_RASPADO "
                + "   FROM BOP_OCORRENCIA_OBJETOS BOO "
                + "        JOIN BOP_OCORRENCIA BO "
                + "           ON     BOO.TIPO_BOP = BO.TIPO_BOP "
                + "              AND BOO.NR_BOP = BO.NR_BOP "
                + "        JOIN BOP_TIPO_LOCAL BTL "
                + "           ON (BTL.CD_TIPO_LOCAL = BO.CD_TIPO_LOCAL) "
                + "        JOIN BOP_INCIDENTE BOI "
                + "           ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + "        JOIN BOP_OBJETO_OCORR_ARMA BOOA "
                + "           ON     BOOA.TIPO_BOP = BOO.TIPO_BOP "
                + "              AND BOOA.ID_OBJETO = BOO.ID_OBJETO "
                + "              AND BOOA.NR_BOP = BOO.NR_BOP "
                + "        JOIN BOP_OBJETO_OCORR_ARMA_DEON BOOAD "
                + "           ON     BOOAD.TIPO_BOP = BOOA.TIPO_BOP "
                + "              AND BOOAD.ID_ARMA = BOOA.ID_ARMA "
                + "              AND BOOAD.NR_BOP = BOOA.NR_BOP "
                + "             AND BOOAD.ID_OBJETO = BOOA.ID_OBJETO "
                + "        JOIN BOP_CHAMADO_OCORRENCIA BCO "
                + "           ON     BCO.TIPO_BOP = BO.TIPO_BOP "
                + "              AND BCO.NR_BOP = BO.NR_BOP "
                + "        JOIN BOP_OCORRENCIA_AGENCIA BOA "
                + "           ON (    BOA.NR_BOP = BO.NR_BOP "
                + "               AND BOA.TIPO_BOP = BO.TIPO_BOP) "
                + "        JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD "
                + "           ON (BOA.CD_OCORRENCIA_AGENCIA = "
                + "                  BOAD.CD_OCORRENCIA_AGENCIA) "
                + "        JOIN BOP_OCORRENCIA_DEON BOD "
                + "           ON (    BOD.NR_BOP = BO.NR_BOP "
                + "               AND BOD.TIPO_BOP = BO.TIPO_BOP) "
                + "        JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD "
                + "           ON (BEOD.ID_ENDERECO_OCORRENCIA_DEON = "
                + "                  BOD.ID_ENDERECO_OCORRENCIA_DEON) "
                + "        JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD "
                + "           ON (BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO) "
                + "        JOIN BOP_MUNICIPIOS_GERAL BMG "
                + "           ON (    BMG.CD_UF = BEOD.CD_UF "
                + "               AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO) "
                + "        JOIN BOP_BAIRROS_GERAL BBG "
                + "           ON (    BBG.CD_UF = BEOD.CD_UF "
                + "               AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO "
                + "               AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO) "
                + "  left JOIN BOP_MARCA_MAT_APREENDIDO BMMA "
                + "           ON (BOOA.CD_MARCA = BMMA.CD_MARCA) "
                + "       LEFT JOIN BOP_TIPO_MAT_APREENDIDO BTMA "
                + "           ON (BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR) "
                + "              LEFT JOIN VW_DEON_TIPO_ARMA VDTA "
                + "          ON     BOOA.CD_TIPO_ARMA = VDTA.ID_TIPO_ARMA "
                + " LEFT JOIN BOP_CALIBRE_ARMA  BCA ON (BCA.CD_CALIBRE_ARMA = BOOA.CD_CALIBRE_ARMA) ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {

//			appendWhereClause(strbfQuery,
//					bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
//					" BOO.CD_TIPO_MAT_APR = ? ");
            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon())) {
                appendWhereClause(strbfQuery,
                        bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                        " BOO.ID_TIPO_ACAO = ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonTipoArma())) {
                appendWhereClause(strbfQuery,
                        bopObjetoOcorrArma.getVwDeonTipoArma(),
                        " BOOA.CD_TIPO_ARMA = ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonMarcaObjeto())) {
                appendWhereClause(strbfQuery,
                        bopObjetoOcorrArma.getVwDeonMarcaObjeto(),
                        " BOOA.CD_MARCA = ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopModeloMatApreendido())) {
                appendWhereClause(strbfQuery,
                        bopObjetoOcorrArma.getBopModeloMatApreendido(),
                        " BOOA.CD_MODELO = ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getNrCalibre(),
                        " BOOAD.NR_CALIBRE LIKE ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getNrSerie(),
                        " BOOAD.NR_SERIE LIKE ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getNrPatrimonio())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma.getNrPatrimonio(),
                        " BOOA.NR_PATRIMONIO LIKE ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm(),
                        " BOOAD.DS_REGISTRO_SINARM LIKE ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsRegistroSigma())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsRegistroSigma(), " BOOAD.DS_REGISTRO_SIGMA LIKE ? ");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsModelo())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsModelo(), " BOOAD.DS_MODELO LIKE ? ");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getCdTipoArma(),
                        " BOOAD.CD_TIPO_ARMA = ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon(),
                        " BOOAD.ID_CORONHA = ? ");
            }
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade())) {
                appendWhereClause(strbfQuery, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsCapacidade(),
                        " BOOAD.DS_CAPACIDADE = ? ");
            }

        } else {

            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsObservacao(),
                    " BOOAD.DS_OBSERVACAO LIKE ? ");

        }
        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;
    }

    public int getListaOcorrenciaArmaCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrArma bopObjetoOcorrArma,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {

        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaArma(bopOcorrenciaObjeto, bopObjetoOcorrArma, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.contarQuery(strbfQuery);

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//				query.setParameter(parametros++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
//			}

            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonTipoArma().getIdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonMarcaObjeto())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonMarcaObjeto().getIdMarca());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopModeloMatApreendido())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopModeloMatApreendido().getId().getCdModelo());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrCalibre() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrSerie() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getNrPatrimonio())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrArma.getNrPatrimonio() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSinarm() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSigma())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSigma() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsModelo())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsModelo() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getCdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon()
                        .getId());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsCapacidade());
            }

        } else {
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsObservacao() + "%");
            }
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_179: Ocorreu um erro inesperado.", e);
        }

    }

    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaArmaPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrArma bopObjetoOcorrArma, int inicio, int fim,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaArma(bopOcorrenciaObjeto, bopObjetoOcorrArma, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);
        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//				query.setParameter(parametros++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
//			}

            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonTipoArma().getIdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonMarcaObjeto())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonMarcaObjeto().getIdMarca());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopModeloMatApreendido())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopModeloMatApreendido().getId().getCdModelo());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrCalibre() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrSerie() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getNrPatrimonio())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrArma.getNrPatrimonio() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSinarm() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsRegistroSigma())) {
                query.setParameter(parametros++, "%" + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsRegistroSigma() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsModelo())) {
                query.setParameter(parametros++, "%" + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsModelo() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getCdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon()
                        .getId());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsCapacidade());
            }

        } else {
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsObservacao() + "%");
            }
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_179: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    //Bicicleta
    //Bicicleta
    public int getQuantidadeObjetoBicicleta(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrBicicletaDeon bopObjetoOcorrBicicletaDeon,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;
        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT( BCO.NR_CHAMADO)"
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJ_OCORR_BICICLETA_DEON BOOBD ON BOOBD.TIPO_BOP = BOO.TIPO_BOP AND BOOBD.ID_OBJETO = BOO.ID_OBJETO AND BOOBD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND  BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getNmMarca(),
                " BOOBD.NM_MARCA LIKE ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getNmModelo(),
                " BOOBD.NM_MODELO LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getVwCor(),
                " BOOBD.CD_COR = ?  ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getCdNumeroSerie(),
                " BOOBD.CD_NUMERO_SERIE LIKE ? ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmMarca())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmMarca() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmModelo())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmModelo() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrBicicletaDeon
                    .getVwCor().getCdCor());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon
                .getCdNumeroSerie())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getCdNumeroSerie() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_180: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaBicicleta(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrBicicletaDeon bopObjetoOcorrBicicletaDeon,
            Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal,
            Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOOBD.CD_BICICLETA_DEON ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ( SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA ) AS AGENCIA_RECEBIMENTO, "
                + " ( SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL ) AS UNIDADE_RECEBIMENTO, "
                + " FU_CONCATENA_AGENCIA(BO.NR_BOP, BO.TIPO_BOP) AGENCIA_REGISTRO, "
                + " FU_CONCATENA_UNIDADE_POLICIAL(BO.NR_BOP, BO.TIPO_BOP) UNIDADE_REGISTRO, "
                + " BEOD.CD_UF, BMG.NM_MUNICIPIO AS DS_CIDADE, BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO, BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJ_OCORR_BICICLETA_DEON BOOBD ON BOOBD.TIPO_BOP = BOO.TIPO_BOP AND BOOBD.ID_OBJETO = BOO.ID_OBJETO AND BOOBD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON ( BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP = BO.NR_BOP AND BOD.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD ON ( BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON ) "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO ) "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON ( BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO ) "
                + " JOIN BOP_BAIRROS_GERAL BBG ON ( BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO ) "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON ( BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR ) ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

//		appendWhereClause(strbfQuery,
//				bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
//				" BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getNmMarca(),
                " BOOBD.NM_MARCA LIKE ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getNmModelo(),
                " BOOBD.NM_MODELO LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getVwCor(),
                " BOOBD.CD_COR = ?  ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getCdNumeroSerie(),
                " BOOBD.CD_NUMERO_SERIE LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    public int getListaOcorrenciaBicicletaCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrBicicletaDeon bopObjetoOcorrBicicletaDeon,
            Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal,
            Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaBicicleta(bopOcorrenciaObjeto, bopObjetoOcorrBicicletaDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.contarQuery(strbfQuery);

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

//		if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmMarca())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmMarca() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmModelo())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmModelo() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrBicicletaDeon
                    .getVwCor().getCdCor());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon
                .getCdNumeroSerie())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getCdNumeroSerie() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_181: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaBicicletaPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrBicicletaDeon bopObjetoOcorrBicicletaDeon,
            int inicio, int fim, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaBicicleta(bopOcorrenciaObjeto, bopObjetoOcorrBicicletaDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.paginarQuery(strbfQuery, inicio, fim);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

//		if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmMarca())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmMarca() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmModelo())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmModelo() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrBicicletaDeon
                    .getVwCor().getCdCor());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon
                .getCdNumeroSerie())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getCdNumeroSerie() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_181: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    //Cartao
    //Cartao
    // Cartão com Translate
    public int getQuantidadeObjetoCartao(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT( BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJETO_OCORR_CARTAO_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCartao.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrTipo(),
                " BOOCD.NR_TIPO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrConta(),
                " BOOCD.NR_CONTA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmBandeira(),
                " BOOCD.NM_BANDEIRA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrCartao(),
                " BOOCD.NR_CARTAO like ? ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_196: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaCartao(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao,
            Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT distinct BOOCD.ID_CARTAO ID_OBJETO, BO.DT_FATO ,  BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP,  "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BO.CD_AGENCIA) AS  AGENCIA_RECEBIMENTO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BO.CD_UNID_POLICIAL) AS  UNIDADE_RECEBIMENTO, "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BOA.CD_AGENCIA  AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  AGENCIA_REGISTRO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BOA.CD_UNID_POLICIAL AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  UNIDADE_REGISTRO, "
                + " BEOD.CD_UF,  BMG.NM_MUNICIPIO AS DS_CIDADE,  BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO,   BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO ON (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJETO_OCORR_CARTAO_DEON BOOCD ON BOOCD.ID_OBJETO = BOO.ID_OBJETO"
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD   ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO )  "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON (  BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO )  "
                + " JOIN BOP_BAIRROS_GERAL BBG ON (  BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO )  "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON (  BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR ) AND BOA.DS_OCORRENCIA IS NOT NULL ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCartao.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrTipo(),
                " BOOCD.NR_TIPO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrConta(),
                " BOOCD.NR_CONTA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmBandeira(),
                " BOOCD.NM_BANDEIRA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrCartao(),
                " BOOCD.NR_CARTAO like ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;
    }

    public int getListaOcorrenciaCartaoCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao,
            Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaCartao(bopOcorrenciaObjeto, bopObjetoOcorrCartao, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.contarQuery(strbfQuery);

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }

        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter(parametros++, bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter(parametros++, bopObjetoOcorrCartao
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_197: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Cartao", utilizando o TRANSLATE para retirar acentuação.
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrCartao
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaCartaoPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao, int inicio,
            int fim, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado,
            BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        int parameters = 1;
        StringBuffer strbfQuery = this.getQueryOcorrenciaCartao(bopOcorrenciaObjeto, bopObjetoOcorrCartao, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parameters++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parameters++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_197: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    //Cheque
    //Cheque com Translate
    public int getQuantidadeObjetoCheque(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT( BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJETO_OCORR_CHEQUE_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCheque.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrConta(),
                " BOOCD.NR_CONTA like ? ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCheque
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_192: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Cheque", utilizando o TRANSLATE para retirar acentuação.
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrCheque
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    private StringBuffer getQueryOcorrenciaCartao(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque,
            Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado,
            BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT distinct BOOCD.ID_CHEQUE ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP,  "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BO.CD_AGENCIA) AS  AGENCIA_RECEBIMENTO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BO.CD_UNID_POLICIAL) AS  UNIDADE_RECEBIMENTO, "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BOA.CD_AGENCIA  AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  AGENCIA_REGISTRO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BOA.CD_UNID_POLICIAL AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  UNIDADE_REGISTRO, "
                + " BEOD.CD_UF,  BMG.NM_MUNICIPIO AS DS_CIDADE,  BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO,   BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO ON (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJETO_OCORR_CHEQUE_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD   ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO )  "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON (  BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO )  "
                + " JOIN BOP_BAIRROS_GERAL BBG ON (  BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO )  "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON (  BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR ) AND BOA.DS_OCORRENCIA IS NOT NULL  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

//		appendWhereClause(strbfQuery,
//				bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
//				" BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCheque.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrConta(),
                " BOOCD.NR_CONTA like ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    public int getListaOcorrenciaChequeCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado,
            BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        int parameters = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaCartao(bopOcorrenciaObjeto, bopObjetoOcorrCheque, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.contarQuery(strbfQuery);

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parameters++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parameters++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }

//		if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto()))
//			query.setParameter(parameters++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCheque
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_193: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaChequePaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque, int inicio,
            int fim, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado,
            BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        int parameters = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaCartao(bopOcorrenciaObjeto, bopObjetoOcorrCheque, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parameters++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parameters++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }

//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto()))
//				query.setParameter(parameters++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCheque
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_193: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Dinheiro
    public int getQuantidadeObjetoDinheiro(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDinheiroDeon bopObjetoOcorrDinheiroDeon,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT( BCO.NR_CHAMADO) "
                + "FROM  BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJ_OCORR_DINHEIRO_DEON BOODD ON BOODD.TIPO_BOP = BOO.TIPO_BOP AND BOODD.ID_OBJETO = BOO.ID_OBJETO AND BOODD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrDinheiroDeon.getDsObservacao(),
                " BOODD.DS_OBSERVACAO LIKE ?  ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDinheiroDeon.getDsObservacao())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDinheiroDeon.getDsObservacao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_182: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    private StringBuffer getQueryOcorrenciaDinheiro(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDinheiroDeon bopObjetoOcorrDinheiroDeon, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOODD.CD_DINHEIRO_DEON ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ( SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA ) AS AGENCIA_RECEBIMENTO, "
                + " ( SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL ) AS UNIDADE_RECEBIMENTO, "
                + " FU_CONCATENA_AGENCIA(BO.NR_BOP, BO.TIPO_BOP) AGENCIA_REGISTRO, "
                + " FU_CONCATENA_UNIDADE_POLICIAL(BO.NR_BOP, BO.TIPO_BOP)  "
                + " UNIDADE_REGISTRO, BEOD.CD_UF, BMG.NM_MUNICIPIO AS DS_CIDADE, BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO, BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJ_OCORR_DINHEIRO_DEON BOODD ON BOODD.TIPO_BOP = BOO.TIPO_BOP AND BOODD.ID_OBJETO = BOO.ID_OBJETO AND BOODD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON ( BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP = BO.NR_BOP AND BOD.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD ON ( BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON ) "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO ) "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON ( BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO ) "
                + " JOIN BOP_BAIRROS_GERAL BBG ON ( BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO ) "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON ( BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR )  ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

//		appendWhereClause(strbfQuery,
//				bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
//				" BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrDinheiroDeon.getDsObservacao(),
                " BOODD.DS_OBSERVACAO LIKE ?  ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    public int getListaOcorrenciaDinheiroCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDinheiroDeon bopObjetoOcorrDinheiroDeon, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaDinheiro(bopOcorrenciaObjeto, bopObjetoOcorrDinheiroDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.contarQuery(strbfQuery);

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//		if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDinheiroDeon.getDsObservacao())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDinheiroDeon.getDsObservacao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_183: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Dinheiro".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrDinheiroDeon
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaDinheiroPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDinheiroDeon bopObjetoOcorrDinheiroDeon, int inicio,
            int fim, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaDinheiro(bopOcorrenciaObjeto, bopObjetoOcorrDinheiroDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.paginarQuery(strbfQuery, inicio, fim);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//		if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDinheiroDeon.getDsObservacao())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDinheiroDeon.getDsObservacao() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_183: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    //Documento
    // Documento com Translate
    public int getQuantidadeObjetoDocumento( //x
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {

        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT( BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJ_OCORR_DOCUMENTO_DEON BOODD on BOODD.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getBopTipoDocumento(),
                " BOODD.ID_TIPO_DOCUMENTO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDocumento.getNrDocumento(),
                " BOODD.NR_DOCUMENTO like ? ");
        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrDocumento.getNmTitularDoc(),
                " ( translate( BOODD.NM_TITULAR_DOC, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter(parameters++, bopObjetoOcorrDocumento
                    .getBopTipoDocumento().getIdTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_186: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaDocumento(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT distinct BOOCD.ID_DOCUMENTO ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP,  "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BO.CD_AGENCIA) AS  AGENCIA_RECEBIMENTO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BO.CD_UNID_POLICIAL) AS  UNIDADE_RECEBIMENTO, "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BOA.CD_AGENCIA  AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  AGENCIA_REGISTRO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BOA.CD_UNID_POLICIAL AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  UNIDADE_REGISTRO, "
                + " BEOD.CD_UF,  BMG.NM_MUNICIPIO AS DS_CIDADE,  BBG.NM_BAIRRO AS DS_BAIRRO,   	BTAOD.DS_TIPO_ACAO_OBJETO,   BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO ON (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJ_OCORR_DOCUMENTO_DEON BOOCD on ( BOOCD.NR_BOP =  BOO.NR_BOP AND BOOCD.TIPO_BOP =  BOO.TIPO_BOP  AND BOOCD.ID_OBJETO = BOO.ID_OBJETO) "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD   ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO )  "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON (  BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO )  "
                + " JOIN BOP_BAIRROS_GERAL BBG ON (  BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO )  "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON (  BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR ) AND BOA.DS_OCORRENCIA IS NOT NULL ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getBopTipoDocumento(),
                " BOOCD.ID_TIPO_DOCUMENTO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDocumento.getNrDocumento(),
                " BOOCD.NR_DOCUMENTO like ? ");
        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrDocumento.getNmTitularDoc(),
                " ( translate( BOOCD.NM_TITULAR_DOC, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;
    }

    public int getListaOcorrenciaDocumentoCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaDocumento(bopOcorrenciaObjeto, bopObjetoOcorrDocumento, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter(parametros++, bopObjetoOcorrDocumento
                    .getBopTipoDocumento().getIdTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_193: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Documento", utilizando o TRANSLATE para retirar acentuação.
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrDocumento
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaDocumentoPaginado(//x
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento,
            int inicio, int fim, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaDocumento(bopOcorrenciaObjeto, bopObjetoOcorrDocumento, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter(parametros++, bopObjetoOcorrDocumento
                    .getBopTipoDocumento().getIdTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_187: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Documento
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select count(distinct chamado.id.nrChamado) from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrDocumentos) as documento ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getBopTipoDocumento(),
                " documento.bopTipoDocumento = :bopTipoDocumento ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDocumento.getNrDocumento(),
                " documento.nrDocumento like :nrDocumento ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getNmTitularDoc(),
                " documento.nmTitularDoc like :nmTitularDoc ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter("bopTipoDocumento",
                    bopObjetoOcorrDocumento.getBopTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter("nrDocumento",
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter("nmTitularDoc",
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_184: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Documento".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrDocumento
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<BopOcorrencia> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento,
            int indexPaginacao, int rows, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select distinct o from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrDocumentos) as documento ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getBopTipoDocumento(),
                " documento.bopTipoDocumento = :bopTipoDocumento ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDocumento.getNrDocumento(),
                " documento.nrDocumento like :nrDocumento ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getNmTitularDoc(),
                " documento.nmTitularDoc like :nmTitularDoc ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter("bopTipoDocumento",
                    bopObjetoOcorrDocumento.getBopTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter("nrDocumento",
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter("nmTitularDoc",
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            return (List<BopOcorrencia>) query.setFirstResult(indexPaginacao)
                    .setMaxResults(rows).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_185: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Drogas
    public int getQuantidadeObjetoDroga(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDroga bopObjetoOcorrDroga, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT( BCO.NR_CHAMADO) "
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_DROGA BOOD ON BOOD.TIPO_BOP = BOO.TIPO_BOP AND BOOD.ID_OBJETO = BOO.ID_OBJETO AND BOOD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDroga.getDsObservacao(),
                " BOOD.DS_OBSERVACAO LIKE ? ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDroga.getDsObservacao())) {
            query.setParameter(parametros,
                    "%" + bopObjetoOcorrDroga.getDsObservacao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_188: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    private StringBuffer getQueryOcorrenciaDroga(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDroga bopObjetoOcorrDroga, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOOD.ID_DROGA ID_OBJETO, BO.DT_FATO, BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ( SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA ) AS AGENCIA_RECEBIMENTO, "
                + " ( SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL ) AS UNIDADE_RECEBIMENTO, "
                + " FU_CONCATENA_AGENCIA(BO.NR_BOP, BO.TIPO_BOP) AGENCIA_REGISTRO, "
                + " FU_CONCATENA_UNIDADE_POLICIAL(BO.NR_BOP, BO.TIPO_BOP)  "
                + " UNIDADE_REGISTRO, BEOD.CD_UF, BMG.NM_MUNICIPIO AS DS_CIDADE, BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO, BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJETO_OCORR_DROGA BOOD ON BOOD.TIPO_BOP = BOO.TIPO_BOP AND BOOD.ID_OBJETO = BOO.ID_OBJETO AND BOOD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON ( BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP = BO.NR_BOP AND BOD.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD ON ( BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON ) "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO ) "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON ( BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO ) "
                + " JOIN BOP_BAIRROS_GERAL BBG ON ( BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO ) "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON ( BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR )  ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        //appendWhereClause(strbfQuery,
        //		bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
        //		" BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDroga.getDsObservacao(),
                " BOOD.DS_OBSERVACAO LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    public int getListaOcorrenciaDrogaCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDroga bopObjetoOcorrDroga, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaDroga(bopOcorrenciaObjeto, bopObjetoOcorrDroga, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//		if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDroga.getDsObservacao())) {
            query.setParameter(parametros,
                    "%" + bopObjetoOcorrDroga.getDsObservacao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_189: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Drogas".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrDroga
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaDrogaPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDroga bopObjetoOcorrDroga, int inicio, int fim,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaDroga(bopOcorrenciaObjeto, bopObjetoOcorrDroga, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//		if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDroga.getDsObservacao())) {
            query.setParameter(parametros,
                    "%" + bopObjetoOcorrDroga.getDsObservacao() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_189: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    // Eletrônico com Translate Telefone
    public int getQuantidadeObjetoTelefone(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT( BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJETO_OCORR_ELETRO BOOE on BOOE.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OBJETO_OCORR_ELETRO_DEON BOOED on BOOED.ID_OBJETO = BOO.ID_OBJETO "
                + " LEFT JOIN  BOP_OBJ_OCOR_ELETRO_CHIPS_DEON BOOECD ON BOOECD.ID_ELETRO_DEON = BOOED.ID_ELETRO_DEON "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrEletro.getNmProprietario(),
                " ( translate( BOOE.NM_PROPRIETARIO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrSerial(),
                " BOOE.NR_SERIAL like ? ");

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrLinha(),
                    " BOOECD.NR_LINHA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOE.CD_MARCA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getDsImei(),
                    " BOOECD.DS_IMEI like ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getNmModelo(),
                    " BOOED.NM_MODELO like ? ");
        }

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter(parameters++, bopObjetoOcorrEletro.getNrLinha());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter(parameters++, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter(parameters++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter(parameters++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_176: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaTelefone(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOOE.ID_ELETRO ID_OBJETO, "
                + "         BO.DT_FATO, "
                + "         BO.DT_CRIACAO, "
                + "         BCO.NR_CHAMADO, "
                + "         BOI.DS_INCIDENTE, "
                + "         BOI.ID_INCIDENTE_PAI, "
                + "         BOI.TP_INCIDENTE, "
                + "         BO.NR_BOP, "
                + "         BO.TIPO_BOP, "
                + "         (SELECT BOP_AGENCIA.DS_AGENCIA "
                + "            FROM BOP_AGENCIA "
                + "           WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA) "
                + "            AS AGENCIA_RECEBIMENTO, "
                + "         (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL "
                + "            FROM BOP_UNIDADE_POLICIAL "
                + "           WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = "
                + "                    BO.CD_UNID_POLICIAL) "
                + "            AS UNIDADE_RECEBIMENTO, "
                + "         (SELECT BOP_AGENCIA.DS_AGENCIA "
                + "            FROM BOP_AGENCIA "
                + "           WHERE     BOP_AGENCIA.CD_AGENCIA = BOA.CD_AGENCIA "
                + "                 AND BOA.DS_OCORRENCIA IS NOT NULL "
                + "                 AND ROWNUM = 1) "
                + "            AS AGENCIA_REGISTRO, "
                + "         (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL "
                + "            FROM BOP_UNIDADE_POLICIAL "
                + "           WHERE     BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = "
                + "                        BOA.CD_UNID_POLICIAL "
                + "                 AND BOA.DS_OCORRENCIA IS NOT NULL "
                + "                 AND ROWNUM = 1) "
                + "            AS UNIDADE_REGISTRO, "
                + "         BEOD.CD_UF, "
                + "         BMG.NM_MUNICIPIO AS DS_CIDADE, "
                + "         BBG.NM_BAIRRO AS DS_BAIRRO, "
                + "         BTAOD.DS_TIPO_ACAO_OBJETO, "
                + "         BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + "         BEOD.DS_LOGRADOURO DS_LOGRADOURO, "
                + "         BEOD.NR_NUMERO, "
                + "         BEOD.DS_COMPLEMENTO, "
                + "         BTL.DS_TIPO_LOCAL, "
                + "         DS_MARCA, "
                + "         BOOED.NM_MODELO, "
                + "         BOOED.DS_OBSERVACAO, "
                + "         NULL TIPO, "
                + "         NULL NR_ANO, "
                + "         NULL CD_COR, "
                + "         NULL NR_PLACA, "
                + "         NULL NR_RENAVAM, "
                + "         NULL NR_CHASS, "
                + "         NULL NR_CALIBRE, "
                + "         NULL NR_SERIE, "
                + "         NULL DS_TIPO_FABRICACAO, "
                + "         NULL ESPECIE, "
                + "         NULL FL_SERIE_ILEGIVEL, "
                + "         NULL FL_SERIE_RASPADO, "
                + "   	   NULL NR_PLACA_APARENTE_FALSA "
                + "    FROM BOP_CHAMADOS BC "
                + "         JOIN BOP_CHAMADO_OCORRENCIA BCO "
                + "            ON BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + "         JOIN BOP_OCORRENCIA BO "
                + "            ON (    BO.NR_BOP = BCO.NR_BOP "
                + "                AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + "         JOIN BOP_TIPO_LOCAL BTL "
                + "            ON (BTL.CD_TIPO_LOCAL = BO.CD_TIPO_LOCAL) "
                + "         JOIN BOP_INCIDENTE BOI "
                + "            ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + "         JOIN BOP_OCORRENCIA_OBJETOS BOO "
                + "            ON (    BO.NR_BOP = BOO.NR_BOP "
                + "                AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + "         JOIN BOP_OBJETO_OCORR_ELETRO BOOE "
                + "            ON (    BOOE.NR_BOP = BOO.NR_BOP "
                + "                AND BOOE.TIPO_BOP = BOO.TIPO_BOP "
                + "                AND BOOE.ID_OBJETO = BOO.ID_OBJETO) "
                + "         JOIN BOP_MARCA_MAT_APREENDIDO BMMA "
                + "            ON (BMMA.CD_MARCA = BOOE.CD_MARCA) "
                + "         JOIN BOP_OBJETO_OCORR_ELETRO_DEON BOOED "
                + "            ON BOOED.ID_ELETRO = BOOE.ID_ELETRO "
                + "         LEFT JOIN BOP_OBJ_OCOR_ELETRO_CHIPS_DEON BOOECD "
                + "            ON BOOECD.ID_ELETRO_DEON = BOOED.ID_ELETRO_DEON "
                + "         JOIN BOP_OCORRENCIA_AGENCIA BOA "
                + "            ON (    BOA.NR_BOP = BO.NR_BOP "
                + "                AND BOA.TIPO_BOP = BO.TIPO_BOP) "
                + "         JOIN BOP_OCORRENCIA_DEON BOD "
                + "            ON (    BOD.NR_BOP = BO.NR_BOP "
                + "                AND BOD.TIPO_BOP = BO.TIPO_BOP) "
                + "         JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD "
                + "            ON (BEOD.ID_ENDERECO_OCORRENCIA_DEON = "
                + "                   BOD.ID_ENDERECO_OCORRENCIA_DEON) "
                + "         JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD "
                + "            ON (BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO) "
                + "         JOIN BOP_MUNICIPIOS_GERAL BMG "
                + "            ON (    BMG.CD_UF = BEOD.CD_UF "
                + "                AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO) "
                + "         JOIN BOP_BAIRROS_GERAL BBG "
                + "            ON (    BBG.CD_UF = BEOD.CD_UF "
                + "                AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO "
                + "                AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO) "
                + "         JOIN BOP_TIPO_MAT_APREENDIDO BTMA "
                + "            ON     (BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR) "
                + "AND BOA.DS_OCORRENCIA IS NOT NULL  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrEletro.getNmProprietario(),
                " ( translate( BOOE.NM_PROPRIETARIO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrSerial(),
                " BOOE.NR_SERIAL like ? ");

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrLinha(),
                    " BOOECD.NR_LINHA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOE.CD_MARCA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getDsImei(),
                    " BOOECD.DS_IMEI like ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getNmModelo(),
                    " BOOED.NM_MODELO like ? ");
        }

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;
    }

    public int getListaOcorrenciaTelefoneCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaTelefone(bopOcorrenciaObjeto, bopObjetoOcorrEletro, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter(parametros++, bopObjetoOcorrEletro.getNrLinha());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter(parametros++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter(parametros++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        List<ConsultaOcorrenciaTransient> listaRetorno;
        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_177: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Eletro", utilizando o TRANSLATE para retirar acentuação.
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrEletro
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaTelefonePaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, int inicio,
            int fim, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        int parametros = 1;
        clearCache();
        StringBuffer strbfQuery = this.getQueryOcorrenciaTelefone(bopOcorrenciaObjeto, bopObjetoOcorrEletro, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter(parametros++, bopObjetoOcorrEletro.getNrLinha());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter(parametros++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter(parametros++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_177: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    //Municao
    //Municao
    public int getQuantidadeObjetoMunicao(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrMunicaoDeon bopObjetoOcorrMunicaoDeon,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT( BCO.NR_CHAMADO) "
                + "FROM  BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_MUNICAO_DEON BOOMD ON BOOMD.TIPO_BOP = BOO.TIPO_BOP AND BOOMD.ID_OBJETO = BOO.ID_OBJETO AND BOOMD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    "  BOO.ID_TIPO_ACAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon(),
                    " BOOMD.CD_MARCA_MUNICAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma(),
                    " BOOMD.CD_CALIBRE = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao(),
                    " BOOMD.CD_TIPO_MUNICAO = ? ");
        }

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao());
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_198: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaMunicao(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrMunicaoDeon bopObjetoOcorrMunicaoDeon, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOOMD.ID_MUNICAO_DEON ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ( SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA ) AS AGENCIA_RECEBIMENTO, "
                + " ( SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL ) AS UNIDADE_RECEBIMENTO, "
                + " FU_CONCATENA_AGENCIA(BO.NR_BOP, BO.TIPO_BOP) AGENCIA_REGISTRO, "
                + " FU_CONCATENA_UNIDADE_POLICIAL(BO.NR_BOP, BO.TIPO_BOP)  "
                + " UNIDADE_REGISTRO, BEOD.CD_UF, BMG.NM_MUNICIPIO AS DS_CIDADE, BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO, BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJETO_OCORR_MUNICAO_DEON BOOMD ON BOOMD.TIPO_BOP = BOO.TIPO_BOP AND BOOMD.ID_OBJETO = BOO.ID_OBJETO AND BOOMD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON ( BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP = BO.NR_BOP AND BOD.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD ON ( BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON ) "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO ) "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON ( BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO ) "
                + " JOIN BOP_BAIRROS_GERAL BBG ON ( BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO ) "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON ( BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR )  ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    "  BOO.ID_TIPO_ACAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon(),
                    " BOOMD.CD_MARCA_MUNICAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma(),
                    " BOOMD.CD_CALIBRE = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao(),
                    " BOOMD.CD_TIPO_MUNICAO = ? ");
        }

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    public int getListaOcorrenciaMunicaoCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrMunicaoDeon bopObjetoOcorrMunicaoDeon, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {

        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaMunicao(bopOcorrenciaObjeto, bopObjetoOcorrMunicaoDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao());
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_199: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Municao".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrMunicaoDeon
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaMunicaoPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrMunicaoDeon bopObjetoOcorrMunicaoDeon, int inicio,
            int fim, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaMunicao(bopOcorrenciaObjeto, bopObjetoOcorrMunicaoDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao());
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_199: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Nota Fiscal com Translate
    public int getQuantidadeObjetoNotaFiscal(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT( BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJ_OCORR_NOTA_FISCAL_DEON BOONFD on BOONFD.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrNotaFiscal.getNmPortador(),
                " ( translate( BOONFD.NM_PORTADOR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNrCnpj(),
                " BOONFD.NR_CNPJ like ? ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parameters++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parameters++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parameters++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parameters++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parameters++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parameters++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parameters++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_202: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaNotaFiscal(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT distinct BOONFD.ID_NOTA ID_OBJETO, BO.DT_FATO ,  BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP,  "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BO.CD_AGENCIA) AS  AGENCIA_RECEBIMENTO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BO.CD_UNID_POLICIAL) AS  UNIDADE_RECEBIMENTO, "
                + " (SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE  BOP_AGENCIA.CD_AGENCIA  = BOA.CD_AGENCIA  AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  AGENCIA_REGISTRO, "
                + " (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE  BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL  = BOA.CD_UNID_POLICIAL AND BOA.DS_OCORRENCIA IS NOT NULL AND ROWNUM = 1) AS  UNIDADE_REGISTRO, "
                + " BEOD.CD_UF,  BMG.NM_MUNICIPIO AS DS_CIDADE,  BBG.NM_BAIRRO AS DS_BAIRRO,   BTAOD.DS_TIPO_ACAO_OBJETO,   BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO ON (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJ_OCORR_NOTA_FISCAL_DEON BOONFD on BOONFD.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD   ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO )  "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON (  BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO )  "
                + " JOIN BOP_BAIRROS_GERAL BBG ON (  BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO )  "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON (  BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR ) AND BOA.DS_OCORRENCIA IS NOT NULL ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrNotaFiscal.getNmPortador(),
                " ( translate( BOONFD.NM_PORTADOR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNrCnpj(),
                " BOONFD.NR_CNPJ like ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    public int getListaOcorrenciaNotaFiscalCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaNotaFiscal(bopOcorrenciaObjeto, bopObjetoOcorrNotaFiscal, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_203: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "NotaFiscal", utilizando o TRANSLATE para retirar acentuação.
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrNotaFiscal
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaNotaFiscalPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal,
            int inicio, int fim, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaNotaFiscal(bopOcorrenciaObjeto, bopObjetoOcorrNotaFiscal, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_203: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Veículo
    public int getQuantidadeObjetoVeiculo(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;

        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT COUNT( BO.DT_CRIACAO) "
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN  BOP_OBJETO_OCORR_VEICULO BOOV ON BOOV.TIPO_BOP = BOO.TIPO_BOP AND BOOV.ID_OBJETO = BOO.ID_OBJETO AND BOOV.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_VEICULO_DEON BOOVD ON BOOVD.TIPO_BOP = BOOV.TIPO_BOP AND BOOVD.NR_BOP = BOOV.NR_BOP AND BOOVD.ID_OBJETO = BOOV.ID_OBJETO AND BOOVD.ID_VEICULO = BOOV.ID_VEICULO "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }
        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrPlaca(),
                "  BOOV.NR_PLACA LIKE ? ");
        if (bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOV.CD_MARCA = ? ");
        }
        if (bopObjetoOcorrVeiculo.getBopModeloMatApreendido() != null
                && bopObjetoOcorrVeiculo.getBopModeloMatApreendido().getId() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo(),
                    " BOOV.CD_MODELO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrAno(),
                " BOOV.NR_ANO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor(),
                " BOOVD.CD_COR = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrChassi(),
                " BOOV.NR_CHASSI LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrRenavam(),
                " BOOV.NR_RENAVAM LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlaca())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlaca()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopModeloMatApreendido())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrAno())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo.getNrAno());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopObjetoOcorrVeiculoDeon().getVwCor().getCdCor());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrChassi())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrChassi()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrRenavam())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrRenavam()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_204: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaVeiculo(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                "		SELECT DISTINCT BOOV.ID_VEICULO ID_OBJETO, "
                + "        BO.DT_FATO, "
                + "        BO.DT_CRIACAO, "
                + "        BCO.NR_CHAMADO, "
                + "        BOI.DS_INCIDENTE, "
                + "        BOI.ID_INCIDENTE_PAI, "
                + "        BOI.TP_INCIDENTE, "
                + "        BO.NR_BOP, "
                + "        BO.TIPO_BOP, "
                + "        (SELECT BOP_AGENCIA.DS_AGENCIA "
                + "           FROM BOP_AGENCIA "
                + "          WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA) "
                + "           AS AGENCIA_RECEBIMENTO, "
                + "        (SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL "
                + "           FROM BOP_UNIDADE_POLICIAL "
                + "          WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = "
                + "                   BO.CD_UNID_POLICIAL) "
                + "           AS UNIDADE_RECEBIMENTO, "
                + "        FU_CONCATENA_AGENCIA (BO.NR_BOP, BO.TIPO_BOP) "
                + "           AGENCIA_REGISTRO, "
                + "        FU_CONCATENA_UNIDADE_POLICIAL (BO.NR_BOP, BO.TIPO_BOP) "
                + "           UNIDADE_REGISTRO, "
                + "        BEOD.CD_UF, "
                + "        BMG.NM_MUNICIPIO AS DS_CIDADE, "
                + "        BBG.NM_BAIRRO AS DS_BAIRRO, "
                + "        BTAOD.DS_TIPO_ACAO_OBJETO, "
                + "        BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + "        BEOD.DS_LOGRADOURO DS_LOGRADOURO, "
                + "        BEOD.NR_NUMERO, "
                + "        BEOD.DS_COMPLEMENTO, "
                + "        BTL.DS_TIPO_LOCAL, "
                + "        DS_MARCA, "
                + "        BMMAP.DS_MODELO NM_MODELO, "
                + "        BOO.DS_OBSERVACAO, "
                + "        DECODE( BOOVD.ID_TIPO_VEICULO_DEON, "
                + "			1, 'BICICLETA', 2, 'CICLOMOTOR' , 3, 'MOTOCICLETA', 4, 'MOTONETA', 5, 'TRICICLO', 6, 'AUTOMOVEL', 7, 'MICRO-ONIBUS', 8, 'ONIBUS', 9, 'BONDE', 10, 'REBOQUE', 11, 'SEMI-REBOQUE', 12, 'CHARRETE', 13, 'CAMIONETA', 14, 'CAMINHAO', 15, 'CARROCA', "
                + "			16, 'CARRO DE MAO', 17, 'CAMINHAO TRATOR', 18, 'TRATOR DE RODAS', 19, 'TRATOR ESTEIRAS', 20, 'TRATOR MISTO', 21, 'QUADRICICLO', 22, 'CAMINHONETE', 23, 'SIDE-CAR', 24, 'UTILITARIO', 25, 'MOTOR-CASA', 26, 'OUTRO')  TIPO, "
                + "        BOOV.NR_ANO NR_ANO, "
                + "        DS_COR CD_COR, "
                + "        BOOV.NR_PLACA NR_PLACA, "
                + "        BOOV.NR_PLACA_APARENTE_FALSA NR_PLACA_APARENTE_FALSA, "
                + "        BOOV.NR_RENAVAM NR_RENAVAM, "
                + "        BOOV.NR_CHASSI NR_CHASS, "
                + "        NULL NR_CALIBRE, "
                + "        NULL NR_SERIE, "
                + "        NULL DS_TIPO_FABRICACAO, "
                + "        NULL ESPECIE, "
                + "        NULL FL_SERIE_ILEGIVEL, "
                + "        NULL FL_SERIE_RASPADO "
                + "   FROM BOP_OCORRENCIA_OBJETOS BOO "
                + "        JOIN BOP_OCORRENCIA BO "
                + "           ON     BOO.TIPO_BOP = BO.TIPO_BOP "
                + "              AND BOO.NR_BOP = BO.NR_BOP "
                + "        JOIN BOP_TIPO_LOCAL BTL "
                + "           ON (BTL.CD_TIPO_LOCAL = BO.CD_TIPO_LOCAL) "
                + "        JOIN BOP_INCIDENTE BOI "
                + "           ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + "        JOIN BOP_OBJETO_OCORR_VEICULO BOOV "
                + "           ON     BOOV.TIPO_BOP = BOO.TIPO_BOP "
                + "              AND BOOV.ID_OBJETO = BOO.ID_OBJETO "
                + "              AND BOOV.NR_BOP = BOO.NR_BOP "
                + "        JOIN BOP_MARCA_MAT_APREENDIDO BMMA "
                + "           ON (BMMA.CD_MARCA = BOOV.CD_MARCA) "
                + "        JOIN BOP_MODELO_MAT_APREENDIDO BMMAP "
                + "           ON (    BMMAP.CD_MODELO = BOOV.CD_MODELO "
                + "               AND BMMAP.CD_MARCA = BOOV.CD_MARCA) "
                + "        JOIN BOP_OBJETO_OCORR_VEICULO_DEON BOOVD "
                + "           ON     BOOVD.TIPO_BOP = BOOV.TIPO_BOP "
                + "              AND BOOVD.NR_BOP = BOOV.NR_BOP "
                + "              AND BOOVD.ID_OBJETO = BOOV.ID_OBJETO "
                + "              AND BOOVD.ID_VEICULO = BOOV.ID_VEICULO "
                + "        JOIN VW_BOP_CORES ON BOOVD.CD_COR = VW_BOP_CORES.CD_COR "
                + "        JOIN BOP_CHAMADO_OCORRENCIA BCO "
                + "           ON     BCO.TIPO_BOP = BO.TIPO_BOP "
                + "              AND BCO.NR_BOP = BO.NR_BOP "
                + "        JOIN BOP_OCORRENCIA_AGENCIA BOA "
                + "           ON (    BOA.NR_BOP = BO.NR_BOP "
                + "               AND BOA.TIPO_BOP = BO.TIPO_BOP) "
                + "        JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD "
                + "           ON (BOA.CD_OCORRENCIA_AGENCIA = "
                + "                  BOAD.CD_OCORRENCIA_AGENCIA) "
                + "        JOIN BOP_OCORRENCIA_DEON BOD "
                + "           ON (    BOD.NR_BOP = BO.NR_BOP "
                + "               AND BOD.TIPO_BOP = BO.TIPO_BOP) "
                + "        JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD "
                + "           ON (BEOD.ID_ENDERECO_OCORRENCIA_DEON = "
                + "                  BOD.ID_ENDERECO_OCORRENCIA_DEON) "
                + "        JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD "
                + "           ON (BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO) "
                + "        JOIN BOP_MUNICIPIOS_GERAL BMG "
                + "           ON (    BMG.CD_UF = BEOD.CD_UF "
                + "               AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO) "
                + "        JOIN BOP_BAIRROS_GERAL BBG "
                + "           ON (    BBG.CD_UF = BEOD.CD_UF "
                + "               AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO "
                + "               AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO) "
                + "        JOIN BOP_TIPO_MAT_APREENDIDO BTMA "
                + "           ON (BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR)  ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        //if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
        //	appendWhereClause(strbfQuery, bopOcorrenciaObjeto
        //			.getVwDeonTipoObjeto().getIdTipoObjeto(),
        //			" BOO.CD_TIPO_MAT_APR = ? ");
        //}
        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrPlaca(),
                "  BOOV.NR_PLACA LIKE ? ");

        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrPlacaAparenteFalsa(),
                "  BOOV.NR_PLACA_APARENTE_FALSA LIKE ? ");

        if (bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOV.CD_MARCA = ? ");
        }
        if (bopObjetoOcorrVeiculo.getBopModeloMatApreendido() != null
                && bopObjetoOcorrVeiculo.getBopModeloMatApreendido().getId() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo(),
                    " BOOV.CD_MODELO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrAno(),
                " BOOV.NR_ANO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor(),
                " BOOVD.CD_COR = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrChassi(),
                " BOOV.NR_CHASSI LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrRenavam(),
                " BOOV.NR_RENAVAM LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;
    }

    public int getListaOcorrenciaVeiculoCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaVeiculo(bopOcorrenciaObjeto, bopObjetoOcorrVeiculo, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//				query.setParameter(parametros++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
//			}
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlaca())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlaca()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlacaAparenteFalsa())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlacaAparenteFalsa()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopModeloMatApreendido())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrAno())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo.getNrAno());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopObjetoOcorrVeiculoDeon().getVwCor().getCdCor());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrChassi())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrChassi()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrRenavam())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrRenavam()));
        }

        try {

            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();

        } catch (Exception e) {
            throw new BusinessException("012_205: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Veiculo".
     *
     * @param bopOcorrenciaObjeto
     * @param BopObjetoOcorrVeiculo
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaVeiculoPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo, int inicio, int fim,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaVeiculo(bopOcorrenciaObjeto, bopObjetoOcorrVeiculo, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//				query.setParameter(parametros++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
//			}
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlaca())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlaca()));
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlacaAparenteFalsa())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlacaAparenteFalsa()));
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopModeloMatApreendido())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrAno())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo.getNrAno());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopObjetoOcorrVeiculoDeon().getVwCor().getCdCor());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrChassi())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrChassi()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrRenavam())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrRenavam()));
        }

        try {

            return query.getResultList();

        } catch (Exception e) {
            throw new BusinessException("012_205: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    //Geral
    public int getQuantidadeObjetoGeral(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrGeral bopObjetoOcorrGeral, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT( BO.DT_CRIACAO)"
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_GERAL BOOG ON BOOG.TIPO_BOP = BOO.TIPO_BOP AND BOOG.ID_OBJETO = BOO.ID_OBJETO AND BOOG.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }

        appendWhereClause(strbfQuery, bopObjetoOcorrGeral.getDsObservacao(),
                " BOOG.DS_OBSERVACAO LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.DT_GERACAO DESC ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrGeral.getDsObservacao())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrGeral.getDsObservacao()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_172: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private StringBuffer getQueryOcorrenciaGeral(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrGeral bopObjetoOcorrGeral,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {
        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT BOOG.ID_OBJETO_GERAL ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ( SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA ) AS AGENCIA_RECEBIMENTO, "
                + " ( SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL ) AS UNIDADE_RECEBIMENTO, "
                + " FU_CONCATENA_AGENCIA(BO.NR_BOP, BO.TIPO_BOP) AGENCIA_REGISTRO, "
                + " FU_CONCATENA_UNIDADE_POLICIAL(BO.NR_BOP, BO.TIPO_BOP)  "
                + " UNIDADE_REGISTRO, BEOD.CD_UF, BMG.NM_MUNICIPIO AS DS_CIDADE, BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO, BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + " NULL  DS_LOGRADOURO, "
                + " NULL  NR_NUMERO, "
                + " NULL DS_COMPLEMENTO, "
                + " NULL DS_TIPO_LOCAL, "
                + " NULL DS_MARCA, "
                + " NULL  NM_MODELO, "
                + " NULL DS_OBSERVACAO, "
                + " NULL TIPO, "
                + " NULL NR_ANO, "
                + " NULL  CD_COR, "
                + " NULL  NR_PLACA, "
                + " NULL  NR_RENAVAM, "
                + " NULL NR_CHASS, "
                + " NULL NR_CALIBRE, "
                + " NULL NR_SERIE, "
                + " NULL DS_TIPO_FABRICACAO, "
                + " NULL ESPECIE, "
                + " NULL FL_SERIE_ILEGIVEL, "
                + " NULL FL_SERIE_RASPADO,  "
                + " NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJETO_OCORR_GERAL BOOG ON BOOG.TIPO_BOP = BOO.TIPO_BOP AND BOOG.ID_OBJETO = BOO.ID_OBJETO AND BOOG.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON ( BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP = BO.NR_BOP AND BOD.TIPO_BOP = BO.TIPO_BOP ) "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD ON ( BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON ) "
                + " JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO ) "
                + " JOIN BOP_MUNICIPIOS_GERAL BMG ON ( BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO ) "
                + " JOIN BOP_BAIRROS_GERAL BBG ON ( BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO ) "
                + " JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON ( BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR )  ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

        //if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
        //	appendWhereClause(strbfQuery, bopOcorrenciaObjeto
        //			.getVwDeonTipoObjeto().getIdTipoObjeto(),
        //			" BOO.CD_TIPO_MAT_APR = ? ");
        //}
        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }

        appendWhereClause(strbfQuery, bopObjetoOcorrGeral.getDsObservacao(),
                " BOOG.DS_OBSERVACAO LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;
    }

    public int getListaOcorrenciaGeralCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrGeral bopObjetoOcorrGeral,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaGeral(bopOcorrenciaObjeto, bopObjetoOcorrGeral, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.contarQuery(strbfQuery);

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//				query.setParameter(parametros++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
//			}
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrGeral.getDsObservacao())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrGeral.getDsObservacao()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_173: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Geral".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrGeral
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaGeralPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrGeral bopObjetoOcorrGeral, int inicio, int fim,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        this.connector = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaGeral(bopOcorrenciaObjeto, bopObjetoOcorrGeral, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);
        this.paginarQuery(strbfQuery, inicio, fim);

        Query query = this.em.createNativeQuery(strbfQuery.toString(), ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }

//			if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
//				query.setParameter(parametros++, bopOcorrenciaObjeto
//						.getVwDeonTipoObjeto().getIdTipoObjeto());
//			}
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrGeral.getDsObservacao())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrGeral.getDsObservacao()));
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_173: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Cheque
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select count(distinct chamado.id.nrChamado) from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrCheques) as cheque ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNmTitular(),
                " cheque.nmTitular like :nmTitular ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getBopBancoDeon(),
                " cheque.bopBancoDeon.nmBanco like :nmBanco ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrAgencia(),
                " cheque.nrAgencia like :nrAgencia ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrConta(),
                " cheque.nrConta like :nrConta ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter("nmTitular",
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter("nmBanco", "%"
                    + bopObjetoOcorrCheque.getBopBancoDeon().getNmBanco() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter("nrAgencia",
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter("nrConta",
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_190: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Cheque".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrCheque
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<BopOcorrencia> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque, int indexPaginacao,
            int rows, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select distinct o from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrCheques) as cheque ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNmTitular(),
                " cheque.nmTitular like :nmTitular ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getBopBancoDeon(),
                " cheque.bopBancoDeon.nmBanco like :nmBanco ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrAgencia(),
                " cheque.nrAgencia like :nrAgencia ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrConta(),
                " cheque.nrConta like :nrConta ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter("nmTitular",
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter("nmBanco", "%"
                    + bopObjetoOcorrCheque.getBopBancoDeon().getNmBanco() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter("nrAgencia",
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter("nrConta",
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            return (List<BopOcorrencia>) query.setFirstResult(indexPaginacao)
                    .setMaxResults(rows).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_191: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Cartão
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select count(distinct chamado.id.nrChamado) from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrCartoes) as cartao ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.bopTipoMatApreendido = :bopTipoMatApreendido ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmTitular(),
                " cartao.nmTitular like :nmTitular ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrTipo(),
                " cartao.nrTipo = :nrTipo ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getBopBancoDeon(),
                " cartao.bopBancoDeon.nmBanco like :nmBanco ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrAgencia(),
                " cartao.nrAgencia like :nrAgencia ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrConta(),
                " cartao.nrConta like :nrConta ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmBandeira(),
                " cartao.nmBandeira like :nmBandeira ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrCartao(),
                " cartao.nrCartao like :nrCartao ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("bopTipoMatApreendido",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter("nmTitular",
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter("nrTipo", bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter("nmBanco", "%"
                    + bopObjetoOcorrCartao.getBopBancoDeon().getNmBanco() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter("nrAgencia",
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter("nrConta",
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter("nmBandeira",
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter("nrCartao",
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_194: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "Cartao".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrCartao
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<BopOcorrencia> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao, int indexPaginacao,
            int rows) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select distinct o from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrCartoes) as cartao ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmTitular(),
                " cartao.nmTitular like :nmTitular ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrTipo(),
                " cartao.nrTipo = :nrTipo ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getBopBancoDeon(),
                " cartao.bopBancoDeon.nmBanco like :nmBanco ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrAgencia(),
                " cartao.nrAgencia like :nrAgencia ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrConta(),
                " cartao.nrConta like :nrConta ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmBandeira(),
                " cartao.nmBandeira like :nmBandeira ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrCartao(),
                " cartao.nrCartao like :nrCartao ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("bopTipoMatApreendido",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter("nmTitular",
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter("nrTipo", bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter("nmBanco", "%"
                    + bopObjetoOcorrCartao.getBopBancoDeon().getNmBanco() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter("nrAgencia",
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter("nrConta",
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter("nmBandeira",
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter("nrCartao",
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            return (List<BopOcorrencia>) query.setFirstResult(indexPaginacao)
                    .setMaxResults(rows).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_195: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Nota Fiscal
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select count(distinct chamado.id.nrChamado) from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrNotasFiscais) as notaFiscal ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNmPortador(),
                " notaFiscal.nmPortador like :nmPortador ");
        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNrCnpj(),
                " notaFiscal.nrCnpj like :nrCnpj ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter("nmPortador",
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter("nrCnpj",
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_200: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /**
     * Realiza a consulta de todas as ocorrências que possuem algum objeto do
     * tipo "NotaFiscal".
     *
     * @param bopOcorrenciaObjeto
     * @param bopObjetoOcorrNotaFiscal
     *
     * @return Lista de BopOcorrencia
     * @throws BusinessException
     */
    public List<BopOcorrencia> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal,
            int indexPaginacao, int rows) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select distinct o from BopOcorrencia o, "
                + " in (o.bopChamadoOcorrencias) as chamado, "
                + " in (o.bopOcorrenciaObjetos) as obj, "
                + " in (obj.bopObjetoOcorrNotasFiscais) as notaFiscal ");

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " obj.vwDeonTipoObjeto = :vwDeonTipoObjeto ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " obj.bopTipoAcaoObjetoDeon = :bopTipoAcaoObjetoDeon ");

        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNmPortador(),
                " notaFiscal.nmPortador like :nmPortador ");
        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNrCnpj(),
                " notaFiscal.nrCnpj like :nrCnpj ");

        strbfQuery.append(" order by chamado.id.nrChamado desc ");

        Query query = this.em.createQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter("vwDeonTipoObjeto",
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter("bopTipoAcaoObjetoDeon",
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter("nmPortador",
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter("nrCnpj",
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            return (List<BopOcorrencia>) query.setFirstResult(indexPaginacao)
                    .setMaxResults(rows).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_201: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopRuas> getListaRuasByBairro(BopBairro bopBairro)
            throws BusinessException {
        try {
            return (List<BopRuas>) em.createNamedQuery("BopRuas.findByBairro")
                    .setParameter("bairro", bopBairro).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_206: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopRuasGeral> getListaRuasGeralByBairro(BopBairro bopBairro)
            throws BusinessException {
        try {
            return (List<BopRuasGeral>) em
                    .createNamedQuery("BopRuasGeral.findByBairro")
                    .setParameter("bairro", bopBairro).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_207: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    /**
     * Método que finaliza ocorrência para Policia Militar
     *
     * @param bopUnidadePolicial : Deve ser informada a unidade policial Logada
     * @param bopUsuario : Deve ser informado o usuário Logada
     * @throws BusinessException
     */
    public BopOcorrencia finalizarOcorrencia(BopOcorrencia bopOcorrencia,
            BopUsuarios bopUsuario, BopUnidadePolicial bopUnidadePolicial)
            throws BusinessException {

        Query query = null;

        if (bopOcorrencia.getBopOcorrenciaDeon().getIdAutoridadeTitularUnid() == 0) {

            StringBuffer strbfQuery = new StringBuffer(
                    " SELECT BOP_UNIDADE_RESPONSAVEL_DEON.ID_REGISTRO AS ID_AUTORIDADE_TITULAR_UNIDADE "
                    + " FROM BOP_UNIDADE_RESPONSAVEL_DEON JOIN BOP_OCORRENCIA ON (BOP_UNIDADE_RESPONSAVEL_DEON.CD_AGENCIA = BOP_OCORRENCIA.CD_AGENCIA AND "
                    + " BOP_UNIDADE_RESPONSAVEL_DEON.CD_UNID_POLICIAL= BOP_OCORRENCIA.CD_UNID_POLICIAL ) WHERE "
                    + " BOP_OCORRENCIA.NR_BOP = ? "
                    + " AND BOP_OCORRENCIA.TIPO_BOP = ? "
                    + " AND BOP_UNIDADE_RESPONSAVEL_DEON.STATUS_RESPONSAVEL = 'A' AND BOP_UNIDADE_RESPONSAVEL_DEON.CD_FUNCAO = 191 ");

            query = em.createNativeQuery(strbfQuery.toString());

            query.setParameter(1, bopOcorrencia.getId().getNrBop());
            query.setParameter(2, bopOcorrencia.getId().getTipoBop());

            int idAutoridadeUnidade;
            try {

                idAutoridadeUnidade = Integer.parseInt(query.getSingleResult()
                        .toString());

            } catch (NoResultException ex) {

                idAutoridadeUnidade = 0;
            }

            if (idAutoridadeUnidade != 0) {
                bopOcorrencia.getBopOcorrenciaDeon()
                        .setIdAutoridadeTitularUnid(idAutoridadeUnidade);
            }

        }

        boolean dataEntregaNotNull = bopOcorrencia != null
                && bopOcorrencia.getBopOcorrenciaDeon() != null
                && bopOcorrencia.getBopOcorrenciaDeon().getDtEntrega() != null;
        if (bopUnidadePolicial != null && bopUsuario != null
                && dataEntregaNotNull) {
            bopOcorrencia.setBopUnidadePolicial(bopUnidadePolicial);
        }

        bopOcorrencia.setFlSituacaoBop(StatusOcorrencia.ENCERRADO.getId());
        bopOcorrencia.setHrFinalOcorr(this.getSysDate());

        bopOcorrencia = em.merge(bopOcorrencia);

        // if 'repetido' devido à alteração em bop_ocorrencia_deon que era
        // sobrescrita pelo merge em bop_ocorrencia.
        if (bopUnidadePolicial != null && bopUsuario != null
                && dataEntregaNotNull) {
            bopOcorrencia.getBopOcorrenciaDeon().setBopUsuarioRecebedor(
                    bopUsuario);
        }

        try {
            bopOcorrencia.setBopOcorrenciaDeon(em.merge(bopOcorrencia
                    .getBopOcorrenciaDeon().clonar()));

            em.flush();

            /**
             * Desativado temporariamente a inserção de registros para o CIODES
             */
            // this.geraDespachoBO( bopOcorrencia );
            return bopOcorrencia;
        } catch (Exception e) {
            throw new BusinessException("012_208: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    /*
	 * Método que finaliza ocorrência criada pela Policia Civil
     */
    public BopOcorrencia finalizarOcorrencia(BopOcorrencia bopOcorrencia)
            throws BusinessException {
        try {
            return finalizarOcorrencia(bopOcorrencia, null, null);
        } catch (Exception e) {
            throw new BusinessException("012_209: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopOcorrencia devolverOcorrencia(BopOcorrencia bopOcorrencia)
            throws BusinessException {

        try {
            bopOcorrencia.setFlSituacaoBop(StatusOcorrencia.ABERTO.getId());
            bopOcorrencia = em.merge(bopOcorrencia);
            em.flush();

            return bopOcorrencia;
        } catch (Exception e) {
            throw new BusinessException("012_210: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @SuppressWarnings("unused")
    private void geraDespachoBO(BopOcorrencia bopOcorrencia)
            throws BusinessException {

        try {
            Query query = em
                    .createNativeQuery("BEGIN PA_OCORRENCIA.GERA_DESPACHO_BO(?, ?); END;");
            query.setParameter(1, bopOcorrencia.getId().getNrBop());
            query.setParameter(2, bopOcorrencia.getId().getTipoBop());
            query.executeUpdate();
        } catch (Exception e) {
            throw new BusinessException("012_211: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopAgencia> getListAgenciaEnvEspecial()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopAgencia.findAgenciasEnvEspecial")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_212: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VwAgencia> getListVwAgenciaEnvEspecial()
            throws BusinessException {
        try {
            return em.createNamedQuery("VwAgencia.findVwAgenciasEnvEspecial")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_213: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarioUnidadeDeon> getListBopUsuarioUnidadeDeon(
            long cdUnidPolicial) throws BusinessException {
        try {
            return em.createNamedQuery("BopUsuarioUnidadeDeon.findByUnidade")
                    .setParameter("cdUnidPolicial", cdUnidPolicial)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_214: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarios> getListBopUsuarioByUnidadeNotCargo(
            long cdUnidPolicial, long cdCargo) throws BusinessException {
        try {
            return em
                    .createNamedQuery(
                            "BopUsuarioUnidadeDeon.findByUnidadePolicialNotCargo")
                    .setParameter("cdUnidPolicial", cdUnidPolicial)
                    .setParameter("cdCargo", cdCargo).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_215: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarios> getListBopUsuarioByUnidadeCargo(
            long cdUnidPolicial, long cdCargo) throws BusinessException {
        try {
            return em
                    .createNamedQuery(
                            "BopUsuarioUnidadeDeon.findByUnidadePolicialCargo")
                    .setParameter("cdUnidPolicial", cdUnidPolicial)
                    .setParameter("cdCargo", cdCargo).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_216: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarios> getListBopUsuarioUnidadePolicialCargoByAgencia(
            long cdCargo, long cdAgencia) throws BusinessException {
        Query query = null;

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        StringBuffer queryString = new StringBuffer();

        queryString
                .append("SELECT BOP_USUARIOS.CD_USUARIO, BOP_USUARIOS.CD_AGENCIA, BOP_USUARIOS.CD_TIPO_USUARIO,  BOP_USUARIOS.CD_UNID_POLICIAL, BOP_USUARIOS.FL_ATIVO, BOP_USUARIOS.NM_ABREV_USUARIO,");
        queryString
                .append(" BOP_USUARIOS.NM_USUARIO, BOP_USUARIOS.ID_FUNCIONARIO ");
        queryString.append(" FROM BOP_FUNCIONARIOS ");
        queryString
                .append(" 	JOIN BOP_PESSOAS ON(BOP_FUNCIONARIOS.ID_REGISTRO = BOP_PESSOAS.ID_REGISTRO ) ");
        queryString
                .append(" 	JOIN BOP_USUARIOS ON(BOP_USUARIOS.ID_FUNCIONARIO = BOP_PESSOAS.ID_REGISTRO ) ");
        queryString
                .append(" 	JOIN BOP_UNIDADE_POLICIAL ON(BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BOP_USUARIOS.CD_UNID_POLICIAL ) ");
        queryString
                .append(" WHERE  ( (BOP_FUNCIONARIOS.CD_CARGO = ?) AND (BOP_USUARIOS.CD_AGENCIA = ? ) AND (BOP_USUARIOS.FL_ATIVO = 'S') AND (BOP_unidade_policial.ID_EMITE_RG = 'N'))");
        queryString.append(" ORDER BY BOP_USUARIOS.NM_USUARIO");

        parameters.put(1, cdCargo);
        parameters.put(2, cdAgencia);

        query = em.createNativeQuery(queryString.toString(), BopUsuarios.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_217: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopUsuarios> getListBopUsuarioCargoNotDelegado(long cdCargo)
            throws BusinessException {
        Query query = null;

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        StringBuffer queryString = new StringBuffer();

        queryString
                .append("SELECT BOP_USUARIOS.CD_USUARIO, BOP_USUARIOS.CD_AGENCIA, BOP_USUARIOS.CD_TIPO_USUARIO,  BOP_USUARIOS.CD_UNID_POLICIAL, BOP_USUARIOS.FL_ATIVO, BOP_USUARIOS.NM_ABREV_USUARIO,");
        queryString
                .append(" BOP_USUARIOS.NM_USUARIO, BOP_USUARIOS.ID_FUNCIONARIO ");
        queryString.append(" FROM BOP_FUNCIONARIOS ");
        queryString
                .append(" 	JOIN BOP_PESSOAS ON(BOP_FUNCIONARIOS.ID_REGISTRO = BOP_PESSOAS.ID_REGISTRO ) ");
        queryString
                .append(" 	JOIN BOP_USUARIOS ON(BOP_USUARIOS.ID_FUNCIONARIO = BOP_PESSOAS.ID_REGISTRO ) ");
        queryString
                .append(" 	JOIN BOP_UNIDADE_POLICIAL ON(BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BOP_USUARIOS.CD_UNID_POLICIAL ) ");
        queryString
                .append(" WHERE  ( (BOP_FUNCIONARIOS.CD_CARGO <> ?) AND (BOP_USUARIOS.CD_AGENCIA = 3 ) AND (BOP_USUARIOS.FL_ATIVO = 'S') AND (BOP_unidade_policial.ID_EMITE_RG = 'N'))");
        queryString.append(" ORDER BY BOP_USUARIOS.NM_ABREV_USUARIO");

        parameters.put(1, cdCargo);

        query = em.createNativeQuery(queryString.toString(), BopUsuarios.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_218: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public void removeProvidenciaPreso(
            BopProvidenciaPresoDeon bopProvidenciaPresoDeon)
            throws BusinessException {

        try {
            bopProvidenciaPresoDeon = em.merge(bopProvidenciaPresoDeon);
            em.remove(bopProvidenciaPresoDeon);

            em.flush();
        } catch (Exception e) {
            throw new BusinessException("012_219: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    // Não utilzada pois foi solicitado que a consulta não fosse lazyload
    public List<ConsultaOcorrenciaObjTransient> getListaConsultaOcorrenciaTransient(
            OcorrenciaTransiente ocorrenciaTransient, int inicio, int fim,
            Date horaInicial, Date horaFinal, Date dataInicial, Date dataFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {
        Query query = null;
        int parametros = 1;

        StringBuffer queryString = new StringBuffer(
                "SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, "
                + " ROWNUM, DS_UNID_POLICIAL  FROM ("
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, "
                + " ROWNUM rnum, a.DS_UNID_POLICIAL FROM ( "
                + " SELECT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, "
                + " DECODE( BCO.TIPO_BOP, 'S', BUP_BOA.DS_UNID_POLICIAL,  BUP.DS_UNID_POLICIAL) AS DS_UNID_POLICIAL "
                + " FROM BOP_OCORRENCIA BO "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP "
                + " JOIN BOP_UNIDADE_POLICIAL BUP ON BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL AND BUP.CD_AGENCIA = BO.CD_AGENCIA "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP "
                + " JOIN BOP_UNIDADE_POLICIAL BUP_BOA ON BUP_BOA.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL AND BUP_BOA.CD_AGENCIA = BOA.CD_AGENCIA "
                + "	JOIN ");

        if (dataInicial != null) {
            this.appendWhereClause(queryString, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(queryString, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            this.appendWhereClause(queryString, horaInicialString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  >= ?");
        }
        if (horaFinal != null) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            this.appendWhereClause(queryString, horaFinalString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  <= ?");
        }

        this.appendWhereClause(queryString, " BO.TIPO_BOP <> 'R' ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_AGENCIA = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_UNID_POLICIAL = ? ");
        this.appendWhereClause(queryString, ocorrenciaTransient.getNrChamado(),
                "BCO.NR_CHAMADO = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopIncidente(),
                "BO.TP_INCIDENTE_PRINCIPAL = ? ");

        this.appendWhereClause(
                queryString,
                ocorrenciaTransient.getNmEnvolvido(),
                "EXISTS (SELECT 1 "
                + "FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                + "WHERE BO.NR_BOP = BEO.NR_BOP "
                + "AND BO.TIPO_BOP = BEO.TIPO_BOP "
                + "AND UPPER(translate( BEO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu'))  like UPPER( translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) )");

        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaIni(),
                " ( BO.DT_CRIACAO >= ? ) ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaFim(),
                " ( BO.DT_CRIACAO <= ? ) ");

        queryString.append(" ORDER BY BCO.NR_CHAMADO DESC) a WHERE ROWNUM <= "
                + (inicio + fim) + " ) WHERE rnum >" + inicio);

        query = em.createNativeQuery(queryString.toString(),
                ConsultaOcorrenciaTransient.class);

        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdAgencia());
        }
        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdUnidPolicial());
        }
        if (ocorrenciaTransient.getNrChamado() != null) {
            query.setParameter(parametros++, ocorrenciaTransient.getNrChamado());
        }
        if (ocorrenciaTransient.getBopIncidente() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopIncidente().getTpIncidente());
        }
        if (ocorrenciaTransient.getNmEnvolvido() != null) {
            query.setParameter(
                    parametros++,
                    ocorrenciaTransient.isCheckNmEnvolvido() ? this
                    .montarLike(ocorrenciaTransient.getNmEnvolvido())
                    : ocorrenciaTransient.getNmEnvolvido());
        }
        if (ocorrenciaTransient.getDtOcorrenciaIni() != null) {
            query.setParameter(parametros++,
                    ocorrenciaTransient.getDtOcorrenciaIni());
        }
        if (ocorrenciaTransient.getDtOcorrenciaFim() != null) {
            query.setParameter(parametros++,
                    Util.setFimDoDia(ocorrenciaTransient.getDtOcorrenciaFim()));
        }

        try {
            List<ConsultaOcorrenciaObjTransient> listaConsultaOcorrenciaTransient = query
                    .getResultList();

            return listaConsultaOcorrenciaTransient;
        } catch (Exception e) {
            throw new BusinessException("012_220: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    // Não utilzada pois foi solicitado que a consulta não fosse lazyload
    public int getListaConsultaOcorrenciaTransientCount(
            OcorrenciaTransiente ocorrenciaTransient, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado,
            BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia)
            throws BusinessException {

        Query query = null;
        int parametros = 1;

        StringBuffer queryString = new StringBuffer(
                " SELECT COUNT(1) FROM BOP_OCORRENCIA BO "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP "
                + "AND BO.TIPO_BOP = BCO.TIPO_BOP "
                + "JOIN BOP_UNIDADE_POLICIAL BUP ON BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL "
                + "AND BUP.CD_AGENCIA = BO.CD_AGENCIA "
                + "JOIN BOP_OCORRENCIA_AGENCIA BOA ON BOA.NR_BOP = BO.NR_BOP "
                + "AND BOA.TIPO_BOP = BO.TIPO_BOP "
                + "JOIN BOP_UNIDADE_POLICIAL BUP_BOA ON BUP_BOA.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL "
                + "AND BUP_BOA.CD_AGENCIA = BOA.CD_AGENCIA ");

        if (dataInicial != null) {
            this.appendWhereClause(queryString, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(queryString, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            this.appendWhereClause(queryString, horaInicialString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  >= ?");
        }
        if (horaFinal != null) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            this.appendWhereClause(queryString, horaFinalString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  <= ?");
        }

        this.appendWhereClause(queryString, " BO.TIPO_BOP <> 'R' ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_AGENCIA = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_UNID_POLICIAL = ? ");
        this.appendWhereClause(queryString, ocorrenciaTransient.getNrChamado(),
                "BCO.NR_CHAMADO = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopIncidente(),
                "BO.TP_INCIDENTE_PRINCIPAL = ? ");
        this.appendWhereClause(
                queryString,
                ocorrenciaTransient.getNmEnvolvido(),
                "EXISTS (SELECT 1 "
                + "FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                + "WHERE BO.NR_BOP = BEO.NR_BOP "
                + "AND BO.TIPO_BOP = BEO.TIPO_BOP "
                + "AND UPPER(translate( BEO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu'))  like UPPER(translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) )");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaIni(),
                " ( TRUNC( BO.DT_CRIACAO ) >= TRUNC( ? ) ) ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaFim(),
                " ( TRUNC( BO.DT_CRIACAO ) <= TRUNC( ? ) ) ");

        query = em.createNativeQuery(queryString.toString());

        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdAgencia());
        }
        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdUnidPolicial());
        }
        if (ocorrenciaTransient.getNrChamado() != null) {
            query.setParameter(parametros++, ocorrenciaTransient.getNrChamado());
        }
        if (ocorrenciaTransient.getBopIncidente() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopIncidente().getTpIncidente());
        }
        if (ocorrenciaTransient.getNmEnvolvido() != null) {
            query.setParameter(
                    parametros++,
                    ocorrenciaTransient.isCheckNmEnvolvido() ? this
                    .montarLike(ocorrenciaTransient.getNmEnvolvido())
                    : ocorrenciaTransient.getNmEnvolvido());
        }
        if (ocorrenciaTransient.getDtOcorrenciaIni() != null) {
            query.setParameter(parametros++,
                    ocorrenciaTransient.getDtOcorrenciaIni());
        }
        if (ocorrenciaTransient.getDtOcorrenciaFim() != null) {
            query.setParameter(parametros++,
                    Util.setFimDoDia(ocorrenciaTransient.getDtOcorrenciaFim()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_221: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaInicialOcorrenciaSigilosaTransient(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult,
            Boolean isSigilosa, Long usuarioLogado, Boolean isSiplan)
            throws BusinessException {
        this.connector = null;
        Query query = null;

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        Integer indexParameters = 0;

        StringBuffer queryString = new StringBuffer();

        queryString.append("SELECT NR_BOP, TIPO_BOP , DT_CRIACAO, NR_CHAMADO,");
        queryString.append(" DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, ");
        queryString
                .append(" DS_UNID_POLICIAL, FL_SITUACAO_BOP, ID_OCORRENCIA_DEON, QTD_DEVOLUCAO");
        queryString
                .append(" FROM ( SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO AS DT_CRIACAO,");
        queryString
                .append(" 			   BCO.NR_CHAMADO, BOP_INCIDENTE.DS_INCIDENTE,");
        queryString
                .append(" 			   BOP_INCIDENTE.ID_INCIDENTE_PAI, BOA.TP_INCIDENTE,");
        queryString
                .append(" 			   BUP.DS_UNID_POLICIAL, BOAD.FL_SITUACAO_OCORRENCIA AS FL_SITUACAO_BOP, BOD.ID_OCORRENCIA_DEON,");
        queryString.append("			   (SELECT COUNT(1)");
        queryString.append(" 					FROM BOP_OCORRENCIA_DEON DEON");
        queryString
                .append(" 						JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON)");
        queryString.append(" 						WHERE BO.NR_BOP = DEON.NR_BOP");
        queryString.append(" 							AND BO.TIPO_BOP = DEON.TIPO_BOP ");
        queryString.append("				) QTD_DEVOLUCAO ");
        queryString.append(" 				FROM BOP_OCORRENCIA BO ");
        queryString
                .append(" 				    JOIN BOP_OCORRENCIA_AGENCIA BOA ON (BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP) ");
        queryString
                .append(" 				    JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON (BOA.CD_OCORRENCIA_AGENCIA = BOAD.CD_OCORRENCIA_AGENCIA) ");
        queryString
                .append(" 					LEFT JOIN BOP_INCIDENTE ON (BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
        queryString
                .append(" 					JOIN BOP_CHAMADO_OCORRENCIA BCO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP)");
        queryString
                .append(" 					JOIN BOP_UNIDADE_POLICIAL BUP ON (BUP.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL AND BUP.CD_AGENCIA = BOA.CD_AGENCIA)");
        queryString
                .append(" 					JOIN BOP_OCORRENCIA_DEON BOD ON (BO.NR_BOP = BOD.NR_BOP AND BO.TIPO_BOP = BOD.TIPO_BOP)");
        queryString
                .append(" 					LEFT JOIN BOP_OCOR_LOCAL_CRIME_DEON BOLCD ON (BOLCD.ID_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON)");
        queryString.append("					WHERE BO.DT_CRIACAO > ( SYSDATE - ? )");

        parameters.put(++indexParameters, (maxResult * 1.5));

        queryString.append(" AND BO.TIPO_BOP = 'R' ");

        if (!isSiplan) {

            queryString
                    .append(" AND ((BOA.CD_AGENCIA = ? AND BOA.CD_UNID_POLICIAL = ?)");

            parameters.put(++indexParameters, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdAgencia());
            parameters.put(++indexParameters, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdUnidPolicial());

            queryString.append(" 			OR ( EXISTS (SELECT 1");
            queryString.append(" 							FROM BOP_OCORRENCIA_AGENCIA BOA");
            queryString.append("								WHERE BOA.CD_AGENCIA = ?");

            parameters.put(++indexParameters, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdAgencia());

            queryString.append("									AND BOA.CD_UNID_POLICIAL = ?");

            parameters.put(++indexParameters, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdUnidPolicial());

            queryString.append("									AND BOA.NR_BOP = BO.NR_BOP");
            queryString.append("									AND BOA.TIPO_BOP = BO.TIPO_BOP");

            queryString.append(" 						)");
            queryString.append("				)");
            queryString.append(" 	)");

            queryString
                    .append("  AND BOD.ID_OCORRENCIA_DEON IN (SELECT a.ID_OCORRENCIA_DEON ");
            queryString
                    .append(" 									FROM BOP_ACESSO_USUARIO_OCOR_DEON a ");
            queryString.append(" 										WHERE a.ID_USUARIO = ? ");

            parameters.put(++indexParameters, usuarioLogado);

            queryString
                    .append(" 											AND a.ID_OCORRENCIA_DEON = BOD.ID_OCORRENCIA_DEON");
            queryString.append(" 											AND a.ID_USUARIO_EXCLUSAO IS NULL");
            queryString.append(" 								 )");

        }

        queryString.append(" ORDER BY DT_CRIACAO DESC ) WHERE ROWNUM <= "
                + maxResult);

        query = em.createNativeQuery(queryString.toString(),
                ConsultaOcorrenciaTransient.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_222: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaInicialOcorrenciaTransient(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult,
            Boolean isSigilosa, Long usuarioLogado, Boolean isSiplan)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer queryString = new StringBuffer(
                "SELECT NR_BOP, TIPO_BOP , DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, DS_UNID_POLICIAL, FL_SITUACAO_BOP, ID_OCORRENCIA_DEON, QTD_DEVOLUCAO "
                + " FROM ( SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO AS DT_CRIACAO, BCO.NR_CHAMADO, BOP_INCIDENTE.DS_INCIDENTE, "
                + " BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BUP.DS_UNID_POLICIAL, BO.FL_SITUACAO_BOP, BOD.ID_OCORRENCIA_DEON, (SELECT COUNT(1) FROM BOP_OCORRENCIA_DEON DEON"
                + " JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON) "
                + " WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP   ) QTD_DEVOLUCAO "
                + " FROM BOP_OCORRENCIA BO "
                + " LEFT JOIN BOP_INCIDENTE ON BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE"
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP "
                + " JOIN BOP_UNIDADE_POLICIAL BUP ON  BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL  AND BUP.CD_AGENCIA = BO.CD_AGENCIA "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON BO.NR_BOP = BOD.NR_BOP AND BO.TIPO_BOP = BOD.TIPO_BOP");

        this.appendWhereClause(queryString, maxResult,
                "BO.DT_CRIACAO > ( SYSDATE - " + maxResult * 1.5 + " ) ");

        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "((BO.CD_AGENCIA = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_UNID_POLICIAL = ?) ");

        this.connector = " or ";

        this.appendWhereClause(
                queryString,
                " ( EXISTS (SELECT 1 FROM BOP_OCORRENCIA_AGENCIA BOA WHERE BOA.CD_AGENCIA = ? AND BOA.CD_UNID_POLICIAL = ? AND BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) ) ) ");

        queryString
                .append(" AND BO.TIPO_BOP <> 'R' AND BO.TIPO_BOP <> 'T' ORDER BY DT_CRIACAO DESC ) WHERE ROWNUM <= "
                        + maxResult);

        query = em.createNativeQuery(queryString.toString(),
                ConsultaOcorrenciaTransient.class);

        query.setParameter(parametros++, ocorrenciaTransient
                .getBopUnidadePolicial().getId().getCdAgencia());
        query.setParameter(parametros++, ocorrenciaTransient
                .getBopUnidadePolicial().getId().getCdUnidPolicial());
        query.setParameter(parametros++, ocorrenciaTransient
                .getBopUnidadePolicial().getId().getCdAgencia());
        query.setParameter(parametros++, ocorrenciaTransient
                .getBopUnidadePolicial().getId().getCdUnidPolicial());

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_223: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public ConsultaOcorrenciaTransient getOcorrenciaTransitoTransient(
            ConsultaOcorrenciaTransient ocorrenciaTransitoTransient)
            throws BusinessException {

        StringBuilder whereBuilder = new StringBuilder();

        if (ocorrenciaTransitoTransient != null
                && ocorrenciaTransitoTransient.getNumero() != null) {

            whereBuilder
                    .append(" SELECT DISTINCT BOP_CHAMADO_OCORRENCIA.NR_CHAMADO, BOP_OCORRENCIA.DT_FATO, BOP_OCORRENCIA.DS_BAIRRO, ");
            whereBuilder
                    .append("				  BOP_OCORRENCIA.DS_CIDADE, BOP_OCORRENCIA.FL_SITUACAO_BOP, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE,");
            whereBuilder
                    .append("				  BOP_OCORRENCIA.NR_BOP, BOP_OCORRENCIA.TIPO_BOP, BOP_OCORRENCIA.CD_AGENCIA, BOP_OCORRENCIA.CD_UNID_POLICIAL,");
            whereBuilder
                    .append("				  BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL, BOP_AGENCIA.DS_AGENCIA,");
            whereBuilder
                    .append("				  (SELECT BOP_STATUS_OCORRENCIA.DS_STATUS_OCORRENCIA");
            whereBuilder.append("						FROM BOP_STATUS_OCORRENCIA");
            whereBuilder
                    .append(" 							JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA ) ");
            whereBuilder
                    .append(" 							WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = ( SELECT MAX(BCS.ID_OCORRENCIA_SITUACAO) ");
            whereBuilder
                    .append(" 																						FROM BOP_OCORRENCIA_SITUACAO BCS");
            whereBuilder
                    .append("  																							WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP");
            whereBuilder
                    .append(" 																								AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
            whereBuilder.append("																					)");
            whereBuilder.append("    			) AS STATUS_VALIDACAO,");
            whereBuilder
                    .append(" 				(SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA ");
            whereBuilder.append("					FROM BOP_STATUS_OCORRENCIA ");
            whereBuilder
                    .append(" 						JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA)");
            whereBuilder
                    .append("  						WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO) ");
            whereBuilder
                    .append("																					FROM BOP_OCORRENCIA_SITUACAO BCS");
            whereBuilder
                    .append(" 								 														WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP ");
            whereBuilder
                    .append("																							AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
            whereBuilder.append("																			    )");
            whereBuilder.append("				) AS ID_STATUS_VALIDACAO");
            whereBuilder.append(" 		FROM BOP_OCORRENCIA  ");
            whereBuilder
                    .append("  			JOIN BOP_CHAMADO_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP ) ");
            whereBuilder
                    .append(" 			JOIN BOP_UNIDADE_POLICIAL ON (BOP_OCORRENCIA.CD_UNID_POLICIAL = BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL)");
            whereBuilder
                    .append(" 			JOIN BOP_AGENCIA ON (BOP_OCORRENCIA.CD_AGENCIA = BOP_AGENCIA.CD_AGENCIA)");
            whereBuilder
                    .append(" 			JOIN BOP_ACIDENTE ON (BOP_OCORRENCIA.NR_BOP = BOP_ACIDENTE.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_ACIDENTE.TIPO_BOP ) ");
            whereBuilder
                    .append("			LEFT JOIN BOP_INCIDENTE ON (BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
            whereBuilder
                    .append(" 			WHERE BOP_OCORRENCIA.FL_SITUACAO_BOP NOT IN ('6')");
            whereBuilder.append("				AND BOP_OCORRENCIA.TIPO_BOP <> 'R'");
            whereBuilder.append("				AND BOP_CHAMADO_OCORRENCIA.NR_CHAMADO = "
                    + ocorrenciaTransitoTransient.getNumero());

            Query query = em.createNativeQuery(whereBuilder.toString(),
                    ConsultaOcorrenciaTransient.class);

            try {

                em.getEntityManagerFactory().getCache()
                        .evict(ConsultaOcorrenciaTransient.class);
                return (ConsultaOcorrenciaTransient) query.getSingleResult();

            } catch (NoResultException e) {
                return null;
            } catch (Exception e) {
                throw new BusinessException("012_224: "
                        + "Ocorreu um erro inesperado.", e);

            }

        }

        return null;
    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaOcorrenciaTransitoTransient(
            int indexPaginacao, int rows,
            OcorrenciaTransiente ocorrenciaTransient, Date dataInicial,
            Date dataFinal, String nrPlaca) throws BusinessException {

        Query query = null;

        StringBuilder whereBuilder = new StringBuilder();

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        Integer indexParameter = 0;

        List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient = new ArrayList<ConsultaOcorrenciaTransient>();

        dataInicial = ocorrenciaTransient.getDtOcorrenciaIni();
        dataFinal = ocorrenciaTransient.getDtOcorrenciaFim();

        if (ocorrenciaTransient.getNrChamado() != null
                || !Util.isNullOrEmpty(nrPlaca)) {

            whereBuilder
                    .append(" SELECT DISTINCT count(1) over() as TOTAL, BOP_CHAMADO_OCORRENCIA.NR_CHAMADO, ");

            whereBuilder
                    .append("( SELECT NR_CHAMADO FROM BOP_CHAMADO_OCORRENCIA BCO2  ");

            whereBuilder
                    .append(" JOIN BOP_OCORRENCIA_TRANSITO_DEON BOTD ON (BCO2.NR_BOP = BOTD.NR_BOP_VINCULADO AND BCO2.TIPO_BOP = BOTD.TIPO_BOP_VINCULADO) ");
            whereBuilder
                    .append(" JOIN BOP_OCORRENCIA_DEON BOD2 ON (BOTD.ID_OCORRENCIA_DEON = BOD2.ID_OCORRENCIA_DEON) ");

            whereBuilder
                    .append(" WHERE  BOD2.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP AND BOD2.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP) AS NR_CHAMADO_VINCULADO, ");
            whereBuilder
                    .append("BOP_OCORRENCIA.DT_FATO, BOP_OCORRENCIA.DS_BAIRRO, BOP_OCORRENCIA.DS_CIDADE, ");
            whereBuilder
                    .append(" 				   BOP_OCORRENCIA.FL_SITUACAO_BOP, BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BOP_OCORRENCIA.NR_BOP, BOP_OCORRENCIA.TIPO_BOP, ");
            whereBuilder
                    .append(" 				  BOP_OCORRENCIA_AGENCIA.CD_AGENCIA, BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL,BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL, BOP_AGENCIA.DS_AGENCIA,");
            whereBuilder
                    .append(" 				  ( SELECT BOP_STATUS_OCORRENCIA.DS_STATUS_OCORRENCIA");
            whereBuilder.append(" 						FROM BOP_STATUS_OCORRENCIA ");
            whereBuilder
                    .append(" 							JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA )");
            whereBuilder
                    .append(" 							WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = ( SELECT MAX(BCS.ID_OCORRENCIA_SITUACAO) ");
            whereBuilder
                    .append("																						FROM BOP_OCORRENCIA_SITUACAO BCS ");
            whereBuilder
                    .append("																							WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP ");
            whereBuilder
                    .append("																								AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
            whereBuilder.append("																					)");
            whereBuilder.append("				) AS STATUS_VALIDACAO,");
            whereBuilder
                    .append(" 				(SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA ");
            whereBuilder.append("					FROM BOP_STATUS_OCORRENCIA ");
            whereBuilder
                    .append("						JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA)");
            whereBuilder
                    .append("						WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO)");
            whereBuilder
                    .append("																					FROM BOP_OCORRENCIA_SITUACAO BCS");
            whereBuilder
                    .append("																						WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP");
            whereBuilder
                    .append(" 																							AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
            whereBuilder.append("																				)");
            whereBuilder.append(" 				) AS ID_STATUS_VALIDACAO,");
            whereBuilder.append(" 				BOP_OCORRENCIA.DT_CRIACAO");
            whereBuilder.append(" 				FROM BOP_OCORRENCIA   ");
            whereBuilder
                    .append("	 				JOIN BOP_CHAMADO_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP )");

            if (ocorrenciaTransient.getNrChamado() == null
                    && !Util.isNullOrEmpty(nrPlaca)) {

                whereBuilder
                        .append(" JOIN BOP_OBJETO_OCORR_VEICULO ON (BOP_CHAMADO_OCORRENCIA.NR_BOP = BOP_OBJETO_OCORR_VEICULO.NR_BOP AND BOP_CHAMADO_OCORRENCIA.TIPO_BOP = BOP_OBJETO_OCORR_VEICULO.TIPO_BOP )");

            }

            whereBuilder
                    .append(" 					JOIN BOP_ACIDENTE ON (BOP_OCORRENCIA.NR_BOP = BOP_ACIDENTE.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_ACIDENTE.TIPO_BOP )");
            whereBuilder
                    .append(" 					LEFT JOIN BOP_INCIDENTE ON (BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
            whereBuilder
                    .append("  				JOIN BOP_OCORRENCIA_AGENCIA ON(BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_AGENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP =  BOP_OCORRENCIA_AGENCIA.TIPO_BOP  ) ");
            whereBuilder
                    .append(" 					JOIN BOP_OCORRENCIA_AGENCIA_DEON ON(BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA) ");
            whereBuilder
                    .append("  				JOIN BOP_UNIDADE_POLICIAL ON (BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL)");
            whereBuilder
                    .append(" 					JOIN BOP_AGENCIA ON (BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = BOP_AGENCIA.CD_AGENCIA)");
            whereBuilder.append(" 					WHERE ");
            whereBuilder.append("  					BOP_OCORRENCIA.TIPO_BOP <> 'R'");
            whereBuilder
                    .append("  					AND BOP_OCORRENCIA_AGENCIA_DEON.FL_TRANSITO = 'S' ");
            // whereBuilder.append( "  					AND BOP_OCORRENCIA.TIPO_BOP = 'T'"
            // );

            if (ocorrenciaTransient.getNrChamado() != null) {

                whereBuilder
                        .append("  					AND BOP_OCORRENCIA_AGENCIA.NR_CHAMADO = ?");

                parameters.put(++indexParameter,
                        ocorrenciaTransient.getNrChamado());

            } else {

                whereBuilder
                        .append("  					AND REPLACE(BOP_OBJETO_OCORR_VEICULO.NR_PLACA, '-','') = ? ");

                parameters.put(++indexParameter, nrPlaca.toUpperCase());

            }

            query = em.createNativeQuery(whereBuilder.toString(),
                    ConsultaOcorrenciaTransient.class);

            for (java.util.Map.Entry<Integer, Object> entry : parameters
                    .entrySet()) {
                query.setParameter(entry.getKey(), entry.getValue());
            }

            try {
                listaConsultaOcorrenciaTransient = query.getResultList();

                return listaConsultaOcorrenciaTransient;
            } catch (Exception e) {
                throw new BusinessException("012_225: "
                        + "Ocorreu um erro inesperado.", e);

            }

        } else {

            if (ocorrenciaTransient.getCdMunicipio() > 0) {

                whereBuilder.append(" AND ENDERECO.CD_MUNICIPIO = ?");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getCdMunicipio());

                if (ocorrenciaTransient.getCdBairro() > 0) {

                    whereBuilder.append(" AND ENDERECO.CD_BAIRRO = ?");
                    parameters.put(++indexParameter,
                            ocorrenciaTransient.getCdBairro());
                }
            }

            if (dataInicial != null) {
                whereBuilder.append(" AND BOP_OCORRENCIA.DT_FATO >= ?");
                parameters.put(++indexParameter, dataInicial);
            }

            if (dataFinal != null) {
                whereBuilder.append(" AND BOP_OCORRENCIA.DT_FATO <= ?");
                parameters.put(++indexParameter, dataFinal);
            }

            if (ocorrenciaTransient.getSituacaoOcorrencia() != 0) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA = ? ");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getSituacaoOcorrencia());

            } else {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA IN (1, 4, 6, 10) ");
            }

            if (ocorrenciaTransient.getStatusValidacao() != 0) {
                whereBuilder
                        .append(" AND (SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA    ");
                whereBuilder.append("			FROM BOP_STATUS_OCORRENCIA");
                whereBuilder
                        .append("				JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA)");
                whereBuilder
                        .append("				WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO)");
                whereBuilder
                        .append("																			FROM BOP_OCORRENCIA_SITUACAO BCS");
                whereBuilder
                        .append("																			WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP");
                whereBuilder
                        .append(" 																				AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
                whereBuilder.append("																		)");
                whereBuilder.append("		) = ?");

                parameters.put(++indexParameter,
                        ocorrenciaTransient.getStatusValidacao());

            }

            if (ocorrenciaTransient.getBopIncidente() != null) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL= ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopIncidente().getTpIncidente());
            }

            if (ocorrenciaTransient.getBopPessoaSelecionada() != null) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA.ID_REGISTRO_RESPONSAVEL = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopPessoaSelecionada().getIdRegistro());

            }

            if (ocorrenciaTransient.getBopUnidadePolicial() != null) {

                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());
            }

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) {

                if (ocorrenciaTransient.isCheckNmEnvolvido()) {
                    whereBuilder
                            .append(" AND BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL = ? ");

                    parameters.put(++indexParameter,
                            ocorrenciaTransient.getNmEnvolvido());
                } else {
                    whereBuilder
                            .append(" AND BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL LIKE  ? ");

                    parameters.put(++indexParameter,
                            "%" + ocorrenciaTransient.getNmEnvolvido() + "%");
                }
            }

            if (ocorrenciaTransient.getNrChamadoOrigem() != null) {
                whereBuilder
                        .append(" AND BOTD.NR_BOP_VINCULADO IN (SELECT NR_BOP FROM BOP_CHAMADO_OCORRENCIA WHERE NR_CHAMADO = ?) ");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getNrChamadoOrigem());
            }

            whereBuilder
                    .append(" ORDER BY BOP_OCORRENCIA.NR_BOP  DESC ) WHERE ROWNUM <= ?   ) WHERE RNUM  > ? ");
            parameters.put(++indexParameter, indexPaginacao + rows);
            parameters.put(++indexParameter, indexPaginacao);

            StringBuilder columnsBuilder = new StringBuilder();
            columnsBuilder
                    .append(" SELECT  * FROM (SELECT TOTAL, NR_CHAMADO, NR_CHAMADO_VINCULADO, DT_FATO, DS_BAIRRO, DS_CIDADE, FL_SITUACAO_BOP, FL_SITUACAO_OCORRENCIA, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, CD_AGENCIA, CD_UNID_POLICIAL, DS_UNID_POLICIAL, DS_AGENCIA, STATUS_VALIDACAO, ID_STATUS_VALIDACAO, DT_CRIACAO, ROWNUM RNUM ");
            columnsBuilder.append(" FROM ( ");
            columnsBuilder
                    .append(" SELECT count(1) over() as TOTAL, BOP_OCORRENCIA_AGENCIA.NR_CHAMADO, ");

            columnsBuilder
                    .append("( SELECT BCO2.NR_CHAMADO FROM BOP_CHAMADO_OCORRENCIA BCO2  ");

            columnsBuilder
                    .append(" JOIN BOP_OCORRENCIA_TRANSITO_DEON BOTD ON (BCO2.NR_BOP = BOTD.NR_BOP_VINCULADO AND BCO2.TIPO_BOP = BOTD.TIPO_BOP_VINCULADO) ");
            columnsBuilder
                    .append(" JOIN BOP_OCORRENCIA_DEON BOD2 ON (BOTD.ID_OCORRENCIA_DEON = BOD2.ID_OCORRENCIA_DEON) ");

            columnsBuilder
                    .append(" WHERE  BOD2.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BOD2.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP) AS NR_CHAMADO_VINCULADO, ");

            columnsBuilder
                    .append("BOP_OCORRENCIA.DT_FATO, BOP_OCORRENCIA.DS_BAIRRO, BOP_OCORRENCIA.DS_CIDADE, ");

            columnsBuilder
                    .append(" 				 BOP_OCORRENCIA.FL_SITUACAO_BOP, BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BOP_OCORRENCIA.NR_BOP, BOP_OCORRENCIA.TIPO_BOP, ");
            columnsBuilder
                    .append(" 				 BOP_OCORRENCIA_AGENCIA.CD_AGENCIA, BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL, PA_UNID_POLICIAL.GET_UNIDADE_POLICIAL (BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL) AS DS_UNID_POLICIAL,    PA_AGENCIA.GET_AGENCIA (BOP_OCORRENCIA_AGENCIA.CD_AGENCIA) AS DS_AGENCIA,");
            columnsBuilder
                    .append(" 				 (SELECT BOP_STATUS_OCORRENCIA.DS_STATUS_OCORRENCIA");
            columnsBuilder.append(" 					FROM BOP_STATUS_OCORRENCIA ");
            columnsBuilder
                    .append(" 						JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA )");
            columnsBuilder
                    .append("						 	WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = ( SELECT MAX(BCS.ID_OCORRENCIA_SITUACAO) ");
            columnsBuilder
                    .append("																						FROM BOP_OCORRENCIA_SITUACAO BCS ");
            columnsBuilder
                    .append("																							WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
            columnsBuilder.append("																					)");
            columnsBuilder.append("					 ) AS STATUS_VALIDACAO,");
            columnsBuilder
                    .append(" 				(SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA ");
            columnsBuilder.append("						FROM BOP_STATUS_OCORRENCIA ");
            columnsBuilder
                    .append("							JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA)");
            columnsBuilder
                    .append("							WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO)");
            columnsBuilder
                    .append("																						FROM BOP_OCORRENCIA_SITUACAO BCS");
            columnsBuilder
                    .append("																						WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP");
            columnsBuilder
                    .append(" 																						AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
            columnsBuilder.append("  																				)  ");
            columnsBuilder.append(" 				) AS ID_STATUS_VALIDACAO, ");
            columnsBuilder.append(" 				BOP_OCORRENCIA.DT_CRIACAO");

            columnsBuilder.append("  	FROM BOP_OCORRENCIA ");
            columnsBuilder
                    .append(" 		JOIN BOP_OCORRENCIA_DEON DEON ON ( BOP_OCORRENCIA.NR_BOP = DEON.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = DEON.TIPO_BOP  )");
            columnsBuilder
                    .append(" 		JOIN BOP_OCORRENCIA_AGENCIA ON(BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_AGENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP =  BOP_OCORRENCIA_AGENCIA.TIPO_BOP  )");
            columnsBuilder
                    .append(" 		JOIN BOP_OCORRENCIA_AGENCIA_DEON  ON (BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA)");
            columnsBuilder
                    .append(" 		JOIN BOP_ENDERECO_OCORRENCIA_DEON ENDERECO ON (DEON.ID_ENDERECO_OCORRENCIA_DEON = ENDERECO.ID_ENDERECO_OCORRENCIA_DEON)");
            columnsBuilder
                    .append(" 		LEFT JOIN BOP_INCIDENTE ON (BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");

            if (ocorrenciaTransient.getNrChamadoOrigem() != null) {
                columnsBuilder
                        .append(" JOIN BOP_OCORRENCIA_TRANSITO_DEON BOTD ON (DEON.ID_OCORRENCIA_DEON = BOTD.ID_OCORRENCIA_DEON) ");
            }

            if (ocorrenciaTransient.getNmEnvolvido() != null
                    || ocorrenciaTransient.getNmEnvolvidoNorm() != null) {

                columnsBuilder
                        .append(" JOIN BOP_ENVOLVIDOS_OCORRENCIA  ON (BOP_OCORRENCIA.NR_BOP = BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP =  BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP) ");

            }

            columnsBuilder.append(" 		WHERE ");
            columnsBuilder
                    .append("  			(BOP_OCORRENCIA_AGENCIA.TIPO_BOP = 'T' or BOP_OCORRENCIA_AGENCIA.TIPO_BOP = 'D')");
            columnsBuilder
                    .append("  					AND BOP_OCORRENCIA_AGENCIA_DEON.FL_TRANSITO = 'S' ");

            columnsBuilder.append(whereBuilder);

            query = em.createNativeQuery(columnsBuilder.toString(),
                    ConsultaOcorrenciaTransient.class);

            for (java.util.Map.Entry<Integer, Object> entry : parameters
                    .entrySet()) {
                query.setParameter(entry.getKey(), entry.getValue());
            }

            try {
                listaConsultaOcorrenciaTransient = query.getResultList();
            } catch (Exception e) {
                throw new BusinessException("012_225: "
                        + "Ocorreu um erro inesperado.", e);

            }
            // }

        }

        return listaConsultaOcorrenciaTransient;

    }

    public int getListaConsultaOcorrenciaTransitoTransientCount(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult,
            Date dataInicial, Date dataFinal, String nrPlaca)
            throws BusinessException {

        Query query = null;

        StringBuilder whereBuilder = new StringBuilder();

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        Integer indexParameter = 0;

        if (ocorrenciaTransient.getNrChamado() != null
                || !Util.isNullOrEmpty(nrPlaca)) {

            return 0;

        } else {

            if (ocorrenciaTransient.getCdMunicipio() > 0) {

                whereBuilder.append(" AND ENDERECO.CD_MUNICIPIO = ?");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getCdMunicipio());

                if (ocorrenciaTransient.getCdBairro() > 0) {

                    whereBuilder.append(" AND ENDERECO.CD_BAIRRO = ?");
                    parameters.put(++indexParameter,
                            ocorrenciaTransient.getCdBairro());
                }
            }

            if (dataInicial != null) {
                whereBuilder.append(" AND TRUNC(BOP_OCORRENCIA.DT_FATO) >= ?");
                parameters.put(++indexParameter, dataInicial);
            }

            if (dataFinal != null) {
                whereBuilder.append(" AND TRUNC(BOP_OCORRENCIA.DT_FATO) <= ?");
                parameters.put(++indexParameter, dataFinal);
            }

            if (ocorrenciaTransient.getSituacaoOcorrencia() != 0) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA = ? ");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getSituacaoOcorrencia());

            } else {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA IN (1, 4, 6, 10) ");
            }

            if (ocorrenciaTransient.getStatusValidacao() != 0) {
                whereBuilder
                        .append(" AND (SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA    ");
                whereBuilder.append("			FROM BOP_STATUS_OCORRENCIA");
                whereBuilder
                        .append("				JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA)");
                whereBuilder
                        .append("				WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO)");
                whereBuilder
                        .append("																			FROM BOP_OCORRENCIA_SITUACAO BCS");
                whereBuilder
                        .append("																			WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP");
                whereBuilder
                        .append(" 																				AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
                whereBuilder.append("																		)");
                whereBuilder.append("		) = ?");

                parameters.put(++indexParameter,
                        ocorrenciaTransient.getStatusValidacao());

            }

            if (ocorrenciaTransient.getBopIncidente() != null) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL= ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopIncidente().getTpIncidente());
            }

            if (ocorrenciaTransient.getBopPessoaSelecionada() != null) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA.ID_REGISTRO_RESPONSAVEL = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopPessoaSelecionada().getIdRegistro());

            }

            if (ocorrenciaTransient.getBopUnidadePolicial() != null) {

                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());
            }

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) {

                if (ocorrenciaTransient.isCheckNmEnvolvido()) {
                    whereBuilder
                            .append("AND BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL =  ? ");

                    parameters.put(++indexParameter,
                            ocorrenciaTransient.getNmEnvolvido());
                } else {
                    whereBuilder
                            .append("AND BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL LIKE  ? ");

                    parameters.put(++indexParameter,
                            "%" + ocorrenciaTransient.getNmEnvolvido() + "%");
                }
            }

            StringBuilder columnsBuilder = new StringBuilder();
            columnsBuilder.append(" SELECT BOP_OCORRENCIA_AGENCIA.NR_CHAMADO ");
            columnsBuilder.append("  	FROM BOP_OCORRENCIA ");
            // columnsBuilder.append(
            // "			JOIN BOP_CHAMADO_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP )"
            // );
            // columnsBuilder.append(
            // " 		JOIN BOP_ACIDENTE ON (BOP_OCORRENCIA.NR_BOP = BOP_ACIDENTE.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_ACIDENTE.TIPO_BOP ) "
            // );
            columnsBuilder
                    .append(" 		JOIN BOP_OCORRENCIA_DEON DEON ON ( BOP_OCORRENCIA.NR_BOP = DEON.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = DEON.TIPO_BOP  )");
            columnsBuilder
                    .append(" 		JOIN BOP_OCORRENCIA_AGENCIA ON (BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_AGENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_OCORRENCIA_AGENCIA.TIPO_BOP)");
            columnsBuilder
                    .append(" 		JOIN BOP_OCORRENCIA_AGENCIA_DEON ON (BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA)");
            // columnsBuilder.append(
            // " 		JOIN BOP_UNIDADE_POLICIAL ON (BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL)"
            // );
            // columnsBuilder.append(
            // " 		JOIN BOP_AGENCIA ON (BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = BOP_AGENCIA.CD_AGENCIA)"
            // );
            columnsBuilder
                    .append(" 		JOIN BOP_ENDERECO_OCORRENCIA_DEON ENDERECO ON (DEON.ID_ENDERECO_OCORRENCIA_DEON = ENDERECO.ID_ENDERECO_OCORRENCIA_DEON)");
            columnsBuilder
                    .append(" 		LEFT JOIN BOP_INCIDENTE ON (BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) {

                columnsBuilder
                        .append(" 		LEFT JOIN BOP_ENVOLVIDOS_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP =BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP  AND BOP_OCORRENCIA.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP)");
            }

            columnsBuilder.append(" 		WHERE ");
            columnsBuilder
                    .append(" 		  BOP_OCORRENCIA_AGENCIA_DEON.FL_TRANSITO = 'S' ");
            columnsBuilder
                    .append("  			AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP <> 'R' ");

            columnsBuilder.append(whereBuilder);

            query = em.createNativeQuery("SELECT COUNT(*) FROM ("
                    + columnsBuilder.toString() + ")");

            for (java.util.Map.Entry<Integer, Object> entry : parameters
                    .entrySet()) {
                query.setParameter(entry.getKey(), entry.getValue());
            }

            BigDecimal qtd;
            try {
                qtd = (BigDecimal) query.getSingleResult();
            } catch (NoResultException e) {
                return 0;
            } catch (NumberFormatException e) {
                throw new BusinessException("012_226: "
                        + "Ocorreu um erro inesperado.", e);

            }

            return qtd.intValue();
        }

    }

    public List<ConsultaOcorrenciaTransient> getListConsultaOcorrenciaTransitoTransient(
            ConsultaOcorrenciaTransient ocorrenciaTransient)
            throws BusinessException {
        Query query = null;

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        StringBuilder whereBuilder = new StringBuilder();

        List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransientSubTabela = new ArrayList<ConsultaOcorrenciaTransient>();
        whereBuilder
                .append(" AND BOP_OCORRENCIA.FL_SITUACAO_BOP IN (1, 4, 6, 10) ");
        whereBuilder
                .append(" SELECT DISTINCT PA_INCIDENTE.GET_INCIDENTE(BOP_OCORRENCIA_AGENCIA.TP_INCIDENTE) DS_INCIDENTE, BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL, ");
        whereBuilder
                .append("				  BOP_AGENCIA.DS_AGENCIA, BOP_OCORRENCIA_AGENCIA.NR_CHAMADO ");
        whereBuilder.append("		FROM BOP_OCORRENCIA_AGENCIA");
        whereBuilder
                .append("			JOIN BOP_AGENCIA ON ( BOP_AGENCIA.CD_AGENCIA = BOP_OCORRENCIA_AGENCIA.CD_AGENCIA ) ");
        whereBuilder
                .append("			JOIN BOP_UNIDADE_POLICIAL ON ( BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL)");
        whereBuilder.append("			WHERE BOP_OCORRENCIA_AGENCIA.NR_CHAMADO = ?");
        whereBuilder.append("				AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP <> 'R'");

        parameters.put(1, ocorrenciaTransient.getNumero());

        query = em.createNativeQuery(whereBuilder.toString(),
                ConsultaOcorrenciaTransient.class);

        for (java.util.Map.Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        try {
            listaConsultaOcorrenciaTransientSubTabela = query.getResultList();

            return listaConsultaOcorrenciaTransientSubTabela;
        } catch (Exception e) {
            throw new BusinessException("012_227: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaOcorrenciaTransitoTransientInicial(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult)
            throws BusinessException {
        Query query = null;
        StringBuilder whereBuilder = new StringBuilder();
        Map<Integer, Object> parameters = new HashMap<Integer, Object>();
        Integer indexParameter = 0;
        List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient = new ArrayList<ConsultaOcorrenciaTransient>();

        if (ocorrenciaTransient.getNrChamado() != null) {

            whereBuilder
                    .append(" SELECT NR_CHAMADO, DT_FATO, DS_BAIRRO, DS_CIDADE, FL_SITUACAO_BOP, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, CD_AGENCIA, CD_UNID_POLICIAL, ");
            whereBuilder
                    .append("		DS_UNID_POLICIAL, DS_AGENCIA,STATUS_VALIDACAO, ID_STATUS_VALIDACAO ");
            whereBuilder.append("	FROM ( ");
            whereBuilder
                    .append(" 			SELECT DISTINCT BOP_CHAMADO_OCORRENCIA.NR_CHAMADO, BOP_OCORRENCIA.DT_FATO, BOP_OCORRENCIA.DS_BAIRRO, BOP_OCORRENCIA.DS_CIDADE, ");
            whereBuilder
                    .append("							BOP_OCORRENCIA.FL_SITUACAO_BOP, BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BOP_OCORRENCIA.NR_BOP, BOP_OCORRENCIA.TIPO_BOP, ");
            whereBuilder
                    .append(" 			 				 BOP_OCORRENCIA_AGENCIA.CD_AGENCIA,  BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL, BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL, BOP_AGENCIA.DS_AGENCIA, ");
            whereBuilder
                    .append(" 							( SELECT BOP_STATUS_OCORRENCIA.DS_STATUS_OCORRENCIA ");
            whereBuilder.append(" 								FROM BOP_STATUS_OCORRENCIA ");
            whereBuilder
                    .append(" 									JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA ) ");
            whereBuilder
                    .append(" 									WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = ( SELECT MAX(BCS.ID_OCORRENCIA_SITUACAO) ");
            whereBuilder
                    .append("																								FROM BOP_OCORRENCIA_SITUACAO BCS ");
            whereBuilder
                    .append("																									WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP ");
            whereBuilder.append("																							) ");
            whereBuilder.append("							) AS STATUS_VALIDACAO, ");
            whereBuilder
                    .append("  							(SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA ");
            whereBuilder.append("								FROM BOP_STATUS_OCORRENCIA ");
            whereBuilder
                    .append("									JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA) ");
            whereBuilder
                    .append("  										WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO) ");
            whereBuilder
                    .append("																									FROM BOP_OCORRENCIA_SITUACAO BCS ");
            whereBuilder
                    .append("																										WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP ");
            whereBuilder
                    .append("   																										AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP ");
            whereBuilder.append("																								)");
            whereBuilder.append("							) AS ID_STATUS_VALIDACAO, ");
            whereBuilder.append("						BOP_OCORRENCIA.DT_CRIACAO ");
            whereBuilder.append("   					FROM BOP_OCORRENCIA  ");
            whereBuilder
                    .append("							JOIN BOP_CHAMADO_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP ) ");
            whereBuilder
                    .append(" 							JOIN BOP_ACIDENTE ON (BOP_OCORRENCIA.NR_BOP = BOP_ACIDENTE.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_ACIDENTE.TIPO_BOP) ");
            whereBuilder
                    .append(" 							LEFT JOIN BOP_INCIDENTE ON (BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE) ");
            whereBuilder
                    .append(" 							JOIN BOP_OCORRENCIA_AGENCIA ON(BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_AGENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP =  BOP_OCORRENCIA_AGENCIA.TIPO_BOP  ) ");
            whereBuilder
                    .append(" 							JOIN BOP_OCORRENCIA_AGENCIA_DEON ON(BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA  ) ");
            whereBuilder
                    .append(" 							JOIN BOP_UNIDADE_POLICIAL ON (BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL) ");
            whereBuilder
                    .append(" 							JOIN BOP_AGENCIA  ON (BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = BOP_AGENCIA.CD_AGENCIA) ");
            whereBuilder
                    .append("							WHERE BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA NOT IN ('6')	");
            whereBuilder
                    .append("								AND  BOP_OCORRENCIA_AGENCIA.NR_CHAMADO = ? ");
            whereBuilder
                    .append("								AND  BOP_OCORRENCIA_AGENCIA.TIPO_BOP <> 'R' ");
            whereBuilder
                    .append("								AND BOP_OCORRENCIA_AGENCIA_DEON.FL_TRANSITO = 'S' ");

            parameters
                    .put(++indexParameter, ocorrenciaTransient.getNrChamado());

            whereBuilder.append(" 							ORDER BY NR_BOP DESC ");
            whereBuilder.append("			) WHERE ROWNUM <= ? ");

            parameters.put(++indexParameter, maxResult);

            query = em.createNativeQuery(whereBuilder.toString(),
                    ConsultaOcorrenciaTransient.class);

            for (java.util.Map.Entry<Integer, Object> entry : parameters
                    .entrySet()) {
                query.setParameter(entry.getKey(), entry.getValue());
            }

            try {
                listaConsultaOcorrenciaTransient = query.getResultList();

                return listaConsultaOcorrenciaTransient;
            } catch (Exception e) {
                throw new BusinessException("012_228: "
                        + "Ocorreu um erro inesperado.", e);

            }

        } else {

            if (ocorrenciaTransient.getCdMunicipio() > 0) {
                whereBuilder.append(" AND ENDERECO.CD_MUNICIPIO = ? ");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getCdMunicipio());
                if (ocorrenciaTransient.getCdBairro() > 0) {
                    whereBuilder.append(" AND ENDERECO.CD_BAIRRO = ? ");
                    parameters.put(++indexParameter,
                            ocorrenciaTransient.getCdBairro());
                }
            }

            if (ocorrenciaTransient.getSituacaoOcorrencia() != 0) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA = ? ");
                parameters.put(++indexParameter,
                        ocorrenciaTransient.getSituacaoOcorrencia());

            } else {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA IN (1, 4, 10) ");
            }

            if (ocorrenciaTransient.getStatusValidacao() != 0) {
                whereBuilder
                        .append(" AND (SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA   ");
                whereBuilder.append(" 			FROM BOP_STATUS_OCORRENCIA ");
                whereBuilder
                        .append("				JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA) ");
                whereBuilder
                        .append("				WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO) ");
                whereBuilder
                        .append("																			FROM BOP_OCORRENCIA_SITUACAO BCS ");
                whereBuilder
                        .append("																				WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP ");
                whereBuilder.append("																		) ");
                whereBuilder.append("		) = ? ");

                parameters.put(++indexParameter,
                        ocorrenciaTransient.getStatusValidacao());

            }

            if (ocorrenciaTransient.getBopIncidente() != null) {
                whereBuilder
                        .append(" AND BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL= ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopIncidente().getTpIncidente());
            }

            if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
                whereBuilder
                        .append("AND  BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = 2");
                whereBuilder
                        .append(" AND  BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());
                whereBuilder
                        .append(" AND  BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ? ");
                parameters.put(++indexParameter, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());
            }

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) {
                whereBuilder
                        .append(" AND BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL LIKE  ? ");
                if (ocorrenciaTransient.isCheckNmEnvolvido()) {

                    parameters.put(++indexParameter,
                            ocorrenciaTransient.getNmEnvolvido());
                } else {

                    parameters.put(++indexParameter,
                            "%" + ocorrenciaTransient.getNmEnvolvido() + "%");
                }
            }

        }

        StringBuilder columnsBuilder = new StringBuilder();
        StringBuilder columnsSelectBuilder = new StringBuilder();
        columnsSelectBuilder
                .append(" 	SELECT BOP_OCORRENCIA_AGENCIA.NR_CHAMADO, ");

        columnsSelectBuilder
                .append(" ( SELECT BCO2.NR_CHAMADO FROM BOP_CHAMADO_OCORRENCIA BCO2  ");

        columnsSelectBuilder
                .append(" JOIN BOP_OCORRENCIA_TRANSITO_DEON BOTD ON (BCO2.NR_BOP = BOTD.NR_BOP_VINCULADO AND BCO2.TIPO_BOP = BOTD.TIPO_BOP_VINCULADO) ");
        columnsSelectBuilder
                .append(" JOIN BOP_OCORRENCIA_DEON BOD2 ON (BOTD.ID_OCORRENCIA_DEON = BOD2.ID_OCORRENCIA_DEON) ");

        columnsSelectBuilder
                .append(" WHERE  BOD2.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BOD2.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP) AS NR_CHAMADO_VINCULADO, ");

        columnsSelectBuilder
                .append(" BOP_OCORRENCIA.DT_FATO, BOP_OCORRENCIA.DS_BAIRRO, BOP_OCORRENCIA.DS_CIDADE, ");
        columnsSelectBuilder
                .append(" 							BOP_OCORRENCIA.FL_SITUACAO_BOP, BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BOP_OCORRENCIA.NR_BOP, BOP_OCORRENCIA.TIPO_BOP, ");
        columnsSelectBuilder
                .append(" 							 BOP_OCORRENCIA_AGENCIA.CD_AGENCIA,  BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL, PA_UNID_POLICIAL.GET_UNIDADE_POLICIAL(BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL) AS DS_UNID_POLICIAL, PA_AGENCIA.GET_AGENCIA(BOP_OCORRENCIA_AGENCIA.CD_AGENCIA) DS_AGENCIA, ");
        columnsSelectBuilder.append(" 							BOP_OCORRENCIA.DT_CRIACAO, ");
        columnsSelectBuilder
                .append(" 							( SELECT BOP_STATUS_OCORRENCIA.DS_STATUS_OCORRENCIA ");
        columnsSelectBuilder.append(" 									FROM BOP_STATUS_OCORRENCIA ");
        columnsSelectBuilder
                .append(" 										JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA )");
        columnsSelectBuilder
                .append(" 										WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = ( SELECT MAX(BCS.ID_OCORRENCIA_SITUACAO) ");
        columnsSelectBuilder
                .append(" 																									FROM BOP_OCORRENCIA_SITUACAO BCS ");
        columnsSelectBuilder
                .append("																											WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP");
        columnsSelectBuilder.append("																									)");
        columnsSelectBuilder.append("								) AS STATUS_VALIDACAO,");
        columnsSelectBuilder
                .append(" 							(SELECT BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA ");
        columnsSelectBuilder.append("									FROM BOP_STATUS_OCORRENCIA ");
        columnsSelectBuilder
                .append("										JOIN BOP_OCORRENCIA_SITUACAO ON (BOP_STATUS_OCORRENCIA.ID_STATUS_OCORRENCIA = BOP_OCORRENCIA_SITUACAO.ID_STATUS_OCORRENCIA) ");
        columnsSelectBuilder
                .append("  									WHERE BOP_OCORRENCIA_SITUACAO.ID_OCORRENCIA_SITUACAO = (SELECT MAX (BCS.ID_OCORRENCIA_SITUACAO) ");
        columnsSelectBuilder
                .append("																									FROM BOP_OCORRENCIA_SITUACAO BCS ");
        columnsSelectBuilder
                .append("																										WHERE BCS.NR_BOP = BOP_OCORRENCIA.NR_BOP ");
        columnsSelectBuilder
                .append(" 																										AND BCS.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP ");
        columnsSelectBuilder.append("																								)");
        columnsSelectBuilder.append("								) AS ID_STATUS_VALIDACAO,");
        columnsSelectBuilder.append("								BOP_OCORRENCIA.DT_CRIACAO");

        columnsBuilder.append("  						FROM BOP_OCORRENCIA  ");

        if (ocorrenciaTransient.getCdMunicipio() > 0) {
            columnsBuilder
                    .append(" 							JOIN BOP_OCORRENCIA_DEON DEON ON ( BOP_OCORRENCIA.NR_BOP = DEON.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = DEON.TIPO_BOP  ) ");
            columnsBuilder
                    .append(" 							JOIN BOP_ENDERECO_OCORRENCIA_DEON ENDERECO ON (DEON.ID_ENDERECO_OCORRENCIA_DEON = ENDERECO.ID_ENDERECO_OCORRENCIA_DEON) ");
        }

        if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) {
            columnsBuilder
                    .append(" 							LEFT JOIN BOP_ENVOLVIDOS_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP =BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP  AND BOP_OCORRENCIA.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP) ");
        }

        columnsBuilder
                .append(" 							LEFT JOIN BOP_INCIDENTE ON ( BOP_INCIDENTE.TP_INCIDENTE = BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL ) ");
        columnsBuilder
                .append(" 							JOIN BOP_OCORRENCIA_AGENCIA ON(BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_AGENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP =  BOP_OCORRENCIA_AGENCIA.TIPO_BOP  ) ");
        columnsBuilder
                .append(" 							JOIN BOP_OCORRENCIA_AGENCIA_DEON ON(BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA  ) ");
        columnsBuilder.append("							WHERE ");
        columnsBuilder
                .append("								BOP_OCORRENCIA_AGENCIA.TIPO_BOP <> 'R' ");
        columnsBuilder
                .append("								AND BOP_OCORRENCIA_AGENCIA_DEON.FL_TRANSITO = 'S' ");
        // columnsBuilder.append(
        // "								AND  BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA NOT IN ('6') "
        // );
        columnsBuilder.append(whereBuilder);

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT NR_CHAMADO, NR_CHAMADO_VINCULADO, DT_FATO, DS_BAIRRO, DS_CIDADE, FL_SITUACAO_BOP , FL_SITUACAO_OCORRENCIA, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, CD_AGENCIA, ");
        sql.append(" 		CD_UNID_POLICIAL, DS_UNID_POLICIAL,DS_AGENCIA,STATUS_VALIDACAO, ID_STATUS_VALIDACAO  ");
        sql.append("		FROM ( ");
        sql.append(columnsSelectBuilder.toString() + columnsBuilder);
        sql.append(" ORDER BY BOP_OCORRENCIA.NR_BOP  DESC ) WHERE ROWNUM <= "
                + maxResult);

        query = em.createNativeQuery(sql.toString(),
                ConsultaOcorrenciaTransient.class);

        for (java.util.Map.Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        try {
            listaConsultaOcorrenciaTransient = query.getResultList();

            return listaConsultaOcorrenciaTransient;
        } catch (Exception e) {
            throw new BusinessException("012_228: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaOcorrenciaSigilosaTransient(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal,
            Boolean isSigilosa, Long usuarioLogado, Boolean isSiplan)
            throws BusinessException {

        Query query = null;

        String strPesFonetica = "";

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        Integer indexParameters = 0;

        StringBuffer queryString = new StringBuffer();

        if (ocorrenciaTransient.getNrChamado() != null) {

            queryString
                    .append("SELECT BO.NR_BOP, BO.TIPO_BOP, BO.DT_CRIACAO, BCO.NR_CHAMADO, DS_INCIDENTE, ID_INCIDENTE_PAI, BOA.TP_INCIDENTE, BUP.DS_UNID_POLICIAL, BOAD.FL_SITUACAO_OCORRENCIA AS FL_SITUACAO_BOP,");
            queryString.append("  		(SELECT COUNT(1)");
            queryString.append("			FROM BOP_OCORRENCIA_DEON DEON");
            queryString
                    .append("				JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON)");
            queryString
                    .append("				WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP");
            queryString.append("		) QTD_DEVOLUCAO");
            queryString.append("	 FROM BOP_OCORRENCIA BO ");
            queryString
                    .append("		JOIN BOP_OCORRENCIA_AGENCIA BOA ON (BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP)");
            queryString
                    .append("		JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON (BOA.CD_OCORRENCIA_AGENCIA = BOAD.CD_OCORRENCIA_AGENCIA)");
            queryString
                    .append("		JOIN BOP_CHAMADO_OCORRENCIA BCO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP)");
            queryString
                    .append("		LEFT JOIN BOP_UNIDADE_POLICIAL BUP ON (BUP.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL AND BUP.CD_AGENCIA = BOA.CD_AGENCIA)");
            queryString
                    .append("		LEFT JOIN BOP_INCIDENTE ON (BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
            queryString
                    .append("		JOIN BOP_OCORRENCIA_DEON BOD ON (BO.NR_BOP = BOD.NR_BOP AND BO.TIPO_BOP = BOD.TIPO_BOP)");
            queryString.append("		WHERE BCO.NR_CHAMADO = ?");

            parameters.put(++indexParameters,
                    ocorrenciaTransient.getNrChamado());

            queryString
                    .append("			AND BOAD.FL_SITUACAO_OCORRENCIA IN (1, 4, 6 ,10)");
            queryString.append(" 			AND BOA.TIPO_BOP = 'R' ");

            if (!isSiplan) { // se o usuário não estiver logado no siplan deverá
                // ter permissão para visualizar a ocorrência
                queryString
                        .append(" 	AND BOD.ID_OCORRENCIA_DEON IN (SELECT a.ID_OCORRENCIA_DEON");
                queryString
                        .append(" 										FROM BOP_ACESSO_USUARIO_OCOR_DEON a");
                queryString.append("										WHERE a.ID_USUARIO = ?");

                parameters.put(++indexParameters, usuarioLogado);

                queryString
                        .append("										AND a.ID_OCORRENCIA_DEON = BOD.ID_OCORRENCIA_DEON");
                queryString
                        .append("										AND a.ID_USUARIO_EXCLUSAO IS NULL");
                queryString.append(" 									)");

            }

            if (ocorrenciaTransient.isConsultaExterna()) {

                queryString.append("  AND EXISTS (  SELECT BOAD.*");
                queryString
                        .append("					FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD");
                queryString
                        .append("						JOIN BOP_OCORRENCIA_AGENCIA BOA ON  (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA) ");
                queryString
                        .append("						WHERE BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP");
                queryString.append("							AND BOA.CD_AGENCIA = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                queryString.append("							AND BOA.CD_UNID_POLICIAL = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());

                queryString.append("			)");

            }

        } else {

            queryString
                    .append(" SELECT NR_BOP, TIPO_BOP , DT_CRIACAO, NR_CHAMADO, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, DS_UNID_POLICIAL, FL_SITUACAO_BOP, QTD_DEVOLUCAO");
            queryString
                    .append("	FROM ( SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO AS DT_CRIACAO, BCO.NR_CHAMADO, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI,");
            queryString
                    .append("				  BOP_INCIDENTE.TP_INCIDENTE, BUP.DS_UNID_POLICIAL,");
            queryString.append("					NVL(( SELECT BOAD.FL_SITUACAO_OCORRENCIA");
            queryString.append("							FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD");
            queryString
                    .append("								JOIN BOP_OCORRENCIA_AGENCIA BOA ON  (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA) ");
            queryString
                    .append("								WHERE BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP");
            queryString.append("								AND BOA.CD_AGENCIA = ?");

            parameters.put(++indexParameters, usuarioSessionLocal
                    .getUsuarioLogado().getCdAgencia());

            queryString.append("								AND BOA.CD_UNID_POLICIAL = ?");

            parameters.put(++indexParameters, usuarioSessionLocal
                    .getUsuarioLogado().getCdUnidPolicial());

            queryString.append("						 ), BO.FL_SITUACAO_BOP ");
            queryString.append("						) FL_SITUACAO_BOP, ");
            queryString.append("						(SELECT COUNT(1)");
            queryString.append("							FROM BOP_OCORRENCIA_DEON DEON");
            queryString
                    .append("								JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON)");
            queryString
                    .append("								WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP");
            queryString.append(" 						) QTD_DEVOLUCAO");
            queryString.append("				FROM BOP_OCORRENCIA BO");
            queryString
                    .append("		            JOIN BOP_OCORRENCIA_AGENCIA BOA ON (BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP)");
            queryString
                    .append("		            JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON (BOA.CD_OCORRENCIA_AGENCIA = BOAD.CD_OCORRENCIA_AGENCIA)");
            queryString
                    .append("					JOIN BOP_CHAMADO_OCORRENCIA BCO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP)");
            queryString
                    .append("					JOIN BOP_OCORRENCIA_DEON BOD ON (BO.NR_BOP = BOD.NR_BOP AND BO.TIPO_BOP = BOD.TIPO_BOP)");
            queryString
                    .append("					 LEFT JOIN BOP_OCOR_LOCAL_CRIME_DEON BOLCD ON (BOLCD.ID_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON)");
            queryString
                    .append("					LEFT JOIN BOP_INCIDENTE ON (BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
            queryString
                    .append("					LEFT JOIN BOP_UNIDADE_POLICIAL BUP ON  (BUP.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL  AND BUP.CD_AGENCIA = BOA.CD_AGENCIA)");

            if (ocorrenciaTransient.getCdUf() != null
                    & !ocorrenciaTransient.getCdUf().isEmpty()) {

                queryString
                        .append("			LEFT JOIN BOP_ENDERECO_OCORRENCIA_DEON ENDERECO ON (BOD.ID_ENDERECO_OCORRENCIA_DEON = ENDERECO.ID_ENDERECO_OCORRENCIA_DEON)");

                queryString.append(" 			WHERE ENDERECO.CD_UF = ?");
                queryString.append(" 			AND BO.TIPO_BOP = 'R' ");

                parameters
                        .put(++indexParameters, ocorrenciaTransient.getCdUf());

                if (ocorrenciaTransient.getCdMunicipio() > 0) {

                    queryString.append(" 		 	AND ENDERECO.CD_MUNICIPIO = ?");

                    parameters.put(++indexParameters,
                            ocorrenciaTransient.getCdMunicipio());
                }
                if (ocorrenciaTransient.getCdBairro() > 0) {

                    queryString.append(" 			AND ENDERECO.CD_BAIRRO = ?");

                    parameters.put(++indexParameters,
                            ocorrenciaTransient.getCdBairro());
                }
            } else {
                queryString.append(" 	WHERE 1=1");
                queryString.append(" 		AND BO.TIPO_BOP = 'R' ");
            }

            if (dataInicial != null) {

                queryString.append(" 		AND TRUNC(DT_CRIACAO) >= ?");

                parameters.put(++indexParameters, dataInicial);
            }

            if (dataFinal != null) {

                queryString.append(" 		AND TRUNC(DT_CRIACAO) <= ?");

                parameters.put(++indexParameters, dataFinal);
            }

            if (horaInicial != null) {

                queryString
                        .append(" 		AND TO_CHAR(DT_CRIACAO,'HH24MISS') >= ?");

                parameters.put(++indexParameters,
                        new SimpleDateFormat("HHmmss").format(horaInicial));

            }

            if (horaFinal != null) {

                queryString
                        .append(" 		AND TO_CHAR(DT_CRIACAO,'HH24MISS') <= ?");

                parameters.put(++indexParameters,
                        new SimpleDateFormat("HHmmss").format(horaFinal));
            }

            if (isSiplan) {
                queryString.append(" 		AND (  BOA.CD_AGENCIA = ?   ");

                parameters.put(++indexParameters, 3);

                queryString
                        .append("					AND ( BOA.CD_UNID_POLICIAL = ? OR BOA.CD_UNID_POLICIAL = ? )");

                parameters.put(++indexParameters, Integer
                        .valueOf(UnidadeAcessoSigiloso.siplan.getCodigo()));
                parameters.put(++indexParameters,
                        Integer.valueOf(UnidadeAcessoSigiloso.siplanMaster
                                .getCodigo()));

                queryString.append("					OR (BOA.CD_AGENCIA = ? ");

                parameters.put(++indexParameters, 3);

                queryString.append("							AND ( BOA.CD_UNID_POLICIAL <> ?  ");

                parameters.put(++indexParameters, Integer
                        .valueOf(UnidadeAcessoSigiloso.siplan.getCodigo()));

                queryString.append("									AND BOA.CD_UNID_POLICIAL <> ?  ");

                parameters.put(++indexParameters,
                        Integer.valueOf(UnidadeAcessoSigiloso.siplanMaster
                                .getCodigo()));

                queryString.append("								)");
                queryString.append("						)");
                queryString.append(" 		 	) ");

            } else if (isNotNullOrEmpty(ocorrenciaTransient
                    .getBopUnidadePolicial())
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial().getId())) {

                queryString.append(" 		AND ( EXISTS (SELECT 1");
                queryString.append("						FROM BOP_OCORRENCIA_AGENCIA BOA");
                queryString.append("							WHERE BOA.CD_AGENCIA = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                queryString.append("								AND BOA.CD_UNID_POLICIAL = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());

                queryString
                        .append("								AND BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP");
                queryString.append("					)");
                queryString.append("			)");

            }

            if (ocorrenciaTransient.getBopIncidente() != null) {

                queryString.append("  		AND BOA.TP_INCIDENTE =  ? ");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopIncidente().getTpIncidente());
            }

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) { // pesquisa
                // fonética

                char cTam, cPosi, cPriNome;

                if (ocorrenciaTransient.isCheckNmEnvolvido()) {

                    cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                    // quantidade de partes (após fonetizado) do
                    // nome informado
                    cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                    // exatamente na posição das partes do nome
                    // informado
                    cPriNome = 'S'; // [S]im -> A primeira parte do nome deve
                    // ser extamente igual a primeira parte do
                    // nome informado

                } else {

                    cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade
                    // ou mais de partes do nome informado
                    cPosi = 'R'; // [R]elativo -> As partes do nome devem estar
                    // na mesma ordem das partes do nome
                    // informado
                    cPriNome = 'N'; // [N]ão -> Não importa a posição da
                    // primeira parte do nome

                }

                queryString.append(" AND BO.NR_BOP IN ( SELECT COLUMN_VALUE ");
                queryString
                        .append("					FROM TABLE ( PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_NRBOP_NOME_FONETIZADO ( ? , ? , ? , ?) ");

                parameters.put(++indexParameters,
                        ocorrenciaTransient.getNmEnvolvidoNorm());
                parameters.put(++indexParameters, cTam);
                parameters.put(++indexParameters, cPosi);
                parameters.put(++indexParameters, cPriNome);

                queryString.append("								) ");
                queryString.append("				)");
            }

            if (ocorrenciaTransient.getSituacaoOcorrencia() != 0) {

                queryString.append("	AND EXISTS (SELECT BOA.NR_BOP");
                queryString
                        .append("					FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD");
                queryString
                        .append("						JOIN BOP_OCORRENCIA_AGENCIA BOA ON (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA)");
                queryString
                        .append("						WHERE BOAD.FL_SITUACAO_OCORRENCIA = ? ");

                parameters.put(++indexParameters,
                        ocorrenciaTransient.getSituacaoOcorrencia());

                queryString
                        .append("							AND BO.NR_BOP = BOA.NR_BOP AND BO.TIPO_BOP = BOA.TIPO_BOP");

                if (isNotNullOrEmpty(ocorrenciaTransient
                        .getBopUnidadePolicial())
                        && isNotNullOrEmpty(ocorrenciaTransient
                                .getBopUnidadePolicial().getId())) {

                    queryString.append("							AND BOA.CD_AGENCIA =   ? ");

                    parameters.put(++indexParameters, ocorrenciaTransient
                            .getBopUnidadePolicial().getId().getCdAgencia());

                    if (isSiplan) {
                        queryString
                                .append("							AND (BOA.CD_UNID_POLICIAL = ? or BOA.CD_UNID_POLICIAL = ? or BOA.CD_UNID_POLICIAL = ?) ");

                        parameters.put(++indexParameters,
                                UnidadeAcessoSigiloso.dhppPlantao.getCodigo());
                        parameters.put(++indexParameters,
                                UnidadeAcessoSigiloso.siplan.getCodigo());
                        parameters.put(++indexParameters,
                                UnidadeAcessoSigiloso.siplanMaster.getCodigo());

                    } else {
                        queryString
                                .append("							AND BOA.CD_UNID_POLICIAL = ?");

                        parameters.put(++indexParameters, ocorrenciaTransient
                                .getBopUnidadePolicial().getId()
                                .getCdUnidPolicial());

                    }

                }

                queryString.append("			)");

            } else {

                queryString
                        .append(" 							AND BOAD.FL_SITUACAO_OCORRENCIA IN (1, 4, 6, 10)");

            }

            if (!isSiplan) { // se o usuário não estiver logado no siplan deverá
                // ter permissão para visualizar a ocorrência

                queryString
                        .append(" 	AND BOD.ID_OCORRENCIA_DEON IN (SELECT a.ID_OCORRENCIA_DEON");
                queryString
                        .append(" 										FROM BOP_ACESSO_USUARIO_OCOR_DEON a");
                queryString.append("										WHERE a.ID_USUARIO = ?");

                parameters.put(++indexParameters, usuarioLogado);

                queryString
                        .append("										AND a.ID_OCORRENCIA_DEON = BOD.ID_OCORRENCIA_DEON");
                queryString
                        .append("										AND a.ID_USUARIO_EXCLUSAO IS NULL");
                queryString.append(" 									)");

            }

            queryString
                    .append(" ORDER BY DT_CRIACAO DESC ) WHERE ROWNUM <= ? ");

            parameters.put(++indexParameters, (maxResult + strPesFonetica));

        }

        query = em.createNativeQuery(queryString.toString(),
                ConsultaOcorrenciaTransient.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        try {
            List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient = query
                    .getResultList();

            return listaConsultaOcorrenciaTransient;
        } catch (Exception e) {
            throw new BusinessException("012_229: "
                    + "Ocorreu um erro inesperado.", e);
        }
    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaOcorrenciaTransient(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal,
            Long usuarioLogado) throws BusinessException {

        Query query = null;

        String strPesFonetica = "";

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        Integer indexParameters = 0;

        StringBuffer queryString = new StringBuffer();

        if (ocorrenciaTransient.getNrChamado() != null) {

            queryString
                    .append("SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO, BCO.NR_CHAMADO, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BUP.DS_UNID_POLICIAL, BO.FL_SITUACAO_BOP,");
            queryString.append("  		(SELECT COUNT(1)");
            queryString.append("			FROM BOP_OCORRENCIA_DEON DEON");
            queryString
                    .append("				JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON)");
            queryString
                    .append("				WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP");
            queryString.append("		) QTD_DEVOLUCAO");
            queryString.append("	 FROM BOP_OCORRENCIA BO ");
            queryString
                    .append("		JOIN BOP_CHAMADO_OCORRENCIA BCO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP)");
            queryString
                    .append("		LEFT JOIN BOP_UNIDADE_POLICIAL BUP ON  (BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL  AND BUP.CD_AGENCIA = BO.CD_AGENCIA)");
            queryString
                    .append("		LEFT JOIN BOP_INCIDENTE ON (BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
            queryString
                    .append("		JOIN BOP_OCORRENCIA_DEON BOD ON (BO.NR_BOP = BOD.NR_BOP AND BO.TIPO_BOP = BOD.TIPO_BOP)");
            queryString.append("		WHERE BCO.NR_CHAMADO = ?");
            queryString.append(" 			AND BO.TIPO_BOP <> 'R'");
            queryString.append(" 			AND BO.TIPO_BOP <> 'T'");

            parameters.put(++indexParameters,
                    ocorrenciaTransient.getNrChamado());

            queryString.append("			AND BO.FL_SITUACAO_BOP IN (1, 4, 6 ,10)");

            if (ocorrenciaTransient.isConsultaExterna()) {

                queryString.append("  AND EXISTS (  SELECT BOAD.*");
                queryString
                        .append("					FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD");
                queryString
                        .append("						JOIN BOP_OCORRENCIA_AGENCIA BOA ON  (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA) ");
                queryString
                        .append("						WHERE BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP");
                queryString.append("							AND BOA.CD_AGENCIA = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                queryString.append("							AND BOA.CD_UNID_POLICIAL = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());

                queryString.append("			)");

            }

        } else {

            queryString
                    .append(" SELECT NR_BOP, TIPO_BOP , DT_CRIACAO, NR_CHAMADO, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, DS_UNID_POLICIAL, FL_SITUACAO_BOP, QTD_DEVOLUCAO");
            queryString
                    .append("	FROM ( SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO AS DT_CRIACAO, BCO.NR_CHAMADO, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI,");
            queryString
                    .append("				  BOP_INCIDENTE.TP_INCIDENTE, BUP.DS_UNID_POLICIAL,");
            queryString.append("					NVL(( SELECT BOAD.FL_SITUACAO_OCORRENCIA");
            queryString.append("							FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD");
            queryString
                    .append("								JOIN BOP_OCORRENCIA_AGENCIA BOA ON  (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA) ");
            queryString
                    .append("								WHERE BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP");
            queryString.append("								AND BOA.CD_AGENCIA = ?");

            parameters.put(++indexParameters, usuarioSessionLocal
                    .getUsuarioLogado().getCdAgencia());

            queryString.append("								AND BOA.CD_UNID_POLICIAL = ?");

            parameters.put(++indexParameters, usuarioSessionLocal
                    .getUsuarioLogado().getCdUnidPolicial());

            queryString.append("						 ), BO.FL_SITUACAO_BOP ");
            queryString.append("						) FL_SITUACAO_BOP, ");
            queryString.append("						(SELECT COUNT(1)");
            queryString.append("							FROM BOP_OCORRENCIA_DEON DEON");
            queryString
                    .append("								JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON)");
            queryString
                    .append("								WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP");
            queryString.append(" 						) QTD_DEVOLUCAO");
            queryString.append("				FROM BOP_OCORRENCIA BO");
            queryString
                    .append("					JOIN BOP_CHAMADO_OCORRENCIA BCO ON (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP)");
            queryString
                    .append("					JOIN BOP_OCORRENCIA_DEON BOD ON (BO.NR_BOP = BOD.NR_BOP AND BO.TIPO_BOP = BOD.TIPO_BOP)");
            queryString
                    .append("					LEFT JOIN BOP_INCIDENTE ON (BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE)");
            queryString
                    .append("					LEFT JOIN BOP_UNIDADE_POLICIAL BUP ON  (BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL  AND BUP.CD_AGENCIA = BO.CD_AGENCIA)");

            if (ocorrenciaTransient.getCdUf() != null
                    & !ocorrenciaTransient.getCdUf().isEmpty()) {

                queryString
                        .append("			LEFT JOIN BOP_ENDERECO_OCORRENCIA_DEON ENDERECO ON (BOD.ID_ENDERECO_OCORRENCIA_DEON = ENDERECO.ID_ENDERECO_OCORRENCIA_DEON)");

                queryString.append(" 			WHERE ENDERECO.CD_UF = ?");

                parameters
                        .put(++indexParameters, ocorrenciaTransient.getCdUf());

                if (ocorrenciaTransient.getCdMunicipio() > 0) {

                    queryString.append(" 		 	AND ENDERECO.CD_MUNICIPIO = ?");

                    parameters.put(++indexParameters,
                            ocorrenciaTransient.getCdMunicipio());
                }
                if (ocorrenciaTransient.getCdBairro() > 0) {

                    queryString.append(" 			AND ENDERECO.CD_BAIRRO = ?");

                    parameters.put(++indexParameters,
                            ocorrenciaTransient.getCdBairro());
                }

                queryString.append(" 	AND BO.TIPO_BOP <> 'R'");
                queryString.append(" 	AND BO.TIPO_BOP <> 'T'");

            } else {

                queryString.append(" 	WHERE 1=1");
                queryString.append(" 	AND BO.TIPO_BOP <> 'R'");
                queryString.append(" 	AND BO.TIPO_BOP <> 'T'");

            }

            if (dataInicial != null) {

                queryString
                        .append(" 		AND TRUNC(DT_CRIACAO) >= TO_DATE(?, 'DD/MM/YYYY') ");

                parameters.put(++indexParameters, new SimpleDateFormat(
                        "dd/MM/yyyy").format(dataInicial));
            }

            if (dataFinal != null) {

                queryString
                        .append(" 		AND TRUNC(DT_CRIACAO) <= TO_DATE(?, 'DD/MM/YYYY') ");

                parameters.put(++indexParameters, new SimpleDateFormat(
                        "dd/MM/yyyy").format(dataFinal));
            }

            if (horaInicial != null) {

                queryString
                        .append(" 		AND TO_CHAR(DT_CRIACAO,'HH24MISS') >= ?");

                parameters.put(++indexParameters,
                        new SimpleDateFormat("HHmmss").format(horaInicial));

            }

            if (horaFinal != null) {

                queryString
                        .append(" 		AND TO_CHAR(DT_CRIACAO,'HH24MISS') <= ?");

                parameters.put(++indexParameters,
                        new SimpleDateFormat("HHmmss").format(horaFinal));
            }

            // if ( isSiplan ) {
            // queryString.append( " 		AND (  BO.CD_AGENCIA = ?   " );
            //
            // parameters.put( ++indexParameters, 3 );
            //
            // queryString.append(
            // "					AND ( BO.CD_UNID_POLICIAL = ? OR BO.CD_UNID_POLICIAL = ? )"
            // );
            //
            // parameters.put( ++indexParameters, Integer.valueOf(
            // UnidadeAcessoSigiloso.siplan.getCodigo() ) );
            // parameters.put( ++indexParameters, Integer.valueOf(
            // UnidadeAcessoSigiloso.siplanMaster.getCodigo() ) );
            //
            // queryString.append( "					OR (BO.CD_AGENCIA = ? " );
            //
            // parameters.put( ++indexParameters, 3 );
            //
            // queryString.append( "							AND ( BO.CD_UNID_POLICIAL <> ?  " );
            //
            // parameters.put( ++indexParameters, Integer.valueOf(
            // UnidadeAcessoSigiloso.siplan.getCodigo() ) );
            //
            // queryString.append( "									AND BO.CD_UNID_POLICIAL <> ?  " );
            //
            // parameters.put( ++indexParameters, Integer.valueOf(
            // UnidadeAcessoSigiloso.siplanMaster.getCodigo() ) );
            //
            // queryString.append( "								)" );
            // queryString.append( "						)" );
            // queryString.append( " 		 	) " );
            //
            // } else
            if (isNotNullOrEmpty(ocorrenciaTransient.getBopUnidadePolicial())
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial().getId())) {

                queryString.append("  		AND ( BO.CD_AGENCIA = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                queryString.append("  		AND BO.CD_UNID_POLICIAL = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());

                queryString.append(" 		OR ( EXISTS (SELECT 1");
                queryString.append("						FROM BOP_OCORRENCIA_AGENCIA BOA");
                queryString.append("							WHERE BOA.CD_AGENCIA = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());

                queryString.append("								AND BOA.CD_UNID_POLICIAL = ?");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());

                queryString
                        .append("								AND BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP");
                queryString.append("					) )");
                queryString.append("			)");

            }

            if (ocorrenciaTransient.getBopIncidente() != null) {

                queryString.append("  		AND TP_INCIDENTE =  ? ");

                parameters.put(++indexParameters, ocorrenciaTransient
                        .getBopIncidente().getTpIncidente());
            }

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) { // pesquisa
                // fonética

                char cTam, cPosi, cPriNome;

                if (ocorrenciaTransient.isCheckNmEnvolvido()) {

                    cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                    // quantidade de partes (após fonetizado) do
                    // nome informado
                    cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                    // exatamente na posição das partes do nome
                    // informado
                    cPriNome = 'S'; // [S]im -> A primeira parte do nome deve
                    // ser extamente igual a primeira parte do
                    // nome informado

                } else {

                    cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade
                    // ou mais de partes do nome informado
                    cPosi = 'R'; // [R]elativo -> As partes do nome devem estar
                    // na mesma ordem das partes do nome
                    // informado
                    cPriNome = 'N'; // [N]ão -> Não importa a posição da
                    // primeira parte do nome

                }

                queryString.append(" AND BO.NR_BOP IN ( SELECT COLUMN_VALUE ");
                queryString
                        .append("					FROM TABLE ( PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_NRBOP_NOME_FONETIZADO ( ? , ? , ? , ?) ");

                parameters.put(++indexParameters,
                        ocorrenciaTransient.getNmEnvolvidoNorm());
                parameters.put(++indexParameters, cTam);
                parameters.put(++indexParameters, cPosi);
                parameters.put(++indexParameters, cPriNome);

                queryString.append("								) ");
                queryString.append("				)");
            }

            if (ocorrenciaTransient.getSituacaoOcorrencia() != 0) {

                queryString.append("	AND ( BO.FL_SITUACAO_BOP =  ?");

                parameters.put(++indexParameters,
                        ocorrenciaTransient.getSituacaoOcorrencia());

                queryString.append("	OR EXISTS (SELECT BOA.NR_BOP");
                queryString
                        .append("					FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD");
                queryString
                        .append("						JOIN BOP_OCORRENCIA_AGENCIA BOA ON (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA)");
                queryString
                        .append("						WHERE BOAD.FL_SITUACAO_OCORRENCIA = ? ");

                parameters.put(++indexParameters,
                        ocorrenciaTransient.getSituacaoOcorrencia());

                queryString
                        .append("							AND BO.NR_BOP = BOA.NR_BOP AND BO.TIPO_BOP = BOA.TIPO_BOP");

                if (isNotNullOrEmpty(ocorrenciaTransient
                        .getBopUnidadePolicial())
                        && isNotNullOrEmpty(ocorrenciaTransient
                                .getBopUnidadePolicial().getId())) {

                    queryString.append("							AND BOA.CD_AGENCIA =   ? ");

                    parameters.put(++indexParameters, ocorrenciaTransient
                            .getBopUnidadePolicial().getId().getCdAgencia());

                    queryString.append("							AND BOA.CD_UNID_POLICIAL = ? ");

                    parameters.put(++indexParameters, ocorrenciaTransient
                            .getBopUnidadePolicial().getId()
                            .getCdUnidPolicial());

                }

                queryString.append("			) )");

            } else {

                queryString
                        .append(" 							AND BO.FL_SITUACAO_BOP IN (1, 4, 6, 10)");

            }

            queryString
                    .append(" ORDER BY DT_CRIACAO DESC ) WHERE ROWNUM <= ? ");

            parameters.put(++indexParameters, (maxResult + strPesFonetica));

        }

        query = em.createNativeQuery(queryString.toString(),
                ConsultaOcorrenciaObjTransient.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient;
        try {
            listaConsultaOcorrenciaTransient = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_230: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listaConsultaOcorrenciaTransient;
    }

    public List<ConsultaOcorrenciaTransient> getListaConsultaOcorrenciaTransientSemLimite(
            OcorrenciaTransiente ocorrenciaTransient, int maxResult,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal,
            Boolean isSigilosa, Long usuarioLogado, Boolean isSiplan)
            throws BusinessException {

        this.connector = null;
        Query query = null;
        int parametros = 1;
        String strPesFonetica = "";
        String ocorrenciaSigilosa = "";

        StringBuffer queryString;

        if (isSigilosa) {
            if (usuarioLogado == null) {
                usuarioLogado = 0l;
            }

            ocorrenciaSigilosa = " AND BO.TIPO_BOP = 'R' "
                    + "AND EXISTS (SELECT a.ID_ACESSO_USUARIO_OCOR "
                    + "FROM BOP_ACESSO_USUARIO_OCOR_DEON a "
                    + "WHERE a.ID_USUARIO = " + usuarioLogado
                    + " AND a.ID_USUARIO_EXCLUSAO IS NULL AND ROWNUM = 1) ";
        } else {
            ocorrenciaSigilosa = " AND BO.TIPO_BOP != 'R' ";
        }

        // Matheus solicitou mudança da data do grid para data do fato.
        if (ocorrenciaTransient.getNrChamado() != null) {

            queryString = new StringBuffer(
                    " SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO, BCO.NR_CHAMADO, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, BUP.DS_UNID_POLICIAL, BO.FL_SITUACAO_BOP, "
                    + "		   		  			  (SELECT COUNT(1) FROM BOP_OCORRENCIA_DEON DEON "
                    + "		 		   			   JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON) "
                    + "			       			   WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP   ) QTD_DEVOLUCAO "
                    + " FROM BOP_OCORRENCIA BO "
                    + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP "
                    + " LEFT JOIN BOP_UNIDADE_POLICIAL BUP ON  BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL  AND BUP.CD_AGENCIA = BO.CD_AGENCIA "
                    + " LEFT JOIN BOP_INCIDENTE ON BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE"
                    + " WHERE BCO.NR_CHAMADO = ? "
                    + " AND BO.FL_SITUACAO_BOP IN (1, 4, 6 ,10) "
                    + ocorrenciaSigilosa);

            query = em.createNativeQuery(queryString.toString(),
                    ConsultaOcorrenciaObjTransient.class);

            query.setParameter(parametros++, ocorrenciaTransient.getNrChamado());

        } else {

            queryString = new StringBuffer(
                    "SELECT NR_BOP, TIPO_BOP , DT_CRIACAO, NR_CHAMADO, DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, DS_UNID_POLICIAL, FL_SITUACAO_BOP, QTD_DEVOLUCAO "
                    + " FROM ( SELECT BO.NR_BOP, BO.TIPO_BOP , BO.DT_CRIACAO AS DT_CRIACAO, BCO.NR_CHAMADO, BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, "
                    + " BOP_INCIDENTE.TP_INCIDENTE, BUP.DS_UNID_POLICIAL, BO.FL_SITUACAO_BOP,  "
                    + "		   		  (SELECT COUNT(1) FROM BOP_OCORRENCIA_DEON DEON "
                    + "		 		   JOIN BOP_DEVOLUCAO_OCORR_DEON DEV ON (DEV.ID_OCORRENCIA_DEON = DEON.ID_OCORRENCIA_DEON) "
                    + "			       WHERE BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP   ) QTD_DEVOLUCAO "
                    + " FROM BOP_OCORRENCIA BO "
                    + " LEFT JOIN BOP_INCIDENTE ON BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE"
                    + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP "
                    + " LEFT JOIN BOP_UNIDADE_POLICIAL BUP ON  BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL  AND BUP.CD_AGENCIA = BO.CD_AGENCIA  ");

            if (ocorrenciaTransient.getCdUf() != null
                    & !ocorrenciaTransient.getCdUf().isEmpty()) {

                queryString
                        .append(" JOIN  BOP_OCORRENCIA_DEON DEON ON BO.NR_BOP = DEON.NR_BOP AND BO.TIPO_BOP = DEON.TIPO_BOP ");
                queryString
                        .append(" JOIN BOP_ENDERECO_OCORRENCIA_DEON ENDERECO ON DEON.ID_ENDERECO_OCORRENCIA_DEON = ENDERECO.ID_ENDERECO_OCORRENCIA_DEON ");

                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getCdUf(), " ENDERECO.CD_UF = ?");

                if (ocorrenciaTransient.getCdMunicipio() > 0) {
                    this.appendWhereClause(queryString,
                            ocorrenciaTransient.getCdMunicipio(),
                            " ENDERECO.CD_MUNICIPIO = ?");
                }

                if (ocorrenciaTransient.getCdBairro() > 0) {
                    this.appendWhereClause(queryString,
                            ocorrenciaTransient.getCdBairro(),
                            " ENDERECO.CD_BAIRRO = ?");
                }
            }

            if (dataInicial != null) {
                this.appendWhereClause(queryString, dataInicial,
                        " TRUNC(DT_CRIACAO) >= ?");
            }
            if (dataFinal != null) {
                this.appendWhereClause(queryString, dataFinal,
                        " TRUNC(DT_CRIACAO) <= ?");
            }
            if (horaInicial != null) {
                String horaInicialString = new SimpleDateFormat("HHmmss")
                        .format(horaInicial);
                this.appendWhereClause(queryString, horaInicialString,
                        " TO_CHAR(DT_CRIACAO,'HH24:MI:SS')  >= ?");
            }
            if (horaFinal != null) {
                String horaFinalString = new SimpleDateFormat("HHmmss")
                        .format(horaFinal);
                this.appendWhereClause(queryString, horaFinalString,
                        " TO_CHAR(DT_CRIACAO,'HH24:MI:SS')  <= ?");
            }

            if (isSiplan) {
                this.appendWhereClause(queryString,
                        " ( (BO.CD_AGENCIA = 3 AND BO.CD_UNID_POLICIAL = 1495  ) ");
                this.connector = " or ";
                this.appendWhereClause(
                        queryString,
                        " ( BO.FL_SITUACAO_BOP = ? AND (BO.CD_AGENCIA = ? AND BO.CD_UNID_POLICIAL <> ?  ) ) ) ");
            }

            if (!isSiplan) {
                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getBopUnidadePolicial(),
                        "BO.CD_AGENCIA = ? ");
                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getBopUnidadePolicial(),
                        "BO.CD_UNID_POLICIAL = ? ");
            }

            this.appendWhereClause(queryString,
                    ocorrenciaTransient.getBopIncidente(), "TP_INCIDENTE = ? ");

            if (ocorrenciaTransient.getNmEnvolvidoNorm() != null) { // pesquisa
                // fonética

                char cTam, cPosi, cPriNome;

                if (ocorrenciaTransient.isCheckNmEnvolvido()) {

                    cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                    // quantidade de partes (após fonetizado) do
                    // nome informado
                    cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                    // exatamente na posição das partes do nome
                    // informado
                    cPriNome = 'S'; // [S]im -> A primeira parte do nome deve
                    // ser extamente igual a primeira parte do
                    // nome informado

                } else {

                    cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade
                    // ou mais de partes do nome informado
                    cPosi = 'R'; // [R]elativo -> As partes do nome devem estar
                    // na mesma ordem das partes do nome
                    // informado
                    cPriNome = 'N'; // [N]ão -> Não importa a posição da
                    // primeira parte do nome

                }

                strPesFonetica = " AND BO.NR_BOP IN ( SELECT COLUMN_VALUE FROM TABLE ( PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_NRBOP_NOME_FONETIZADO ( ' "
                        + ocorrenciaTransient.getNmEnvolvidoNorm()
                        + " ' , "
                        + "'"
                        + cTam
                        + "', '"
                        + cPosi
                        + "', '"
                        + cPriNome
                        + "') ) )";
            }

            if (ocorrenciaTransient.getSituacaoOcorrencia() != 0) {

                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getSituacaoOcorrencia(),
                        " BO.FL_SITUACAO_BOP = ? ");

                this.connector = " or ";
                this.appendWhereClause(
                        queryString,
                        ocorrenciaTransient.getSituacaoOcorrencia(),
                        " EXISTS"
                        + "("
                        + "	SELECT BOA.NR_BOP FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD"
                        + "	JOIN BOP_OCORRENCIA_AGENCIA BOA ON (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA)"
                        + "	WHERE"
                        + "	BOAD.FL_SITUACAO_OCORRENCIA = ?"
                        + "	AND BO.NR_BOP = BOA.NR_BOP AND BO.TIPO_BOP = BOA.TIPO_BOP");
                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getBopUnidadePolicial(),
                        "BOA.CD_AGENCIA = ? ");
                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getBopUnidadePolicial(),
                        "BOA.CD_UNID_POLICIAL = ? )");

            } else {

                this.appendWhereClause(queryString,
                        ocorrenciaTransient.getSituacaoOcorrencia(),
                        " BO.FL_SITUACAO_BOP IN (1, 4, 6, 10) ");

            }

            if (isSigilosa) {
                queryString.append(ocorrenciaSigilosa
                        + " ORDER BY DT_CRIACAO DESC ) WHERE (1 = 1) "
                        + strPesFonetica);
            } else {
                if (ocorrenciaTransient.getBopUnidadePolicial() == null) {
                    queryString
                            .append(" AND BO.TIPO_BOP != 'R' AND BO.TIPO_BOP != 'L') ORDER BY DT_CRIACAO DESC ) WHERE (1 = 1) "
                                    + strPesFonetica);
                } else {
                    queryString
                            .append(" AND BO.TIPO_BOP != 'R' AND BO.TIPO_BOP != 'L' ORDER BY DT_CRIACAO DESC ) WHERE (1 = 1) "
                                    + strPesFonetica);
                }
            }

            query = em.createNativeQuery(queryString.toString(),
                    ConsultaOcorrenciaObjTransient.class);

            if (ocorrenciaTransient.getCdUf() != null
                    & !ocorrenciaTransient.getCdUf().isEmpty()) {
                query.setParameter(parametros++, ocorrenciaTransient.getCdUf());
            }

            if (ocorrenciaTransient.getCdMunicipio() > 0) {
                query.setParameter(parametros++,
                        ocorrenciaTransient.getCdMunicipio());
            }

            if (ocorrenciaTransient.getCdBairro() > 0) {
                query.setParameter(parametros++,
                        ocorrenciaTransient.getCdBairro());
            }

            if (dataInicial != null) {
                query.setParameter(parametros++, dataInicial);
            }
            if (dataFinal != null) {
                query.setParameter(parametros++, dataFinal);
            }
            if (horaInicial != null) {
                String horaInicialString = new SimpleDateFormat("HHmmss")
                        .format(horaInicial);
                query.setParameter(parametros++, horaInicialString);
            }
            if (horaFinal != null) {
                String horaFinalString = new SimpleDateFormat("HHmmss")
                        .format(horaFinal);
                query.setParameter(parametros++, horaFinalString);
            }

            if (isSiplan) {
                int policiaCivil = 3;
                query.setParameter(parametros++,
                        StatusOcorrencia.AGUARDANDO_CONFERENCIA.getId());
                query.setParameter(parametros++, policiaCivil);// 3 = policia
                // civil
                query.setParameter(parametros++, Integer
                        .valueOf(UnidadeAcessoSigiloso.siplan.getCodigo()));
            }

            if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
                query.setParameter(parametros++, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia());
                query.setParameter(parametros++, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial());
            }

            if (ocorrenciaTransient.getBopIncidente() != null) {
                query.setParameter(parametros++, "'"
                        + ocorrenciaTransient.getBopIncidente()
                                .getTpIncidente() + "'");
            }
            if (ocorrenciaTransient.getSituacaoOcorrencia() > 0) {
                query.setParameter(parametros++,
                        ocorrenciaTransient.getSituacaoOcorrencia());
            }

        }

        if ((!isSiplan)
                && (ocorrenciaTransient.getBopUnidadePolicial() != null)) {
            this.connector = " or ";
            this.appendWhereClause(
                    queryString,
                    " ( EXISTS (SELECT 1 FROM BOP_OCORRENCIA_AGENCIA BOA WHERE BOA.CD_AGENCIA = ? AND BOA.CD_UNID_POLICIAL = ? AND BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) ) ) ");

            if (isNotNullOrEmpty(ocorrenciaTransient)
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial())
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial().getId())
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial().getId().getCdAgencia())) {
                this.appendWhereClause(queryString, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdAgencia(),
                        "BO.CD_AGENCIA = ? ");
            }
            if (isNotNullOrEmpty(ocorrenciaTransient)
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial())
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial().getId())
                    && isNotNullOrEmpty(ocorrenciaTransient
                            .getBopUnidadePolicial().getId()
                            .getCdUnidPolicial())) {
                this.appendWhereClause(queryString, ocorrenciaTransient
                        .getBopUnidadePolicial().getId().getCdUnidPolicial(),
                        "BO.CD_UNID_POLICIAL = ? ");
            }

        }

        List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaObjTransient;
        try {
            listaConsultaOcorrenciaObjTransient = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_231: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listaConsultaOcorrenciaObjTransient;
    }

    public List<BopEnvolvidoSimples> getListaBopEnvolvidoSimples(
            BopOcorrencia bopOcorrencia, int inicio, int fim, String... param)
            throws BusinessException {

        String dsNome = param[0] == null ? null : "%" + param[0].toUpperCase()
                + "%";
        String dsApelido = param[1] == null ? null : "%"
                + param[1].toUpperCase() + "%";
        String dsEnvolvimento = param[2] == null ? null : "%"
                + param[2].toUpperCase() + "%";

        int parametros = 1;

        String queryString = ""
                + " SELECT ROWNUM, ID_ENVOLVIDO, NR_BOP, TIPO_BOP, NM_COMPL_ENVOL, DS_APELIDO, DS_TIPO_ENVOL "
                + " FROM ( "
                + " 	SELECT ID_ENVOLVIDO, NR_BOP, TIPO_BOP, NM_COMPL_ENVOL, DS_APELIDO, DS_TIPO_ENVOL, ROWNUM RNUM "
                + " 	FROM ( "
                + "   	SELECT BEO.ID_ENVOLVIDO, BEO.NR_BOP, BEO.TIPO_BOP, BEO.NM_COMPL_ENVOL, BEO.DS_APELIDO, BTE.DS_TIPO_ENVOL "
                + "    	 FROM BOP_ENVOLVIDOS_OCORRENCIA BEO LEFT JOIN BOP_TIPO_ENVOLVIMENTO BTE ON BEO.CD_TIPO_ENV = BTE.CD_TIPO_ENV "
                + "   	WHERE BEO.NR_BOP = ?  "
                + "     		AND  BEO.TIPO_BOP = ? "
                + "     		AND ( ? IS NULL OR "
                + "					translate( BEO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE"
                + "					translate( ? , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')"
                + "           	) "
                + "     		AND ( ? IS NULL OR "
                + "					translate( BEO.DS_APELIDO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE"
                + "					translate( ? , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                + "          	) "
                + "     		AND ( ? IS NULL OR "
                + "					translate( BTE.DS_TIPO_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE"
                + "					translate( ? , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                + "          	) " + "   	ORDER BY BEO.NM_COMPL_ENVOL )  "
                + "	WHERE ROWNUM <= ?  ) " + " WHERE RNUM  > ?";

        Query query = em.createNativeQuery(queryString,
                BopEnvolvidoSimples.class);

        query.setParameter(parametros++, bopOcorrencia.getId().getNrBop());
        query.setParameter(parametros++, bopOcorrencia.getId().getTipoBop());

        // utilizado para filtro
        query.setParameter(parametros++, dsNome).setParameter(parametros++,
                dsNome);
        query.setParameter(parametros++, dsApelido).setParameter(parametros++,
                dsApelido);
        query.setParameter(parametros++, dsEnvolvimento).setParameter(
                parametros++, dsEnvolvimento);

        query.setParameter(parametros++, inicio + fim);
        query.setParameter(parametros++, inicio);

        List<BopEnvolvidoSimples> resultList;
        try {
            resultList = (List<BopEnvolvidoSimples>) query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_232: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return resultList;

    }

    public List<BopEnvolvidoSimples> getListaBopEnvolvidoSimplesFonema(
            BopOcorrencia bopOcorrencia, String dsNome, String dsApelido,
            Long idEnvolvimento, boolean isCheckNome, int inicio, int fim)
            throws BusinessException {

        StringBuilder queryString = new StringBuilder();

        queryString
                .append("SELECT ROWNUM, ID_ENVOLVIDO, NR_BOP, TIPO_BOP, NM_COMPL_ENVOL, DS_APELIDO, DS_TIPO_ENVOL");
        queryString.append(" 	FROM (");
        queryString
                .append("			SELECT ID_ENVOLVIDO, NR_BOP, TIPO_BOP, NM_COMPL_ENVOL, DS_APELIDO, DS_TIPO_ENVOL, ROWNUM RNUM");
        queryString.append("              FROM (");
        queryString
                .append("						SELECT BEO.ID_ENVOLVIDO, BEO.NR_BOP, BEO.TIPO_BOP, BEO.NM_COMPL_ENVOL, BEO.DS_APELIDO, BTE.DS_TIPO_ENVOL");
        queryString.append("							FROM BOP_ENVOLVIDOS_OCORRENCIA BEO");
        queryString
                .append("								LEFT JOIN BOP_TIPO_ENVOLVIMENTO BTE ON (BEO.CD_TIPO_ENV = BTE.CD_TIPO_ENV)");
        queryString.append("								WHERE BEO.NR_BOP = ").append(
                bopOcorrencia.getId().getNrBop());
        queryString.append("									AND BEO.TIPO_BOP = '")
                .append(bopOcorrencia.getId().getTipoBop()).append("'");

        if (dsNome != null & !dsNome.isEmpty()) {

            char cTam, cPosi, cPriNome;

            if (isCheckNome) {

                cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                // quantidade de partes (após fonetizado) do nome
                // informado
                cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                // exatamente na posição das partes do nome
                // informado
                cPriNome = 'S'; // [S]im -> A primeira parte do nome deve ser
                // extamente igual a primeira parte do nome
                // informado

            } else {

                cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade ou
                // mais de partes do nome informado
                cPosi = 'R'; // [R]elativo -> As partes do nome devem estar na
                // mesma ordem das partes do nome informado
                cPriNome = 'N'; // [N]ão -> Não importa a posição da primeira
                // parte do nome

            }

            queryString.append(" 								AND ID_ENVOLVIDO IN (");
            queryString.append("														SELECT COLUMN_VALUE ");
            queryString
                    .append("															FROM TABLE (PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_PESSOAS_FONETIZADAS ( ");

            queryString.append("             '");
            queryString.append(dsNome);
            queryString.append("',              '");
            queryString.append(cTam);
            queryString.append("',              '");
            queryString.append(cPosi);
            queryString.append("',              '");
            queryString.append(cPriNome);
            queryString.append("',              'O'  ");
            queryString.append("																															 )");
            queryString.append("																	   )");
            queryString.append("													)");
        }

        if (dsApelido != null & !dsApelido.isEmpty()) {

            queryString
                    .append("  								AND translate( BEO.DS_APELIDO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')");
            queryString
                    .append("									LIKE  translate( '")
                    .append(dsApelido)
                    .append("' , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')   ");
        }

        if (idEnvolvimento > 0) {

            queryString.append(" 								AND BEO.CD_TIPO_ENV = ").append(
                    idEnvolvimento);

        }

        queryString.append(" 						ORDER BY BEO.NM_COMPL_ENVOL");
        queryString.append("                    )");
        queryString.append(" 	WHERE ROWNUM <=  ").append((inicio + fim));
        queryString.append(" ) WHERE RNUM  > ").append(inicio);
        queryString.append("	ORDER BY NM_COMPL_ENVOL");

        Query query = em.createNativeQuery(queryString.toString(),
                BopEnvolvidoSimples.class);

        List<BopEnvolvidoSimples> resultList;
        try {
            resultList = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_233: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return resultList;

    }

    public int getListaBopEnvolvidoSimplesCount(BopOcorrencia bopOcorrencia,
            String... param) throws BusinessException {

        int parametros = 1;

        String dsNome = param[0] == null ? null : "%" + param[0].toUpperCase()
                + "%";
        String dsApelido = param[1] == null ? null : "%"
                + param[1].toUpperCase() + "%";
        String dsEnvolvimento = param[2] == null ? null : "%"
                + param[2].toUpperCase() + "%";

        String queryString = ""
                + " SELECT COUNT(*) FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                + " LEFT JOIN BOP_TIPO_ENVOLVIMENTO BTE ON BEO.CD_TIPO_ENV = BTE.CD_TIPO_ENV "
                + " WHERE BEO.NR_BOP = ? AND  BEO.TIPO_BOP = ? "
                + "     AND ( ? IS NULL OR "
                + "			translate( BEO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE"
                + "			translate( ? , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')"
                + "           ) "
                + "     AND ( ? IS NULL OR "
                + "			translate( BEO.DS_APELIDO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE"
                + "			translate( ? , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                + "          ) "
                + "     AND ( ? IS NULL OR "
                + "			translate( BTE.DS_TIPO_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE"
                + "			translate( ? , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') "
                + "          ) ";

        Query query = em.createNativeQuery(queryString);

        query.setParameter(parametros++, bopOcorrencia.getId().getNrBop());
        query.setParameter(parametros++, bopOcorrencia.getId().getTipoBop());

        // utilizado para filtro
        query.setParameter(parametros++, dsNome).setParameter(parametros++,
                dsNome);
        query.setParameter(parametros++, dsApelido).setParameter(parametros++,
                dsApelido);
        query.setParameter(parametros++, dsEnvolvimento).setParameter(
                parametros++, dsEnvolvimento);

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_234: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public int getListaBopEnvolvidoSimplesFonemaCount(
            BopOcorrencia bopOcorrencia, String dsNome, String dsApelido,
            Long idEnvolvimento, boolean isCheckNome) throws BusinessException {

        StringBuilder queryString = new StringBuilder();

        queryString.append("SELECT COUNT(*)");
        queryString.append("	FROM BOP_ENVOLVIDOS_OCORRENCIA BEO");
        queryString
                .append("		LEFT JOIN BOP_TIPO_ENVOLVIMENTO BTE ON (BEO.CD_TIPO_ENV = BTE.CD_TIPO_ENV)");
        queryString.append("			WHERE BEO.NR_BOP = ").append(
                bopOcorrencia.getId().getNrBop());
        queryString.append("			AND BEO.TIPO_BOP = '")
                .append(bopOcorrencia.getId().getTipoBop()).append("'");

        if (dsNome != null & !dsNome.isEmpty()) {

            char cTam, cPosi, cPriNome;

            if (isCheckNome) {

                cTam = 'S'; // [S] Retorna apenas os nomes com a mesma
                // quantidade de partes (após fonetizado) do nome
                // informado
                cPosi = 'A'; // [A]bsoluto -> As partes do nome devem estar
                // exatamente na posição das partes do nome
                // informado
                cPriNome = 'S'; // [S]im -> A primeira parte do nome deve ser
                // extamente igual a primeira parte do nome
                // informado

            } else {

                cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade ou
                // mais de partes do nome informado
                cPosi = 'R'; // [R]elativo -> As partes do nome devem estar na
                // mesma ordem das partes do nome informado
                cPriNome = 'N'; // [N]ão -> Não importa a posição da primeira
                // parte do nome

            }

            queryString.append(" 		AND ID_ENVOLVIDO IN (");
            queryString.append("								SELECT COLUMN_VALUE ");
            queryString
                    .append("									FROM TABLE (PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_PESSOAS_FONETIZADAS ( ");
            queryString.append("             '");
            queryString.append(dsNome);
            queryString.append("',              '");
            queryString.append(cTam);
            queryString.append("',              '");
            queryString.append(cPosi);
            queryString.append("',              '");
            queryString.append(cPriNome);
            queryString.append("',              'O'  ");
            queryString.append("																										)");
            queryString.append("												)");
            queryString.append("							)");
        }

        if (dsApelido != null & !dsApelido.isEmpty()) {

            queryString
                    .append("  		AND translate( BEO.DS_APELIDO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')");
            queryString
                    .append("			LIKE  translate( '")
                    .append(dsApelido)
                    .append("' , 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')   ");
        }

        if (idEnvolvimento > 0) {

            queryString.append(" 		AND BEO.CD_TIPO_ENV = ").append(
                    idEnvolvimento);

        }

        Query query = em.createNativeQuery(queryString.toString());

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();

        } catch (NoResultException e) {
            return 0;
        } catch (Exception e) {
            throw new BusinessException("012_235: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopTipoLocomocaoDeon> getListaBopTipoLocomocaoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoLocomocaoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_236: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopOcorrenciaAgencia mergeBopOcorrenciaAgencia(
            BopOcorrenciaAgencia bopOcorrenciaAgencia) throws BusinessException {

        try {
            bopOcorrenciaAgencia = em.merge(bopOcorrenciaAgencia);

            em.flush();

            em.refresh(bopOcorrenciaAgencia);

            return bopOcorrenciaAgencia;
        } catch (Exception e) {
            throw new BusinessException("012_237: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopTipoCombustivel> getListBopTipoCombustivel()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoCombustivel.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_238: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoVeiculoDeon> getListBopTipoVeiculoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoVeiculoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_239: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoVeiculoDeon> getListBopTipoVeiculoDeonView()
            throws BusinessException {
        try {
            return em
                    .createNativeQuery(
                            "SELECT * FROM VW_DEON_TIPO_VEICULO_OUTROS ORDER BY DS_TIPO_VEICULO_DEON ",
                            BopTipoVeiculoDeon.class).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_240: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoVeiculoDeon> getListBopTipoVeiculoTransitoDeonView()
            throws BusinessException {
        try {
            return em
                    .createNativeQuery(
                            "SELECT * FROM VW_DEON_TIPO_VEICULO_TRANSITO ORDER BY DS_TIPO_VEICULO_DEON ",
                            BopTipoVeiculoDeon.class).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_241: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopParteAvariaResolucao> getListBopParteAvariaResolucao()
            throws BusinessException {
        try {
            Query query = em
                    .createNativeQuery("SELECT ID_TIPO_VEICULO, ID_ITEM, ID_RESOLUCAO, DS_AVARIA, NR_PONTUACAO FROM BOP_PARTE_AVARIA_RESOLUCAO ORDER BY DS_AVARIA ASC ");
            return obtemListaDeObjetoIterada(query.getResultList());
        } catch (Exception e) {
            throw new BusinessException("012_242: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopParteAvariaResolucao> getListBopParteAvariaResolucaoByIdTipoVeiculo(
            long idTipoVeiculo) throws BusinessException {
        try {
            Query query = em
                    .createNativeQuery("SELECT ID_TIPO_VEICULO, ID_ITEM, ID_RESOLUCAO, DS_AVARIA, NR_PONTUACAO FROM BOP_PARTE_AVARIA_RESOLUCAO WHERE ID_TIPO_VEICULO = ? ORDER BY DS_AVARIA ASC ");
            query.setParameter(1, idTipoVeiculo);

            return obtemListaDeObjetoIterada(query.getResultList());
        } catch (Exception e) {
            throw new BusinessException("012_243: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopParteAvariaResolucao> getListBopParteAvariaResolucaoByIdTipoVeiculoAndResolucao(
            long idTipoVeiculo, long idResolucao) throws BusinessException {
        try {
            Query query = em
                    .createNativeQuery("SELECT ID_TIPO_VEICULO, ID_ITEM, ID_RESOLUCAO, DS_AVARIA, NR_PONTUACAO FROM BOP_PARTE_AVARIA_RESOLUCAO WHERE ID_TIPO_VEICULO = ? AND ID_RESOLUCAO = ? ORDER BY DS_AVARIA ASC ");
            query.setParameter(1, idTipoVeiculo);
            query.setParameter(2, idResolucao);

            return obtemListaDeObjetoIterada(query.getResultList());
        } catch (Exception e) {
            throw new BusinessException("012_244: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @SuppressWarnings("rawtypes")
    public List<BopParteAvariaResolucao> obtemListaDeObjetoIterada(
            List<BopParteAvariaResolucao> listaOriginal) {

        if (listaOriginal.isEmpty()) {
            return null;
        }

        Iterator itr = listaOriginal.iterator();

        List<BopParteAvariaResolucao> listaBopParteAvariaResolucao = new ArrayList<BopParteAvariaResolucao>();

        BopParteAvariaResolucao bopParteAvariaResolucao;

        while (itr.hasNext()) {

            bopParteAvariaResolucao = new BopParteAvariaResolucao();

            Object[] obj = (Object[]) itr.next();

            if (obj[0] != null) {
                bopParteAvariaResolucao.setIdTipoVeiculo(Long.parseLong(obj[0]
                        .toString()));
            }

            if (obj[1] != null) {
                bopParteAvariaResolucao.setIdItem(obj[1].toString());
            }

            if (obj[2] != null) {
                bopParteAvariaResolucao.setIdResolucao(Long.parseLong(obj[2]
                        .toString()));
            }

            if (obj[3] != null) {
                bopParteAvariaResolucao.setDsAvaria(obj[3].toString());
            }

            if (obj[4] != null) {
                bopParteAvariaResolucao.setNrPontuacao(Long.parseLong(obj[4]
                        .toString()));
            }

            listaBopParteAvariaResolucao.add(bopParteAvariaResolucao);
        }

        return listaBopParteAvariaResolucao;
    }

    public boolean ExisteListBopObjetoOcorrVeiculo(long nrBop, String tipoBop,
            long idEnvolvido) throws BusinessException {
        try {
            Query query = em
                    .createNativeQuery("SELECT 1 FROM BOP_OBJETO_OCORR_VEICULO A JOIN BOP_VEICULO_PASSAGEIRO_DEON B ON (B.NR_BOP = A.NR_BOP AND B.TIPO_BOP = A.TIPO_BOP) WHERE A.NR_BOP = ? AND A.TIPO_BOP = ? AND B.ID_ENVOLVIDO = ?");
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);
            query.setParameter(3, idEnvolvido);

            return !query.getResultList().isEmpty();
        } catch (Exception e) {
            throw new BusinessException("012_245: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @SuppressWarnings("rawtypes")
    public BopAvariaVeiculoResolucao getBopAvariaVeiculoResolucaoByNrBopAndTipoBop(
            long nrBop, String tipoBop) throws BusinessException {

        BopAvariaVeiculoResolucao bopAvariaVeiculoResolucao = null;

        try {

            Query query = em
                    .createNativeQuery("SELECT Distinct NR_BOP, TIPO_BOP, ID_RESOLUCAO FROM BOP_AVARIA_VEICULO_RESOLUCAO WHERE NR_BOP = ? AND TIPO_BOP = ?");
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            List<BopAvariaVeiculoResolucao> listaAvariaResolucao = query
                    .getResultList();

            if (listaAvariaResolucao.isEmpty()) {
                return null;
            }

            Iterator itr = listaAvariaResolucao.iterator();

            while (itr.hasNext()) {

                bopAvariaVeiculoResolucao = new BopAvariaVeiculoResolucao();

                Object[] obj = (Object[]) itr.next();

                if (obj[0] != null) {
                    bopAvariaVeiculoResolucao.setNrBop(Long.parseLong(obj[0]
                            .toString()));
                }

                if (obj[1] != null) {
                    bopAvariaVeiculoResolucao.setTipoBop(obj[1].toString());
                }

                if (obj[2] != null) {
                    bopAvariaVeiculoResolucao.setIdResolucao(Long
                            .parseLong(obj[2].toString()));
                }
            }
        } catch (NoResultException e) {
            bopAvariaVeiculoResolucao = null;
        } catch (Exception e) {
            throw new BusinessException("012_246: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopAvariaVeiculoResolucao;
    }

    public List<BopTipoCaracteristicasParte> getListBopTipoCaracteristicasParte() {
        return em.createNamedQuery("BopTipoCaracteristicasParte.findAll")
                .getResultList();
    }

    public <T extends Serializable> T mergeEntity(T object)
            throws BusinessException {

        try {
            em.setFlushMode(FlushModeType.COMMIT);

            T t = (T) em.merge(object);

            em.flush();

            em.refresh(t);

            em.clear();

            em.getEntityManagerFactory().getCache().evictAll();

            return t;
        } catch (Exception e) {
            throw new BusinessException("012_247: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public <T extends Serializable> T mergeOcorrencia(T object)
            throws BusinessException {

        try {
            return em.merge(object);
        } catch (Exception e) {
            throw new BusinessException("012_248: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public <T extends Serializable> T findEntity(Class<T> objClass, Object pk)
            throws BusinessException {

        try {
            T entity = em.find(objClass, pk);

            return entity;
        } catch (Exception e) {
            throw new BusinessException("012_249: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopCondicaoObjetoDeon> getAllBopCondicaoObjetoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopCondicaoObjetoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_250: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopOrigemRecuperacaoDeon> getAllBopOrigemRecuperacaoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopOrigemRecuperacaoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_251: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoAcaoObjetoDeon> getAllBopTipoAcaoObjetoDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoAcaoObjetoDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_252: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoAcaoObjetoDeon> getBopTipoAcaoObjetoDeonTransito()
            throws BusinessException {
        try {
            return em.createNamedQuery(
                    "BopTipoAcaoObjetoDeon.findTipoAcaoTransito")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_253: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopChamado getBopChamadoByNrChamado(long nrChamado)
            throws BusinessException {

        try {
            return (BopChamado) em
                    .createNamedQuery("BopChamado.findByNrChamado")
                    .setParameter("pNrChamado", nrChamado).getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_254: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<ConsultaOcorrenciaEnvolvidoTransient> getListOcorrenciaEnvolvidos(
            Long codAgencia, Long codUnidadePolicial, Date dataInicio,
            Date dataFim, Date horaInicio, Date horaFim)
            throws BusinessException {

        StringBuilder sb = new StringBuilder();
        DateFormat df = new SimpleDateFormat("HH:mm:ss");
        int i = 0;

        sbAppend(sb, " 	SELECT  ");
        sbAppend(sb, "			BOP_CHAMADO_OCORRENCIA.NR_CHAMADO, ");
        sbAppend(sb, "			BOP_OCORRENCIA.FL_SITUACAO_BOP FL_SITUACAO, ");
        sbAppend(sb, "			BOP_OCORRENCIA.DT_CRIACAO, ");
        sbAppend(sb, "			BOP_OCORRENCIA.DT_FATO, ");
        sbAppend(sb, "			BOP_OCORRENCIA_AGENCIA.TP_INCIDENTE, ");
        sbAppend(
                sb,
                "			PA_INCIDENTE.GET_INCIDENTE (BOP_OCORRENCIA_AGENCIA.TP_INCIDENTE) DS_INCIDENTE, ");
        sbAppend(sb, "			BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO, ");
        sbAppend(sb,
                "			BOP_ENVOLVIDOS_OCORRENCIA.NM_COMPL_ENVOL NM_ENVOLVIDO, ");
        sbAppend(
                sb,
                "			PA_TIPO_ENVOLVIMENTO.GET_TIPO_ENV (BOP_ENVOLVIDO_TIPO_ENVOL.CD_TIPO_ENV) TP_ENVOLVIMENTO, ");
        sbAppend(sb, "			BOP_ENVOLVIDOS_OCORRENCIA.ID_SEXO SEXO, ");
        sbAppend(sb, "			BOP_ENVOLVIDOS_OCORRENCIA.ID_IDADE_APROX IDADE, ");
        sbAppend(sb, "			BOP_OCORRENCIA.DS_CIDADE, ");
        sbAppend(sb, "			BOP_OCORRENCIA.DS_BAIRRO ");
        sbAppend(sb, "		FROM BOP_OCORRENCIA_AGENCIA ");
        sbAppend(
                sb,
                "			JOIN BOP_OCORRENCIA ON ( BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_AGENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_OCORRENCIA_AGENCIA.TIPO_BOP) ");
        sbAppend(
                sb,
                "			JOIN BOP_CHAMADO_OCORRENCIA ON (BOP_OCORRENCIA.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP )");
        sbAppend(
                sb,
                "			JOIN BOP_ENVOLVIDOS_OCORRENCIA ON ( BOP_OCORRENCIA_AGENCIA.NR_BOP = BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP ) ");
        sbAppend(
                sb,
                "			JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON ON ( BOP_ENVOLVIDO_OCORRENCIA_DEON.NR_BOP = BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP AND BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP AND BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO = BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO ) ");
        sbAppend(
                sb,
                "			JOIN BOP_ENVOLVIDO_TIPO_ENVOL ON (  BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO_DEON = BOP_ENVOLVIDO_TIPO_ENVOL.ID_ENVOLVIDO_DEON ) ");
        sbAppend(sb, "		WHERE BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ? ");

        if (codUnidadePolicial.equals(Long
                .parseLong(UnidadeAcessoSigiloso.siplan.getCodigo()))) {

            sbAppend(sb, "		AND BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL IN ( ");
            sbAppend(sb, UnidadeAcessoSigiloso.siplan.getCodigo());
            sbAppend(sb, " , ");
            sbAppend(sb, UnidadeAcessoSigiloso.dhppPlantao.getCodigo());
            sbAppend(sb, " ) ");

        } else {

            sbAppend(sb, "			AND BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL IN ( ");
            sbAppend(sb, "											SELECT CD_UNID_POLICIAL ");
            sbAppend(sb, "											  	FROM BOP_UNIDADE_POLICIAL ");
            sbAppend(sb, "											 WHERE CD_UNID_POLICIAL = ? ");
            sbAppend(sb, "											 UNION ");
            sbAppend(sb,
                    "											 SELECT BOP_UNIDADE_POLICIAL_PAI_DEON.CD_UNID_POLICIAL ");
            sbAppend(sb, "											 	FROM BOP_UNIDADE_POLICIAL_PAI_DEON ");
            sbAppend(sb,
                    "											 WHERE BOP_UNIDADE_POLICIAL_PAI_DEON.CD_UNID_POLICIAL_PAI = ? ");
            sbAppend(sb,
                    "											 	AND BOP_UNIDADE_POLICIAL_PAI_DEON.CD_AGENCIA_PAI = 2 ");
            sbAppend(sb, " 											)");

        }

        sbAppend(sb,
                "		AND TRUNC(BOP_OCORRENCIA_AGENCIA.DT_GERACAO) BETWEEN ? AND ? ");

        if (horaInicio != null && horaFim != null) {
            sbAppend(sb,
                    "		AND TO_CHAR(BOP_OCORRENCIA_AGENCIA.DT_GERACAO, 'HH24:MI:SS') >= ? ");
            sbAppend(sb,
                    "		AND TO_CHAR(BOP_OCORRENCIA_AGENCIA.DT_GERACAO, 'HH24:MI:SS') <= ? ");
        }

        sbAppend(sb, "		ORDER BY BOP_OCORRENCIA_AGENCIA.NR_CHAMADO ASC ");

        Query query = em.createNativeQuery(sb.toString(),
                ConsultaOcorrenciaEnvolvidoTransient.class);

        query.setParameter(++i, codAgencia);

        if (!codUnidadePolicial.equals(Long
                .parseLong(UnidadeAcessoSigiloso.siplan.getCodigo()))) {

            query.setParameter(++i, codUnidadePolicial);
            query.setParameter(++i, codUnidadePolicial);

        }
        query.setParameter(++i, dataInicio);

        query.setParameter(++i, dataFim);

        if (horaInicio != null && horaFim != null) {
            query.setParameter(++i, df.format(horaInicio));
            query.setParameter(++i, df.format(horaFim));
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_255: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public int getCountListOcorrenciaEnvolvidos(Long codAgencia,
            Long codUnidadePolicial, Date dataInicio, Date dataFim,
            Date horaInicio, Date horaFim) throws BusinessException {

        StringBuilder sb = new StringBuilder();
        DateFormat df = new SimpleDateFormat("HH:mm:ss");
        int i = 0;

        sbAppend(sb, "	SELECT ");
        sbAppend(sb, "		COUNT(1)");
        sbAppend(
                sb,
                "	FROM BOP_OCORRENCIA, BOP_OCORRENCIA_DEON, BOP_CHAMADO_OCORRENCIA, BOP_ENVOLVIDOS_OCORRENCIA");
        sbAppend(sb, "	WHERE ");
        sbAppend(sb, "		BOP_OCORRENCIA.NR_BOP = BOP_OCORRENCIA_DEON.NR_BOP");
        sbAppend(sb,
                "	AND BOP_OCORRENCIA.TIPO_BOP = BOP_OCORRENCIA_DEON.TIPO_BOP");
        sbAppend(sb,
                "	AND BOP_OCORRENCIA.NR_BOP = BOP_CHAMADO_OCORRENCIA.NR_BOP");
        sbAppend(sb,
                "	AND BOP_OCORRENCIA.TIPO_BOP = BOP_CHAMADO_OCORRENCIA.TIPO_BOP");
        sbAppend(sb,
                "	AND BOP_OCORRENCIA.NR_BOP = BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP");
        sbAppend(sb,
                "	AND BOP_OCORRENCIA.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP");
        sbAppend(sb, "	AND BOP_OCORRENCIA.CD_AGENCIA = ? ");

        if (codUnidadePolicial.equals(Long
                .parseLong(UnidadeAcessoSigiloso.siplan.getCodigo()))) {

            sbAppend(sb, "		AND BOP_OCORRENCIA.CD_UNID_POLICIAL IN ( ");
            sbAppend(sb, UnidadeAcessoSigiloso.siplan.getCodigo());
            sbAppend(sb, " , ");
            sbAppend(sb, UnidadeAcessoSigiloso.dhppPlantao.getCodigo());
            sbAppend(sb, " ) ");

        } else {

            sbAppend(sb, "		AND BOP_OCORRENCIA.CD_UNID_POLICIAL = ? ");

        }

        sbAppend(sb, "		AND TRUNC(BOP_OCORRENCIA.DT_CRIACAO) BETWEEN ? AND ? ");
        sbAppend(sb,
                "		AND TO_CHAR(BOP_OCORRENCIA.DT_CRIACAO, 'HH24:MI:SS') >= ? ");
        sbAppend(sb,
                "		AND TO_CHAR(BOP_OCORRENCIA.DT_CRIACAO, 'HH24:MI:SS') <= ? ");

        Query query = em.createNativeQuery(sb.toString());
        query.setParameter(++i, codAgencia);

        if (!codUnidadePolicial.equals(Long
                .parseLong(UnidadeAcessoSigiloso.siplan.getCodigo()))) {

            query.setParameter(++i, codUnidadePolicial);

        }

        query.setParameter(++i, dataInicio);
        query.setParameter(++i, dataFim);
        query.setParameter(++i, df.format(horaInicio));
        query.setParameter(++i, df.format(horaFim));

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_256: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private void sbAppend(StringBuilder sb, String str) {

        sb.append(str);
        // Comentar linha de código imediatamente abaixo quando gerar EAR.
        // System.out.println( str );

    }

    public ConsultaDocumentoEnvoEspecialFake getConsultarDocumentoEnvoEspecial(BopTipoDocumento bopTipoDocumento, String nrDocumento) throws BusinessException {

        ConsultaDocumentoEnvoEspecialFake consultaDocumentoEnvoEspecialFake = null;
        StringBuilder sb = new StringBuilder();

        /**
         * O sistema deverá pesquisar na tabela de BOP_FUNCIONARIOS pelo campo
         * NR_FUNCIONAL ou na tabela BOP_PESSOAS pelo campo CD_IDENTIDADE,
         * sempre considerando em ambas as situações o campo
         * BOP_PESSOAS.CD_TIPO_PESSOA igual a 2 (Tipo de Pessoa igual a
         * Funcionário). Se em algum momento o sistema pesquise na tabela
         * BOP_PESSOAS ou BOP_FUNCIONARIOS e encontre mais de um registro,
         * deverá ser exibido somente o primeiro registro.
         */
        sbAppend(sb, " SELECT ROWNUM AS RNUM ");
        sbAppend(sb, "	     , BPE.NM_LEGAL ");
        sbAppend(sb, "	     , REGEXP_REPLACE (BPE.CD_CPF, '- .', '') AS CD_CPF ");
        sbAppend(sb, "		 , BFC.NR_FUNCIONAL	");
        sbAppend(sb, "	     , BFC.CD_AGENCIA ");
        sbAppend(sb, "	     , BFC.CD_UNID_POLICIAL ");
        sbAppend(sb, "	     , BFC.CD_CARGO ");
        sbAppend(sb, "   FROM BOP_PESSOAS BPE ");
        sbAppend(sb, "   JOIN BOP_FUNCIONARIOS BFC ON ( BFC.ID_REGISTRO = BPE.ID_REGISTRO  ) ");
        sbAppend(sb, "  WHERE BPE.CD_TIPO_PESSOA = 2 ");

        if (bopTipoDocumento.getIdTipoDocumento() == TipoDocumento.MATRICULA_FUNCIONAL.getIdTipodocumento()) {
            sbAppend(sb, " AND REGEXP_REPLACE( BFC.NR_FUNCIONAL, '[ [:punct:] ] -', '' ) LIKE ? ");

        } else if (bopTipoDocumento.getIdTipoDocumento() == TipoDocumento.RG_MILITAR.getIdTipodocumento()) {
            sbAppend(sb, " AND REGEXP_REPLACE( BPE.CD_IDENTIDADE, '[ [:punct:] ] -', '' ) LIKE ? ");

        } else if (bopTipoDocumento.getIdTipoDocumento() == TipoDocumento.CPF_MILITAR.getIdTipodocumento()) {
            sbAppend(sb, " AND REGEXP_REPLACE( BPE.CD_CPF, '[ [:punct:] ] -', '' ) LIKE ? ");
        }

        sbAppend(sb, " AND ROWNUM = 1");

        sb.trimToSize();

        Query query = em.createNativeQuery(sb.toString(), ConsultaDocumentoEnvoEspecialFake.class);
        query.setParameter(1, nrDocumento);

        try {

            consultaDocumentoEnvoEspecialFake = (ConsultaDocumentoEnvoEspecialFake) query.getSingleResult();

        } catch (NoResultException e) {

            /**
             * Caso o sistema não encontre o registro ele deverá realizar uma
             * pesquisa nos envolvidos da ocorrência fazendo uso dos campos
             * Documento e Nº para tentar encontrar o envolvido em questão.
             * No caso do sistema encontrar mais de um registro na tabela
             * BOP_ENVOLVIDO_OCORRENCIA_DEON, deverá trazer o registro mais
             * recente.
             */
            sb = new StringBuilder();

            sbAppend(sb, " SELECT * FROM ( ");
            sbAppend(sb, " SELECT ROWNUM AS RNUM ");
            sbAppend(sb, "  	, BEO.NM_COMPL_ENVOL AS NM_LEGAL ");
            sbAppend(sb, "  	, BED.ID_AGENCIA_ESPECIAL AS CD_AGENCIA ");
            sbAppend(sb, "  	, BED.ID_UNID_POLICIAL_ESPECIAL AS CD_UNID_POLICIAL ");
            sbAppend(sb, "  	, BED.ID_CARGO_ENVOL_ESPECIAL AS CD_CARGO ");
            sbAppend(sb, "  	, REGEXP_REPLACE (BEO.NR_CPF, '- .', '') AS CD_CPF ");
            sbAppend(sb, " FROM BOP_ENVOLVIDOS_OCORRENCIA BEO ");
            sbAppend(sb, " JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BED ON ( BEO.NR_BOP = BED.NR_BOP AND BEO.TIPO_BOP = BED.TIPO_BOP AND BEO.ID_ENVOLVIDO = BED.ID_ENVOLVIDO ) ");
            sbAppend(sb, " WHERE BED.CD_TIPO_DOCUMENTO = ? ");

            if (bopTipoDocumento.getIdTipoDocumento() == TipoDocumento.CPF_MILITAR.getIdTipodocumento()) {
                sbAppend(sb, " AND REGEXP_REPLACE( BEO.NR_CPF, '[ [:punct:] ] -', '' ) LIKE ? ");

            } else {
                sbAppend(sb, " AND REGEXP_REPLACE( BED.NR_DOCUMENTO, '[ [:punct:] ] -', '' ) LIKE ? ");

            }

            sbAppend(sb, " ORDER BY BED.DT_INCLUSAO DESC ) WHERE ROWNUM = 1 ");

            sb.trimToSize();

            Query queryEnvolvido = em.createNativeQuery(sb.toString(), ConsultaDocumentoEnvoEspecialFake.class);

            try {

                queryEnvolvido.setParameter(1, bopTipoDocumento.getIdTipoDocumento());
                queryEnvolvido.setParameter(2, nrDocumento);

                consultaDocumentoEnvoEspecialFake = (ConsultaDocumentoEnvoEspecialFake) queryEnvolvido.getSingleResult();

            } catch (NoResultException ex) {
                return null;

            } catch (Exception ex) {
                throw new BusinessException("012_257_1: " + "Ocorreu um erro inesperado.", ex);

            }

        } catch (Exception e) {
            throw new BusinessException("012_257_2: " + "Ocorreu um erro inesperado.", e);

        }

        return consultaDocumentoEnvoEspecialFake;

    }

    public List<BopTipoNoticiaDeon> getListaTipoNoticia()
            throws BusinessException {

        try {
            return em.createNamedQuery("BopTipoNoticiaDeon.findAll")
                    .getResultList();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_258: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopNoticiaDeon> getNoticias() throws BusinessException {

        try {
            return em.createNamedQuery("BopNoticiaDeon.findAll")
                    .getResultList();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_259: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopNoticiaDeon> getNoticiasAtiva() throws BusinessException {

        try {
            return em.createNamedQuery("BopNoticiaDeon.findNoticiasAtivas")
                    .getResultList();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_260: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopInformacaoInicial getSuporteTecnico() throws BusinessException {

        try {
            return (BopInformacaoInicial) em.createNamedQuery(
                    "BopInformacaoInicial.findSuporteTecnico")
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_261: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopInformacaoInicial getMaterialApoio() throws BusinessException {

        try {
            return (BopInformacaoInicial) em.createNamedQuery(
                    "BopInformacaoInicial.findMaterialApoio").getSingleResult();

        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_262: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopInformacaoInicial mergeInformacaoInicial(
            BopInformacaoInicial bopInformacaoInicial) throws BusinessException {

        try {
            BopInformacaoInicial retorno = bopInformacaoInicial;

            retorno = em.merge(bopInformacaoInicial);

            em.flush();

            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_263: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopNoticiaDeon mergeNoticiaDeon(BopNoticiaDeon bopNoticiaDeon)
            throws BusinessException {

        try {
            BopNoticiaDeon retorno = bopNoticiaDeon;

            retorno = em.merge(bopNoticiaDeon);

            em.flush();

            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_264: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<DeonIncidenteProv> getAllDeonIncidenteProv()
            throws BusinessException {
        try {
            return (List<DeonIncidenteProv>) em.createNamedQuery(
                    "DeonIncidenteProv.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_265: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    @SuppressWarnings("rawtypes")
    public Serializable getReference(Class objClass, Object pk)
            throws BusinessException {
        try {
            return (Serializable) em.getReference(objClass, pk);
        } catch (Exception e) {
            throw new BusinessException("012_266: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopOcorrencia getBopOcorrenciaByNrChamado(Long nrChamado)
            throws BusinessException {
        try {
            return (BopOcorrencia) em
                    .createNamedQuery("BopOcorrencia.findByNrChamado")
                    .setParameter("pNrChamado", nrChamado).getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_267: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public Long countMedidaProtetiva(String nrMedidaProtetiva,
            Long cdUnidPolicial, Long cdAgencia) throws BusinessException {
        try {
            return (Long) em
                    .createNamedQuery(
                            "BopProvMedidaProtDeon.countMedidaProtetiva")
                    .setParameter("pNrMedidaProtetiva", nrMedidaProtetiva)
                    .setParameter("pCdUnidPolicial", cdUnidPolicial)
                    .setParameter("pCdAgencia", cdAgencia).getSingleResult();
        } catch (NoResultException e) {
            return 0L;
        } catch (Exception e) {
            throw new BusinessException("012_268: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public Long countProvidenciaEnvolvido(String cdIdentificador,
            Long cdUnidPolicial, Long cdAgencia, Long idTipoProvidencia)
            throws BusinessException {
        try {
            return (Long) em
                    .createNamedQuery(
                            "BopProvidenciaEnvolvidoDeon.countProvidenciaEnvolvido")
                    .setParameter("pCdIdentificador", cdIdentificador)
                    .setParameter("pCdUnidPolicial", cdUnidPolicial)
                    .setParameter("pCdAgencia", cdAgencia)
                    .setParameter("pIdTipoProvidencia", idTipoProvidencia)
                    .getSingleResult();
        } catch (NoResultException e) {
            return 0L;
        } catch (Exception e) {
            throw new BusinessException("012_269: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public int getListConsultaUnificadaCount(Date dataInicial, Date dataFinal,
            int numeroOcorrencia, int codUnidadePolicial, String incidente,
            Date horaInicial, Date horaFinal, boolean consultaExterna)
            throws BusinessException {

        Query query = null;

        Map<Integer, Object> parameters = new HashMap<Integer, Object>();

        Integer indexParameter = 0;

        StringBuffer strbfQuery = new StringBuffer();

        strbfQuery.append(" SELECT COUNT(1) "
                + " FROM DEON_CONSULTA_UNIFICADA " + " WHERE "
                + " 	DECODE(TIPO_BOP,null,'S',TIPO_BOP) <> 'R' ");

        if (dataInicial == null && dataFinal == null && numeroOcorrencia == 0
                && codUnidadePolicial == 0 && incidente == null) {
            strbfQuery.append(" AND DATA >= SYSDATE - 30 ");
            strbfQuery.append(" AND DATA <= SYSDATE ");
        }

        if (numeroOcorrencia != 0) {
            strbfQuery.append(" AND NUMERO_OCORRENCIA = ? ");

            parameters.put(++indexParameter, numeroOcorrencia);

        } else {

            if (dataInicial == null && dataFinal == null
                    && numeroOcorrencia == 0) {

                strbfQuery.append(" AND DATA >= SYSDATE - 30 ");
                strbfQuery.append(" AND DATA <= SYSDATE ");

            } else {
                if (dataInicial != null) {
                    strbfQuery.append(" AND TRUNC(DATA) >= TRUNC( ? ) ");

                    parameters.put(++indexParameter, dataInicial);
                }

                if (dataFinal != null) {
                    strbfQuery.append(" AND TRUNC(DATA) <= TRUNC( ? ) ");

                    parameters.put(++indexParameter, dataFinal);
                }
            }

            if (horaInicial != null) {
                strbfQuery.append(" AND TO_CHAR(DATA,'HHMMSS')  >= ?");

                parameters.put(++indexParameter,
                        new SimpleDateFormat("HHmmss").format(horaInicial));
            }
            if (horaFinal != null) {
                strbfQuery.append(" AND TO_CHAR(DATA,'HHMMSS')  <= ?");

                parameters.put(++indexParameter,
                        new SimpleDateFormat("HHmmss").format(horaFinal));
            }

        }

        if (consultaExterna) {
            strbfQuery.append(" AND ORIGEM <> 'CHAMADO' ");
            strbfQuery.append(" AND ( ");
            strbfQuery.append("		(ORIGEM = 'OCORRÊNCIA' AND ");
            strbfQuery
                    .append("		 EXISTS( SELECT 1 FROM BOP_OCORRENCIA_AGENCIA ");
            strbfQuery
                    .append(" 				 JOIN BOP_CHAMADO_OCORRENCIA USING (NR_BOP,TIPO_BOP) ");
            strbfQuery.append(" 				 WHERE ");
            strbfQuery
                    .append("                   BOP_CHAMADO_OCORRENCIA.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("                   BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ?) ");

            parameters.put(++indexParameter, codUnidadePolicial);

            strbfQuery.append("    	) OR ");
            strbfQuery.append("        (ORIGEM = 'DESPACHO' AND ");
            strbfQuery.append("		 EXISTS( SELECT 1 ");
            strbfQuery.append("  				 FROM BOP_DESPACHO_ANDAMENTO ");
            strbfQuery.append("				 WHERE  ");
            strbfQuery
                    .append("				   BOP_DESPACHO_ANDAMENTO.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("                   BOP_DESPACHO_ANDAMENTO.CD_UNID_POLICIAL = ?) ");
            strbfQuery.append("        ) ");
            strbfQuery.append("	 ) ");

            parameters.put(++indexParameter, codUnidadePolicial);
        }

        if (codUnidadePolicial != 0) {

            strbfQuery.append(" AND ORIGEM <> 'CHAMADO' ");
            strbfQuery.append(" AND ( ");
            strbfQuery.append("		(ORIGEM = 'OCORRÊNCIA' AND ");
            strbfQuery
                    .append("		 EXISTS( SELECT 1 FROM BOP_OCORRENCIA_AGENCIA ");
            strbfQuery
                    .append(" 				 JOIN BOP_CHAMADO_OCORRENCIA USING (NR_BOP,TIPO_BOP) ");
            strbfQuery.append(" 				 WHERE ");
            strbfQuery
                    .append("                   BOP_CHAMADO_OCORRENCIA.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("                   BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ?) ");

            parameters.put(++indexParameter, codUnidadePolicial);

            strbfQuery.append("    	) OR ");
            strbfQuery.append("        (ORIGEM = 'DESPACHO' AND ");
            strbfQuery.append("		 EXISTS( SELECT 1 ");
            strbfQuery.append("  				 FROM BOP_DESPACHO_ANDAMENTO ");
            strbfQuery.append("				 WHERE  ");
            strbfQuery
                    .append("				   BOP_DESPACHO_ANDAMENTO.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("                   BOP_DESPACHO_ANDAMENTO.CD_UNID_POLICIAL = ?) ");
            strbfQuery.append("        ) ");
            strbfQuery.append("	 ) ");

            parameters.put(++indexParameter, codUnidadePolicial);

        }

        if (incidente != null && codUnidadePolicial == 0) {

            strbfQuery.append(" AND ( ");
            strbfQuery.append(" 		(ORIGEM = 'OCORRÊNCIA' AND ");
            strbfQuery.append(" 			(   INCIDENTE_COD = ? OR ");
            strbfQuery
                    .append("				EXISTS( SELECT 1 FROM BOP_OCORRENCIA_AGENCIA ");
            strbfQuery
                    .append("						JOIN BOP_CHAMADO_OCORRENCIA USING (NR_BOP,TIPO_BOP) ");
            strbfQuery.append("						WHERE ");
            strbfQuery
                    .append("							BOP_CHAMADO_OCORRENCIA.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("							BOP_OCORRENCIA_AGENCIA.TP_INCIDENTE = ?) ");

            parameters.put(++indexParameter, incidente);
            parameters.put(++indexParameter, incidente);

            strbfQuery.append("			) ");
            strbfQuery.append("        ) OR ");
            strbfQuery.append("	    (ORIGEM = 'DESPACHO' AND ");
            strbfQuery.append("	     EXISTS( SELECT 1 ");
            strbfQuery.append("	             FROM BOP_DESPACHO_ANDAMENTO ");
            strbfQuery.append("	             WHERE ");
            strbfQuery
                    .append("	             	BOP_DESPACHO_ANDAMENTO.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("	                BOP_DESPACHO_ANDAMENTO.TP_INCIDENTE = ?) ");
            strbfQuery.append("	           ) ");
            strbfQuery.append("	    ) ");

            parameters.put(++indexParameter, incidente);

        }

        if (incidente != null && codUnidadePolicial > 0) {

            strbfQuery.append(" AND ( ");
            strbfQuery.append(" 		(ORIGEM = 'OCORRÊNCIA' AND ");
            strbfQuery.append(" 			(   INCIDENTE_COD = ? OR ");
            strbfQuery
                    .append("				EXISTS( SELECT 1 FROM BOP_OCORRENCIA_AGENCIA ");
            strbfQuery
                    .append("						JOIN BOP_CHAMADO_OCORRENCIA USING (NR_BOP,TIPO_BOP) ");
            strbfQuery.append("						WHERE ");
            strbfQuery
                    .append("							BOP_CHAMADO_OCORRENCIA.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("							BOP_OCORRENCIA_AGENCIA.TP_INCIDENTE = ? AND ");
            strbfQuery
                    .append("							BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ?) ");

            parameters.put(++indexParameter, incidente);
            parameters.put(++indexParameter, incidente);
            parameters.put(++indexParameter, codUnidadePolicial);

            strbfQuery.append("			) ");
            strbfQuery.append("        ) OR ");
            strbfQuery.append("	    (ORIGEM = 'DESPACHO' AND ");
            strbfQuery.append("	     EXISTS( SELECT 1 ");
            strbfQuery.append("	             FROM BOP_DESPACHO_ANDAMENTO ");
            strbfQuery.append("	             WHERE ");
            strbfQuery
                    .append("	             	BOP_DESPACHO_ANDAMENTO.NR_CHAMADO = DEON_CONSULTA_UNIFICADA.NUMERO_OCORRENCIA AND ");
            strbfQuery
                    .append("	                BOP_DESPACHO_ANDAMENTO.TP_INCIDENTE = ?) ");
            strbfQuery.append("	           ) ");
            strbfQuery.append("	    ) ");

            parameters.put(++indexParameter, incidente);

        }

        query = em.createNativeQuery(strbfQuery.toString());

        for (java.util.Map.Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        int resultado;
        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;

        } catch (NumberFormatException e) {
            throw new BusinessException("012_270: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<ViewConsultaUnificadaDet> getDetalhamentoOcorrencia(
            int nrOcorrencia) throws BusinessException {
        try {
            return em
                    .createNamedQuery(
                            "ViewConsultaUnificadaDet.findByOcorrencia")
                    .setParameter("ocorrencia", nrOcorrencia).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_271: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopDespachoAndamento> getBopDespachoAndamento(long nrChamado,
            long cdUnidPolicial) throws BusinessException {

        try {
            Query query = em
                    .createNamedQuery("BopDespachoAndamento.findByNrChamadoUnidadePolicial");
            query.setParameter("pNrChamado", nrChamado);
            query.setParameter("pCdUnidPolicial", cdUnidPolicial);

            return (List<BopDespachoAndamento>) query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_272: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopTipoLocalEncamDeon> getAllBopTipoLocalEncamDeon()
            throws BusinessException {
        try {
            return em.createNamedQuery("BopTipoLocalEncamDeon.findAll")
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_273: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopTipoLocalEncamDeon insertBopTipoLocalPadraoUnidadePolicial(
            BopTipoLocalEncamDeon bopTipoLocalEncamDeon,
            BopUnidadePolicial bopUnidadePolicial) throws BusinessException {

        try {
            Query query = em
                    .createNativeQuery("INSERT INTO BOP_PARAMETROS_UNIDADE VALUES (?, ?, ?, SEQ_BOP_PARAMETROS_UNIDADE.nextval, ? )");
            query.setParameter(1,
                    BopParametrosUnidade.TIPOLOCALPADRAO.getDescricao());
            query.setParameter(2, bopTipoLocalEncamDeon.getIdTipoLocalEncam());
            query.setParameter(3, bopUnidadePolicial.getId()
                    .getCdUnidPolicial());
            query.setParameter(4, bopUnidadePolicial.getId().getCdAgencia());

            query.executeUpdate();

            return bopTipoLocalEncamDeon;
        } catch (Exception e) {
            throw new BusinessException("012_274: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopTipoLocalEncamDeon retornaTipoLocalPadraoUnidadeLogada(
            BopUnidadePolicial bopUnidadePolicial) throws BusinessException {

        try {
            Query query = em
                    .createNativeQuery(
                            "select * from BOP_TIPO_LOCAL_ENCAM_DEON WHERE ID_TIPO_LOCAL_ENCAM = ("
                            + "SELECT VL_PARAMETRO FROM BOP_PARAMETROS_UNIDADE WHERE ID_PARAMETRO = ? AND"
                            + " CD_UNID_POLICIAL = ? AND CD_AGENCIA = ? AND CD_PARAMETROS_UNIDADE = ("
                            + "SELECT MAX(CD_PARAMETROS_UNIDADE) FROM BOP_PARAMETROS_UNIDADE PU WHERE "
                            + "PU.ID_PARAMETRO = BOP_PARAMETROS_UNIDADE.ID_PARAMETRO AND PU.CD_UNID_POLICIAL = "
                            + "BOP_PARAMETROS_UNIDADE.CD_UNID_POLICIAL AND PU.CD_AGENCIA = "
                            + "BOP_PARAMETROS_UNIDADE.CD_AGENCIA ))",
                            BopTipoLocalEncamDeon.class);

            query.setParameter(1,
                    BopParametrosUnidade.TIPOLOCALPADRAO.getDescricao());
            query.setParameter(2, bopUnidadePolicial.getId()
                    .getCdUnidPolicial());
            query.setParameter(3, bopUnidadePolicial.getId().getCdAgencia());

            List<BopTipoLocalEncamDeon> listaBopTipoLocalEncamDeon = query
                    .getResultList();

            if (listaBopTipoLocalEncamDeon == null
                    || listaBopTipoLocalEncamDeon.size() == 0) {
                return null;
            }

            return listaBopTipoLocalEncamDeon.get(0);
        } catch (Exception e) {
            throw new BusinessException("012_275: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public boolean podeGerarOcorrencia(
            BopUnidadePolicial bopUnidadePolicialUsuarioLogado)
            throws BusinessException {

        try {
            Query query = em
                    .createNativeQuery("select VL_PARAMETRO from BOP_PARAMETROS_UNIDADE where CD_AGENCIA = ? and CD_UNID_POLICIAL = ? "
                            + "and ID_PARAMETRO = ?");

            query.setParameter(1, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdAgencia());
            query.setParameter(2, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdUnidPolicial());
            query.setParameter(3,
                    BopParametrosUnidade.PODEGERAROCORRENCIA.getDescricao());
            try {
                if ("S".equals(query.getSingleResult().toString())) {
                    return true;
                }
            } catch (NoResultException e) {
                return true;
            }

            return false;
        } catch (Exception e) {
            throw new BusinessException("012_276: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public GestaoAlerta save(GestaoAlerta gestaoAlerta)
            throws BusinessException {
        try {
            GestaoAlerta retorno = em.merge(gestaoAlerta);
            em.flush();
            em.refresh(retorno);
            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_277: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public BopAcessoUsuarioOcorDeon getAcessoOcorrencia(
            BopOcorrencia bopOcorrencia, BopUsuarios bopUsuarioLogado)
            throws BusinessException {
        int codigoOcorrenciaDeon = findOcorrenciaDeonByOcorrencia(bopOcorrencia)
                .getIdOcorrenciaDeon();
        try {
            Query query = em
                    .createNamedQuery(BopAcessoUsuarioOcorDeon.FIND_ACESSO_BY_USUARIO_OCORRENCIA);
            query.setParameter("idUsuario", bopUsuarioLogado.getCdUsuario());
            query.setParameter("idOcorrenciaDeon", codigoOcorrenciaDeon);

            return (BopAcessoUsuarioOcorDeon) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_278: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    private BopOcorrenciaDeon findOcorrenciaDeonByOcorrencia(
            BopOcorrencia bopOcorrencia) throws BusinessException {
        Query query = em
                .createNamedQuery(BopOcorrenciaDeon.FIND_OCORRENCIA_DEON_BY_OCORRENCIA);
        try {
            query.setParameter("nrBop", bopOcorrencia.getId().getNrBop());
            query.setParameter("tipoBop", bopOcorrencia.getId().getTipoBop());
            return (BopOcorrenciaDeon) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_279: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public boolean existeDespachoAgencia(Long agencia, String nrChamadoSigilosa)
            throws BusinessException {
        BopDespachoAndamento bopDespachoAndamento = null;

        Query query = em
                .createNativeQuery(
                        "select * from BOP_DESPACHO_ANDAMENTO where CD_AGENCIA = ? and NR_CHAMADO = ? ",
                        BopDespachoAndamento.class);

        query.setParameter(1, agencia);
        query.setParameter(2, Long.valueOf(nrChamadoSigilosa));
        query.setMaxResults(1);
        try {
            bopDespachoAndamento = (BopDespachoAndamento) query
                    .getSingleResult();

            if (bopDespachoAndamento != null
                    && bopDespachoAndamento.getId() != null) {
                return true;
            }

            return false;
        } catch (NoResultException e) {
            return false;
        } catch (Exception e) {
            throw new BusinessException("012_280: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopChamadoViaturaFake> listarViaturasChamado(String nrChamado)
            throws BusinessException {
        List<BopChamadoViaturaFake> list = null;

        try {
            Query query = em
                    .createNativeQuery(
                            " SELECT ROWNUM, BCO.NR_BOP, BCO.TIPO_BOP, BCV.CD_VIATURA, BCV.CD_GUARNICAO, BCV.DT_CHEGADA_LOCAL, "
                            + "BCV.DT_FIM_OPERACAO, BCV.DT_INICIO_OPERACAO, BCV.KM_CHEGADA_LOCAL, BCV.KM_FIM_OPERACAO, BCV.KM_INICIO_OPERACAO "
                            + "FROM BOP_CHAMADO_VIATURA BCV LEFT JOIN BOP_CHAMADO_OCORRENCIA BCO "
                            + "ON ( BCO.NR_CHAMADO = BCV.NR_CHAMADO AND BCO.NR_TELEFONE = BCV.NR_TELEFONE AND BCO.NR_DDD = BCV.NR_DDD ) "
                            + "WHERE BCO.NR_CHAMADO = ? ",
                            BopChamadoViaturaFake.class);

            query.setParameter(1, nrChamado);

            list = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_281: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return list;
    }

    @Override
    public void copiarViaturasChamado(String nrChamado)
            throws BusinessException {

        try {
            List<BopChamadoViaturaFake> list = listarViaturasChamado(nrChamado);

            for (BopChamadoViaturaFake i : list) {
                Query query = em
                        .createNativeQuery("INSERT INTO BOP_OCORRENCIA_VIATURA (NR_BOP, TIPO_BOP, CD_VIATURA, CD_GUARNICAO, DT_CHEGADA_LOCAL, DT_FIM_OPERACAO, DT_INICIO_OPERACAO, KM_CHEGADA_LOCAL, KM_FIM_OPERACAO, KM_INICIO_OPERACAO ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ? )");

                query.setParameter(1, i.getNrBop());
                query.setParameter(2, i.getTipoBop());
                query.setParameter(3, i.getCdViatura());
                query.setParameter(4, i.getCdGuarnicao());
                query.setParameter(5, i.getDataChegadaLocal());
                query.setParameter(6, i.getDataFimOperacao());
                query.setParameter(7, i.getDataInicioOperacao());
                query.setParameter(8, i.getKmChegadaLocal());
                query.setParameter(9, i.getKmFimOperacao());
                query.setParameter(10, i.getKmInicioOperacao());

                query.executeUpdate();
            }
        } catch (Exception e) {
            throw new BusinessException("012_282: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopPeculiaridadeEnvolFoto insertBopPeculiaridadeEnvolFoto(
            BopPeculiaridadeEnvolFoto peculiaridadeFoto)
            throws BusinessException {

        try {

            peculiaridadeFoto = em.merge(peculiaridadeFoto);

            em.flush();
            em.refresh(peculiaridadeFoto);

        } catch (Exception e) {

            throw new BusinessException("012_283: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return peculiaridadeFoto;

    }

    public BopNacionalidade getBopNacionalidade(int cdNacion)
            throws BusinessException {

        BopNacionalidade bopNacionalidade = null;
        Object[] obj = null;

        Query query = em
                .createNativeQuery("SELECT * FROM BOP_NACIONALIDADE BN WHERE BN.CD_NACION = ? ");

        query.setParameter(1, cdNacion);

        try {
            obj = (Object[]) query.getSingleResult();
            bopNacionalidade = new BopNacionalidade();
            bopNacionalidade.setCdNacion(Long.parseLong(String
                    .valueOf((BigDecimal) obj[0])));
            bopNacionalidade.setDsNacion((String) obj[1]);
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            bopNacionalidade = null;
            throw new BusinessException("012_284: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopNacionalidade;
    }

    @SuppressWarnings("rawtypes")
    public void clearCache(Class... classes) {
        for (Class cls : classes) {
            em.getEntityManagerFactory().getCache().evict(cls);
        }
    }

    public List<UnidadeEntity> findAllUnidade(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL, "
                    + "BOP_UNIDADE_POLICIAL.CD_AGENCIA, "
                    + "BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL "
                    + "FROM BOP_OCORRENCIA_AGENCIA "
                    + "INNER JOIN BOP_UNIDADE_POLICIAL ON "
                    + "BOP_UNIDADE_POLICIAL.CD_AGENCIA = BOP_OCORRENCIA_AGENCIA.CD_AGENCIA AND "
                    + "BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL "
                    + "WHERE BOP_OCORRENCIA_AGENCIA.NR_BOP = ? AND "
                    + "BOP_OCORRENCIA_AGENCIA.TIPO_BOP = ?";

            Query query = em.createNativeQuery(sql, UnidadeEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_285: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<ViaturaEntity> findAllViatura(Long nrBop, String tipoBop,
            Long codigoAgencia, Long codigoUnidade) throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, BOP_OCORRENCIA_VIATURA.CD_VIATURA AS CODIGO_VIATURA "
                    + "FROM BOP_OCORRENCIA_VIATURA "
                    + "INNER JOIN BOP_OCORRENCIA_VIATURA_DEON ON "
                    + "BOP_OCORRENCIA_VIATURA_DEON.NR_BOP = BOP_OCORRENCIA_VIATURA.NR_BOP AND "
                    + "BOP_OCORRENCIA_VIATURA_DEON.TIPO_BOP = BOP_OCORRENCIA_VIATURA.TIPO_BOP AND "
                    + "BOP_OCORRENCIA_VIATURA_DEON.ID_OCORRENCIA_VIATURA = BOP_OCORRENCIA_VIATURA.ID_OCORRENCIA_VIATURA AND "
                    + "BOP_OCORRENCIA_VIATURA_DEON.CD_VIATURA = BOP_OCORRENCIA_VIATURA.CD_VIATURA "
                    + "WHERE BOP_OCORRENCIA_VIATURA.NR_BOP = ? AND "
                    + "BOP_OCORRENCIA_VIATURA.TIPO_BOP = ? AND "
                    + "BOP_OCORRENCIA_VIATURA_DEON.CD_AGENCIA = ? AND "
                    + "BOP_OCORRENCIA_VIATURA_DEON.CD_UNID_POLICIAL = ?";

            Query query = em.createNativeQuery(sql, ViaturaEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);
            query.setParameter(3, codigoAgencia);
            query.setParameter(4, codigoUnidade);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_286: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<DetidoConduzidoEntity> findAllDetidoConduzidoMenor(Long nrBop,
            String tipoBop) throws BusinessException {
        try {
            String sql = " SELECT ROWNUM, SEXO, QUANTIDADE FROM ( SELECT ID_SEXO AS SEXO, COUNT (DISTINCT BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO_DEON) AS QUANTIDADE "
                    + " FROM BOP_ENVOLVIDOS_OCORRENCIA "
                    + "INNER JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON ON BOP_ENVOLVIDO_OCORRENCIA_DEON.NR_BOP = BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP"
                    + " AND BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP =  BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP  AND BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO =  BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO "
                    + " INNER JOIN BOP_ENVOLVIDO_TIPO_ENVOL ON (BOP_ENVOLVIDO_TIPO_ENVOL.ID_ENVOLVIDO_DEON = BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO_DEON AND BOP_ENVOLVIDO_TIPO_ENVOL.FL_ATIVO = 'S')"
                    + " WHERE BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP = ? AND BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP = ? AND BOP_ENVOLVIDO_TIPO_ENVOL.CD_TIPO_ENV IN (32, 9, 10)"
                    + " AND (ADD_MONTHS (BOP_ENVOLVIDOS_OCORRENCIA.DT_NASCIMENTO, 216)) > ( SELECT SYSDATE FROM DUAL) GROUP BY ID_SEXO)";

            Query query = em
                    .createNativeQuery(sql, DetidoConduzidoEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_287: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<DetidoConduzidoEntity> findAllDetidoConduzidoMaior(Long nrBop,
            String tipoBop) throws BusinessException {
        try {
            String sql = " SELECT ROWNUM, SEXO, QUANTIDADE FROM ( SELECT ID_SEXO AS SEXO, COUNT (DISTINCT BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO_DEON) AS QUANTIDADE"
                    + " FROM BOP_ENVOLVIDOS_OCORRENCIA INNER JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON ON BOP_ENVOLVIDO_OCORRENCIA_DEON.NR_BOP = BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP"
                    + " AND BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP = BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP AND BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO = BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO"
                    + " INNER JOIN BOP_ENVOLVIDO_TIPO_ENVOL ON ( BOP_ENVOLVIDO_TIPO_ENVOL.ID_ENVOLVIDO_DEON = BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO_DEON AND BOP_ENVOLVIDO_TIPO_ENVOL.FL_ATIVO = 'S')"
                    + " WHERE BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP = ? AND BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP = ? AND BOP_ENVOLVIDO_TIPO_ENVOL.CD_TIPO_ENV IN (32, 9, 10)"
                    + " AND (ADD_MONTHS (BOP_ENVOLVIDOS_OCORRENCIA.DT_NASCIMENTO, 216)) <= ( SELECT SYSDATE FROM DUAL) GROUP BY ID_SEXO)";

            Query query = em
                    .createNativeQuery(sql, DetidoConduzidoEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_288: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<DrogaEntity> findAllDroga(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, REPLACE (REPLACE (REPLACE (BOP_TIPO_DROGA.DS_TIPO_DROGA, 'ILICITA: ', ''), 'LICITA: ', ''), 'USO CONTROLADO: ', '') AS TIPO, "
                    + "SUM(BOP_OBJETO_OCORR_DROGA.QT_OBJETO) AS QUANTIDADE, "
                    + "BOP_UNIDADE_MEDIDA.DS_UNIDADE_MEDIDA AS MEDIDA "
                    + "FROM BOP_OBJETO_OCORR_DROGA "
                    + "LEFT OUTER JOIN BOP_TIPO_DROGA ON "
                    + "BOP_TIPO_DROGA.CD_TIPO_DROGA = BOP_OBJETO_OCORR_DROGA.CD_TIPO_DROGA "
                    + "LEFT OUTER JOIN BOP_UNIDADE_MEDIDA ON "
                    + "BOP_UNIDADE_MEDIDA.CD_UNIDADE_MEDIDA = BOP_OBJETO_OCORR_DROGA.CD_UNIDADE_MEDIDA "
                    + "WHERE BOP_OBJETO_OCORR_DROGA.NR_BOP = ? AND "
                    + "BOP_OBJETO_OCORR_DROGA.TIPO_BOP = ? "
                    + "GROUP BY  ROWNUM, REPLACE (REPLACE (REPLACE (BOP_TIPO_DROGA.DS_TIPO_DROGA, 'ILICITA: ', ''), 'LICITA: ', ''), 'USO CONTROLADO: ', ''), "
                    + "BOP_UNIDADE_MEDIDA.DS_UNIDADE_MEDIDA";

            Query query = em.createNativeQuery(sql, DrogaEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_289: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<ArmaEntity> findAllArma(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, BOP_CALIBRE_ARMA.DS_CALIBRE_ARMA AS CALIBRE, "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.DS_MODELO AS MODELO, "
                    + "( CASE "
                    + "WHEN BOP_OBJETO_OCORR_ARMA_DEON.NR_SERIE IS NOT NULL THEN BOP_OBJETO_OCORR_ARMA_DEON.NR_SERIE "
                    + "ELSE ( CASE "
                    + "WHEN FL_SERIE_RASPADO = 'S' THEN 'RASPADO' "
                    + "ELSE ( CASE "
                    + "WHEN FL_SERIE_ILEGIVEL = 'S' THEN 'ILEGíVEL' "
                    + "ELSE '' "
                    + "END ) "
                    + "END ) "
                    + "END ) AS NUMERO, "
                    + "BOP_MARCA_MAT_APREENDIDO.DS_MARCA AS MARCA, "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.DS_CAPACIDADE AS CAPACIDADE, "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.NR_QUANTIDADE_CANOS AS CANO, "
                    + "BOP_ACABAMENTO_ARMA.DS_ACABAMENTO_ARMA AS ACABAMENTO, "
                    + "BOP_FUNCIONAMENTO_ARMA.DS_FUNCIONAMENTO AS FUNCIONAMENTO, "
                    + "( CASE "
                    + "WHEN BOP_OBJETO_OCORR_ARMA_DEON.ID_ALMA = 1 THEN 'LISA' "
                    + "ELSE ( CASE "
                    + "WHEN BOP_OBJETO_OCORR_ARMA_DEON.ID_ALMA = 2 THEN 'RAIADA' "
                    + "ELSE '' "
                    + "END ) "
                    + "END ) as ALMA, "
                    + "DECODE (BOP_OBJETO_OCORR_ARMA_DEON.ID_TIPO_ARMA, 1, 'ARMA DE FOGO', 2, 'SIMULACRO', 3, 'ARMA DE BRINQUEDO') AS TIPO_ARMA "
                    + "FROM BOP_OBJETO_OCORR_ARMA "
                    + "INNER JOIN BOP_OCORRENCIA_OBJETOS ON BOP_OCORRENCIA_OBJETOS.NR_BOP = BOP_OBJETO_OCORR_ARMA.NR_BOP AND BOP_OCORRENCIA_OBJETOS.TIPO_BOP = BOP_OBJETO_OCORR_ARMA.TIPO_BOP AND BOP_OCORRENCIA_OBJETOS.ID_OBJETO = BOP_OBJETO_OCORR_ARMA.ID_OBJETO "
                    + "INNER JOIN BOP_OBJETO_OCORR_ARMA_DEON ON "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.NR_BOP = BOP_OBJETO_OCORR_ARMA.NR_BOP AND "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.TIPO_BOP = BOP_OBJETO_OCORR_ARMA.TIPO_BOP AND "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.ID_ARMA = BOP_OBJETO_OCORR_ARMA.ID_ARMA "
                    + "LEFT OUTER JOIN BOP_CALIBRE_ARMA ON "
                    + "BOP_CALIBRE_ARMA.CD_CALIBRE_ARMA = BOP_OBJETO_OCORR_ARMA.CD_CALIBRE_ARMA "
                    + "LEFT OUTER JOIN BOP_MARCA_MAT_APREENDIDO ON "
                    + "BOP_OBJETO_OCORR_ARMA.CD_MARCA = BOP_MARCA_MAT_APREENDIDO.CD_MARCA "
                    + "LEFT OUTER JOIN BOP_ACABAMENTO_ARMA ON "
                    + "BOP_ACABAMENTO_ARMA.CD_ACABAMENTO_ARMA = BOP_OBJETO_OCORR_ARMA_DEON.ID_TIPO_ACABAMENTO "
                    + "LEFT OUTER JOIN BOP_FUNCIONAMENTO_ARMA ON "
                    + "BOP_FUNCIONAMENTO_ARMA.CD_FUNCIONAMENTO = BOP_OBJETO_OCORR_ARMA_DEON.ID_TIPO_FUNCIONAMENTO "
                    + "WHERE BOP_OBJETO_OCORR_ARMA_DEON.NR_BOP = ? AND "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.TIPO_BOP = ? "
                    + "AND BOP_OCORRENCIA_OBJETOS.CD_TIPO_MAT_APR = 2";

            Query query = em.createNativeQuery(sql, ArmaEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_290: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<MunicaoEntity> findAllMunicao(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, SUM (BOP_OBJETO_OCORR_MUNICAO_DEON.NR_QUANTIDADE) AS QUANTIDADE, "
                    + "BOP_CALIBRE_ARMA.DS_CALIBRE_ARMA AS CALIBRE, "
                    + "(CASE "
                    + "WHEN BOP_OBJETO_OCORR_MUNICAO_DEON.FL_DEFLAGRADA_PICOTADA = 'P' THEN 'PICOTADA' "
                    + "WHEN BOP_OBJETO_OCORR_MUNICAO_DEON.FL_DEFLAGRADA_PICOTADA = 'D' THEN 'DEFLAGRADA' "
                    + "ELSE '' "
                    + "END ) AS DEFLAGRADA_PICOTADA "
                    + "FROM BOP_OBJETO_OCORR_MUNICAO_DEON "
                    + "LEFT OUTER JOIN BOP_CALIBRE_ARMA ON "
                    + "BOP_CALIBRE_ARMA.CD_CALIBRE_ARMA = BOP_OBJETO_OCORR_MUNICAO_DEON.CD_CALIBRE "
                    + "WHERE BOP_OBJETO_OCORR_MUNICAO_DEON.NR_BOP = ? AND "
                    + "BOP_OBJETO_OCORR_MUNICAO_DEON.TIPO_BOP = ? "
                    + "GROUP BY ROWNUM, BOP_CALIBRE_ARMA.DS_CALIBRE_ARMA, "
                    + "(CASE "
                    + "WHEN BOP_OBJETO_OCORR_MUNICAO_DEON.FL_DEFLAGRADA_PICOTADA = 'P' THEN 'PICOTADA' "
                    + "WHEN BOP_OBJETO_OCORR_MUNICAO_DEON.FL_DEFLAGRADA_PICOTADA = 'D' THEN 'DEFLAGRADA' "
                    + "ELSE '' " + "END )";

            Query query = em.createNativeQuery(sql, MunicaoEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_291: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<AcessorioEntity> findAllAcessorio(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, COUNT(*) AS QUANTIDADE, "
                    + "BOP_TIPO_ACESSORIO_ARMA_DEON.DS_TIPO_ACESSORIO_ARMA_DEON AS TIPO "
                    + "FROM BOP_OBJETO_OCORR_ARMA "
                    + "INNER JOIN BOP_OBJETO_OCORR_ARMA_DEON ON "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.NR_BOP = BOP_OBJETO_OCORR_ARMA.NR_BOP AND "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.TIPO_BOP = BOP_OBJETO_OCORR_ARMA.TIPO_BOP AND "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.ID_OBJETO = BOP_OBJETO_OCORR_ARMA.ID_OBJETO "
                    + "INNER JOIN BOP_ACESSORIO_ARMA_DEON ON "
                    + "BOP_ACESSORIO_ARMA_DEON.ID_ARMA_DEON = BOP_OBJETO_OCORR_ARMA.ID_ARMA "
                    + "LEFT OUTER JOIN BOP_TIPO_ACESSORIO_ARMA_DEON ON "
                    + "BOP_TIPO_ACESSORIO_ARMA_DEON.ID_TIPO_ACESSORIO_ARMA_DEON = BOP_ACESSORIO_ARMA_DEON.ID_TIPO_ACESSORIO_ARMA_DEON "
                    + "WHERE BOP_OBJETO_OCORR_ARMA_DEON.NR_BOP = ? AND "
                    + "BOP_OBJETO_OCORR_ARMA_DEON.TIPO_BOP = ? "
                    + "GROUP BY ROWNUM, BOP_TIPO_ACESSORIO_ARMA_DEON.DS_TIPO_ACESSORIO_ARMA_DEON";

            Query query = em.createNativeQuery(sql, AcessorioEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_292: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<DinheiroEntity> findAllDinheiro(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, SUM (BOP_OBJ_OCORR_DINHEIRO_DEON.VL_DINHEIRO) AS VALOR, "
                    + "BOP_MOEDA_DEON.DS_MOEDA AS MOEDA "
                    + "FROM BOP_OBJ_OCORR_DINHEIRO_DEON "
                    + "LEFT OUTER JOIN BOP_MOEDA_DEON ON "
                    + "BOP_MOEDA_DEON.CD_MOEDA = BOP_OBJ_OCORR_DINHEIRO_DEON.CD_MOEDA "
                    + "WHERE BOP_OBJ_OCORR_DINHEIRO_DEON.NR_BOP = ? AND "
                    + "BOP_OBJ_OCORR_DINHEIRO_DEON.TIPO_BOP = ? "
                    + "GROUP BY ROWNUM, BOP_MOEDA_DEON.DS_MOEDA";

            Query query = em.createNativeQuery(sql, DinheiroEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_293: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<VeiculoEntity> findAllVeiculo(Long nrBop, String tipoBop)
            throws BusinessException {
        try {
            String sql = "SELECT ROWNUM, COUNT(*) AS QUANTIDADE, "
                    + "BOP_TIPO_VEICULO_DEON.DS_TIPO_VEICULO_DEON, "
                    + "BOP_MARCA_MAT_APREENDIDO.DS_MARCA as MARCA, "
                    + "BOP_MODELO_MAT_APREENDIDO.DS_MODELO AS MODELO, "
                    + "BOP_OBJETO_OCORR_VEICULO.NR_PLACA AS PLACA, "
                    + "BOP_CORES.DS_COR AS COR, "
                    + "BOP_TIPO_ACAO_OBJETO_DEON.DS_TIPO_ACAO_OBJETO AS MOTIVO "
                    + "FROM BOP_OBJETO_OCORR_VEICULO "
                    + "INNER JOIN BOP_OBJETO_OCORR_VEICULO_DEON ON "
                    + "BOP_OBJETO_OCORR_VEICULO_DEON.NR_BOP = BOP_OBJETO_OCORR_VEICULO.NR_BOP AND "
                    + "BOP_OBJETO_OCORR_VEICULO_DEON.TIPO_BOP = BOP_OBJETO_OCORR_VEICULO.TIPO_BOP AND "
                    + "BOP_OBJETO_OCORR_VEICULO_DEON.ID_OBJETO = BOP_OBJETO_OCORR_VEICULO.ID_OBJETO "
                    + "INNER JOIN BOP_OCORRENCIA_OBJETOS ON "
                    + "BOP_OCORRENCIA_OBJETOS.NR_BOP = BOP_OBJETO_OCORR_VEICULO.NR_BOP AND "
                    + "BOP_OCORRENCIA_OBJETOS.TIPO_BOP = BOP_OBJETO_OCORR_VEICULO.TIPO_BOP AND "
                    + "BOP_OCORRENCIA_OBJETOS.ID_OBJETO = BOP_OBJETO_OCORR_VEICULO.ID_OBJETO "
                    + "INNER JOIN BOP_TIPO_ACAO_OBJETO_DEON ON "
                    + "BOP_TIPO_ACAO_OBJETO_DEON.ID_TIPO_ACAO_OBJETO = BOP_OCORRENCIA_OBJETOS.ID_TIPO_ACAO "
                    + "LEFT OUTER JOIN BOP_MODELO_MAT_APREENDIDO ON "
                    + "BOP_OBJETO_OCORR_VEICULO.CD_MARCA = BOP_MODELO_MAT_APREENDIDO.CD_MARCA AND "
                    + "BOP_OBJETO_OCORR_VEICULO.CD_MODELO = BOP_MODELO_MAT_APREENDIDO.CD_MODELO "
                    + "LEFT OUTER JOIN BOP_MARCA_MAT_APREENDIDO ON "
                    + "BOP_OBJETO_OCORR_VEICULO.CD_MARCA = BOP_MARCA_MAT_APREENDIDO.CD_MARCA "
                    + "LEFT OUTER JOIN BOP_CORES ON "
                    + "BOP_OBJETO_OCORR_VEICULO_DEON.CD_COR = BOP_CORES.CD_COR "
                    + "LEFT OUTER JOIN BOP_TIPO_VEICULO_DEON ON "
                    + "BOP_TIPO_VEICULO_DEON.ID_TIPO_VEICULO_DEON = BOP_OBJETO_OCORR_VEICULO_DEON.ID_TIPO_VEICULO_DEON "
                    + "WHERE BOP_OBJETO_OCORR_VEICULO_DEON.NR_BOP = ? AND "
                    + "BOP_OBJETO_OCORR_VEICULO_DEON.TIPO_BOP = ? "
                    + "GROUP BY ROWNUM, BOP_TIPO_VEICULO_DEON.DS_TIPO_VEICULO_DEON, "
                    + "BOP_MARCA_MAT_APREENDIDO.DS_MARCA, "
                    + "BOP_MODELO_MAT_APREENDIDO.DS_MODELO, "
                    + "BOP_OBJETO_OCORR_VEICULO.NR_PLACA, "
                    + "BOP_CORES.DS_COR, "
                    + "BOP_TIPO_ACAO_OBJETO_DEON.DS_TIPO_ACAO_OBJETO";

            Query query = em.createNativeQuery(sql, VeiculoEntity.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_294: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopModeloMatApreendido getBopModeloMatApreendido(
            BopModeloMatApreendidoPK pk) throws BusinessException {
        BopModeloMatApreendido bopModeloMatApreendido = null;
        Object[] obj = null;

        Query query = em
                .createNativeQuery("SELECT BMMA.CD_MARCA, BMMA.CD_MODELO, BMMA.DS_MODELO FROM BOP_MODELO_MAT_APREENDIDO BMMA WHERE BMMA.CD_MARCA = ? AND BMMA.CD_MODELO = ? ");

        query.setParameter(1, pk.getCdMarca());
        query.setParameter(2, pk.getCdModelo());

        try {
            obj = (Object[]) query.getSingleResult();
            bopModeloMatApreendido = new BopModeloMatApreendido();
            bopModeloMatApreendido.setId(new BopModeloMatApreendidoPK());
            bopModeloMatApreendido.getId().setCdMarca(
                    Long.parseLong(String.valueOf(obj[0])));
            bopModeloMatApreendido.getId().setCdModelo(
                    Long.parseLong(String.valueOf(obj[1])));
            bopModeloMatApreendido.setDsModelo(String.valueOf(obj[2]));
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_295: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopModeloMatApreendido;

    }

    public BopEnvolvidosOcorrencia getBopEnvolvidoOcorrencia(
            BopEnvolvidosOcorrenciaPK pk) throws BusinessException {
        BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia = null;
        Object[] obj = null;

        Query query = em
                .createNativeQuery("SELECT *FROM BOP_ENVOLVIDOS_OCORRENCIA WHERE BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP = ? AND BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP = ? ");

        query.setParameter(1, pk.getNrBop());
        query.setParameter(2, pk.getTipoBop());

        try {
            obj = (Object[]) query.getSingleResult();
            bopEnvolvidosOcorrencia = new BopEnvolvidosOcorrencia();
            bopEnvolvidosOcorrencia.setId(new BopEnvolvidosOcorrenciaPK());
            bopEnvolvidosOcorrencia.getId().setNrBop(
                    Long.parseLong(String.valueOf(obj[1])));
            bopEnvolvidosOcorrencia.getId().setTipoBop(String.valueOf(obj[2]));
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_296: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopEnvolvidosOcorrencia;

    }

    public BopEnderecoEnvolvido getUltimoBopEnderecoEnvolvidoByEnvolvidoDeon(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {
        BopEnderecoEnvolvido bopEnderecoEnvolvido = null;
        try {

            Query query = em
                    .createNativeQuery(
                            "SELECT BOP_ENDERECO_ENVOLVIDO_DEON.* FROM BOP_ENDERECO_ENVOLVIDO_DEON WHERE BOP_ENDERECO_ENVOLVIDO_DEON.ID_ENDERECO = ( "
                            + "	SELECT MAX(BEED.ID_ENDERECO) FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                            + "	JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD "
                            + "        ON BEO.NR_BOP = BEOD.NR_BOP AND BEO.TIPO_BOP = BEOD.TIPO_BOP AND BEO.ID_ENVOLVIDO = BEOD.ID_ENVOLVIDO "
                            + "	JOIN BOP_ENDERECO_ENVOLVIDO_DEON BEED "
                            + "        ON BEOD.ID_ENVOLVIDO_DEON = BEED.ID_ENVOLVIDO_DEON "
                            + "	WHERE BEO.DT_ALTERACAO = (  SELECT MAX(BEO.DT_ALTERACAO) FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                            + "		JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD "
                            + "       	ON BEO.NR_BOP = BEOD.NR_BOP AND BEO.TIPO_BOP = BEOD.TIPO_BOP AND BEO.ID_ENVOLVIDO = BEOD.ID_ENVOLVIDO "
                            + "		JOIN BOP_ENDERECO_ENVOLVIDO_DEON BEED "
                            + "       	ON BEOD.ID_ENVOLVIDO_DEON = BEED.ID_ENVOLVIDO_DEON "
                            + "      	WHERE BEO.ID_DOC_IDENTID = ? AND BEO.CD_UF_IDENTID = ? "
                            + "		) "
                            + " AND BEED.ID_ENVOLVIDO_DEON IN ( "
                            + " SELECT BEED.ID_ENVOLVIDO_DEON  FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                            + " JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD "
                            + " 	ON BEO.NR_BOP = BEOD.NR_BOP AND BEO.TIPO_BOP = BEOD.TIPO_BOP AND BEO.ID_ENVOLVIDO = BEOD.ID_ENVOLVIDO"
                            + " JOIN BOP_ENDERECO_ENVOLVIDO_DEON BEED "
                            + "   ON BEOD.ID_ENVOLVIDO_DEON = BEED.ID_ENVOLVIDO_DEON"
                            + " WHERE BEO.ID_DOC_IDENTID = ? AND BEO.CD_UF_IDENTID = ? "
                            + " )"
                            + ") ",
                            BopEnderecoEnvolvido.class);

            query.setParameter(1, bopEnvolvidosOcorrencia.getIdDocIdentid());
            query.setParameter(2, bopEnvolvidosOcorrencia.getCdUfIdentid());
            query.setParameter(3, bopEnvolvidosOcorrencia.getIdDocIdentid());
            query.setParameter(4, bopEnvolvidosOcorrencia.getCdUfIdentid());

            bopEnderecoEnvolvido = (BopEnderecoEnvolvido) query
                    .getSingleResult();
        } catch (NoResultException e) {
            System.err
                    .println("O envolvido selecionado não possui endereço cadastrado.");
        } catch (Exception e) {
            throw new BusinessException("012_297: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return bopEnderecoEnvolvido;
    }

    public BopEnderecoEnvolvido getBopEnderecoEnvolvidoByEnvolvidoDeon(
            BopEnvolvidoOcorrenciaDeon bopEnvolvidoOcorrenciaDeon)
            throws BusinessException {
        BopEnderecoEnvolvido bopEnderecoEnvolvido = null;
        try {

            Query query = em
                    .createNativeQuery(
                            "SELECT * FROM BOP_ENDERECO_ENVOLVIDO_DEON BEED WHERE BEED.ID_ENVOLVIDO_DEON = ? "
                            + " AND BEED.ID_ENDERECO = ( "
                            + " SELECT MAX(BEED2.ID_ENDERECO) FROM BOP_ENDERECO_ENVOLVIDO_DEON BEED2 WHERE BEED2.ID_ENVOLVIDO_DEON = BEED.ID_ENVOLVIDO_DEON  ) ",
                            BopEnderecoEnvolvido.class);

            query.setParameter(1, bopEnvolvidoOcorrenciaDeon.getIdEnvolvidoDeon());

            bopEnderecoEnvolvido = (BopEnderecoEnvolvido) query.setMaxResults(1).getSingleResult();

        } catch (NoResultException e) {
            System.err
                    .println("O envolvido selecionado não possui endereço cadastrado.");
        } catch (Exception e) {
            throw new BusinessException("012_298: "
                    + "Ocorreu um erro inesperado.", e);

        }
        return bopEnderecoEnvolvido;
    }

    public BopEnderecoEnvolvido getUltimoEnderecoEnvolvido(
            Long codigoEnvolvidoDeon) throws BusinessException {

        try {
            String sql = "SELECT * FROM BOP_ENDERECO_ENVOLVIDO_DEON WHERE ID_ENDERECO = ( SELECT MAX(ID_ENDERECO) FROM BOP_ENDERECO_ENVOLVIDO_DEON WHERE ID_ENVOLVIDO_DEON = ? )";

            Query query = em.createNativeQuery(sql, BopEnderecoEnvolvido.class);

            query.setParameter(1, codigoEnvolvidoDeon);

            return (BopEnderecoEnvolvido) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_299: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public <T extends Serializable> T mergeObject(T object)
            throws BusinessException {

        try {
            T t = (T) em.merge(object);

            return t;
        } catch (Exception e) {
            throw new BusinessException("012_300: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public Long getNextValueNumeroRelatorio() throws BusinessException {
        BigDecimal obj = null;
        Long l = 0L;
        Query query = em
                .createNativeQuery("  SELECT nvl(MAX (BOLCD.NR_RELATORIO),0) NR_RELATORIO FROM BOP_OCOR_LOCAL_CRIME_DEON BOLCD WHERE BOLCD.NR_ANO_RELATORIO = ? ");

        query.setParameter(
                1,
                Long.valueOf(String.valueOf(Calendar.getInstance().get(
                        Calendar.YEAR))));

        try {
            obj = (BigDecimal) query.getSingleResult();
            l = Long.parseLong(String.valueOf(obj));

            l = l + 1L;
        } catch (NoResultException e) {
            return 0L;
        } catch (Exception e) {
            l = l + 1L; // se o retorno da consulta for null é pq não existe nr
            // relatório para o ano, logo o nr relatorio será igual
            // a 1
            throw new BusinessException("012_301: "
                    + "Ocorreu um erro inesperado.", e);

        }
        return l;
    }

    public List<BopOcorrenciaAgencia> getListaOcorrenciaAgenciaByOcorrencia(
            BopOcorrencia bopOcorrencia) throws BusinessException {
        try {
            List<BopOcorrenciaAgencia> listBopOcorrenciaAgencia = (List<BopOcorrenciaAgencia>) em
                    .createNamedQuery(
                            "BopOcorrenciaAgencia.findBopOcorrenciaAgenciaByOcorrencia")
                    .setParameter("nrBop", bopOcorrencia.getId().getNrBop())
                    .setParameter("tipoBop", bopOcorrencia.getId().getTipoBop())
                    .getResultList();
            return listBopOcorrenciaAgencia;
        } catch (Exception e) {
            throw new BusinessException("012_302: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopEnvolvidoTipoEnvolvido> getListaBopEnvolvidoTipoEnvolvido(
            Long nrChamado, Long idEnvolvidoDeon) throws BusinessException {
        List<BopEnvolvidoTipoEnvolvido> listaBopEnvolvidoTipoEnvolvido = null;
        try {

            Query query = em
                    .createNativeQuery(
                            " SELECT BETE.* FROM BOP_ENVOLVIDO_TIPO_ENVOL BETE "
                            + " INNER JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD ON (BETE.ID_ENVOLVIDO_DEON = BEOD.ID_ENVOLVIDO_DEON) "
                            + " INNER JOIN BOP_CHAMADO_OCORRENCIA BCO ON (BEOD.NR_BOP = BCO.NR_BOP AND BEOD.TIPO_BOP = BCO.TIPO_BOP) "
                            + " WHERE BCO.NR_CHAMADO = ? AND BEOD.ID_ENVOLVIDO_DEON = ? ",
                            BopEnvolvidoTipoEnvolvido.class);

            query.setParameter(1, nrChamado);
            query.setParameter(2, idEnvolvidoDeon);

            listaBopEnvolvidoTipoEnvolvido = (List<BopEnvolvidoTipoEnvolvido>) query
                    .getResultList();
        } catch (NoResultException e) {
            System.err
                    .println("Este envolvido não possui histórico nesta ocorrência.");
        } catch (Exception e) {
            throw new BusinessException("012_303: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return listaBopEnvolvidoTipoEnvolvido;
    }

    public List<BopEnvolvidoTipoEnvolvido> getListaBopEnvolvidoTipoEnvolvido(
            Long idEnvolvidoDeon) throws BusinessException {
        List<BopEnvolvidoTipoEnvolvido> listaBopEnvolvidoTipoEnvolvido = null;
        try {

            Query query = em
                    .createNativeQuery(
                            " SELECT *FROM BOP_ENVOLVIDO_TIPO_ENVOL WHERE ID_ENVOLVIDO_DEON = ?",
                            BopEnvolvidoTipoEnvolvido.class);

            query.setParameter(1, idEnvolvidoDeon);

            listaBopEnvolvidoTipoEnvolvido = (List<BopEnvolvidoTipoEnvolvido>) query
                    .getResultList();

        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_304: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return listaBopEnvolvidoTipoEnvolvido;
    }

    public BopEnvolvidoTipoEnvolvido getListaBopEnvolvidoTipoEnvolvidoByAgencia(
            Long idEnvolvidoDeon, Long cdAgencia, Long cdUnidPolicial)
            throws BusinessException {
        BopEnvolvidoTipoEnvolvido listaBopEnvolvidoTipoEnvolvido = new BopEnvolvidoTipoEnvolvido();
        try {

            Query query = em
                    .createNativeQuery(
                            " SELECT * FROM BOP_ENVOLVIDO_TIPO_ENVOL WHERE ID_ENVOLVIDO_DEON = ? AND CD_AGENCIA = ? AND CD_UNID_POLICIAL = ? ",
                            BopEnvolvidoTipoEnvolvido.class);

            query.setParameter(1, idEnvolvidoDeon);
            query.setParameter(2, cdAgencia);
            query.setParameter(3, cdUnidPolicial);

            listaBopEnvolvidoTipoEnvolvido = (BopEnvolvidoTipoEnvolvido) query.getSingleResult();

        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_305: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return listaBopEnvolvidoTipoEnvolvido;
    }

    public List<SinqTipoProced> getAllSinqTipoProced() throws BusinessException {
        try {
            return (List<SinqTipoProced>) em.createNamedQuery(
                    "SinqTipoProced.findAll").getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_306: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopTipoMeioSolicitado> getAllMeioSolicitado()
            throws BusinessException {
        try {
            return em.createNamedQuery(BopTipoMeioSolicitado.FIND_ALL)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_307: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopFuncionario> getListBopPolicial(int indexPaginacao,
            int rows, String nome, BigDecimal nrFuncional, Boolean somentePC)
            throws BusinessException {

        Query query = null;

        int parametros = 1;

        String str = "SELECT * FROM (SELECT F.*, P.NM_LEGAL, ROWNUM RNUM FROM BOP_FUNCIONARIOS F JOIN BOP_PESSOAS P ON (F.ID_REGISTRO = P.ID_REGISTRO) WHERE P.NM_LEGAL LIKE ? AND P.CD_TIPO_PESSOA = 2 AND ROWNUM <= ? ";

        if (nrFuncional != null) {
            str += "AND F.NR_FUNCIONAL = ? ";
        }

        if (somentePC != null && somentePC) {
            str += "AND F.CD_AGENCIA = 3 ";
        }

        str += " )  WHERE RNUM  > ? ";

        query = em.createNativeQuery(str, BopFuncionario.class);

        query.setParameter(parametros++, this.montarLike(nome));

        query.setParameter(parametros++, indexPaginacao + rows);

        if (nrFuncional != null) {
            query.setParameter(parametros++, nrFuncional);
        }

        query.setParameter(parametros--, indexPaginacao);

        try {
            List<BopFuncionario> listBopFuncionario = query.getResultList();

            return listBopFuncionario;
        } catch (Exception e) {
            throw new BusinessException("012_308: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public int getListBopPolicialCount(String nome, BigDecimal nrFuncional,
            Boolean somentePC) throws BusinessException {

        Query query = null;

        int parametros = 1;

        String str = "SELECT COUNT(*) FROM BOP_FUNCIONARIOS F JOIN BOP_PESSOAS P ON (F.ID_REGISTRO = P.ID_REGISTRO) WHERE P.NM_LEGAL LIKE ? AND P.CD_TIPO_PESSOA = 2 ";

        if (nrFuncional != null) {
            str += "AND F.NR_FUNCIONAL = ? ";
        }

        if (somentePC != null && somentePC) {
            str += "AND F.CD_AGENCIA = 3 ";
        }

        query = em.createNativeQuery(str);

        query.setParameter(parametros++, this.montarLike(nome));

        if (nrFuncional != null) {
            query.setParameter(parametros++, nrFuncional);
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_309: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<BopViatura> getListBopViatura(int indexPaginacao, int rows,
            String cdViatura, String dsUnidadePolicial, Long codigoAgencia)
            throws BusinessException {
        Query query = null;

        int parametros = 1;

        String str = "SELECT * FROM (SELECT V.*, ROWNUM RNUM FROM BOP_VIATURAS V JOIN BOP_UNIDADE_POLICIAL U ON (V.CD_AGENCIA = U.CD_AGENCIA AND V.CD_UNID_POLICIAL = U.CD_UNID_POLICIAL) WHERE ROWNUM <= ? ";

        if (cdViatura != null && !"".equals(cdViatura)) {
            str += " AND V.CD_VIATURA LIKE ? ";
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            str += " AND U.DS_UNID_POLICIAL LIKE ? ";
        }

        if (codigoAgencia != null && !"".equals(codigoAgencia)) {
            str += " AND U.CD_AGENCIA = ? ";
        }

        str += " )  WHERE RNUM  > ? ";

        query = em.createNativeQuery(str, BopViatura.class);

        query.setParameter(parametros++, indexPaginacao + rows);

        if (cdViatura != null && !"".equals(cdViatura)) {
            query.setParameter(parametros++, this.montarLike(cdViatura));
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            query.setParameter(parametros++, montarLike(dsUnidadePolicial));
        }

        if (codigoAgencia != null && !"".equals(codigoAgencia)) {
            query.setParameter(parametros++, codigoAgencia);
        }

        query.setParameter(parametros--, indexPaginacao);

        List<BopViatura> listBopViatura;
        try {
            listBopViatura = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_310: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listBopViatura;
    }

    @Override
    public int getListBopViaturaCount(String cdViatura,
            String dsUnidadePolicial, Long codigoAgencia)
            throws BusinessException {
        Query query = null;

        int parametros = 1;

        String str = "SELECT COUNT(*) FROM BOP_VIATURAS V JOIN BOP_UNIDADE_POLICIAL U ON (V.CD_AGENCIA = U.CD_AGENCIA AND V.CD_UNID_POLICIAL = U.CD_UNID_POLICIAL) WHERE 1=1 ";

        if (cdViatura != null && !"".equals(cdViatura)) {
            str += " AND V.CD_VIATURA LIKE ? ";
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            str += " AND U.DS_UNID_POLICIAL LIKE ? ";
        }

        if (codigoAgencia != null && !"".equals(codigoAgencia)) {
            str += " AND U.CD_AGENCIA = ? ";
        }

        query = em.createNativeQuery(str);

        if (cdViatura != null && !"".equals(cdViatura)) {
            query.setParameter(parametros++, this.montarLike(cdViatura));
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            query.setParameter(parametros++, montarLike(dsUnidadePolicial));
        }

        if (codigoAgencia != null && !"".equals(codigoAgencia)) {
            query.setParameter(parametros++, codigoAgencia);
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_311: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<BopViatura> getListAllBopViatura(int indexPaginacao, int rows,
            String cdViatura, String dsUnidadePolicial)
            throws BusinessException {
        Query query = null;

        int parametros = 1;

        String str = "SELECT * FROM (SELECT V.*, ROWNUM RNUM FROM BOP_VIATURAS V JOIN BOP_UNIDADE_POLICIAL U ON ( V.CD_UNID_POLICIAL = U.CD_UNID_POLICIAL) WHERE ROWNUM <= ? ";

        if (cdViatura != null && !"".equals(cdViatura)) {
            str += " AND V.CD_VIATURA LIKE ? ";
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            str += " AND U.DS_UNID_POLICIAL LIKE ? ";
        }

        str += " )  WHERE RNUM  > ? ";

        query = em.createNativeQuery(str, BopViatura.class);

        query.setParameter(parametros++, indexPaginacao + rows);

        if (cdViatura != null && !"".equals(cdViatura)) {
            query.setParameter(parametros++, this.montarLike(cdViatura));
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            query.setParameter(parametros++, montarLike(dsUnidadePolicial));
        }

        query.setParameter(parametros--, indexPaginacao);

        List<BopViatura> listBopViatura;
        try {
            listBopViatura = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_312: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listBopViatura;
    }

    @Override
    public int getListAllBopViaturaCount(String cdViatura,
            String dsUnidadePolicial) throws BusinessException {
        Query query = null;

        int parametros = 1;

        String str = "SELECT COUNT(*) FROM BOP_VIATURAS V JOIN BOP_UNIDADE_POLICIAL U ON (V.CD_UNID_POLICIAL = U.CD_UNID_POLICIAL) WHERE 1=1 ";

        if (cdViatura != null && !"".equals(cdViatura)) {
            str += " AND V.CD_VIATURA LIKE ? ";
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            str += " AND U.DS_UNID_POLICIAL LIKE ? ";
        }

        query = em.createNativeQuery(str);

        if (cdViatura != null && !"".equals(cdViatura)) {
            query.setParameter(parametros++, this.montarLike(cdViatura));
        }

        if (dsUnidadePolicial != null && !"".equals(dsUnidadePolicial)) {
            query.setParameter(parametros++, montarLike(dsUnidadePolicial));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_313: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public Boolean usuarioAlocadoUnidadeSiplan(long usuario,
            String codigoUnidade) throws BusinessException {
        StringBuilder sb = new StringBuilder();
        Boolean hasPermissao = false;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " FROM BOP_USUARIO_UNIDADE_DEON BUUD ");
        sbAppend(sb,
                " WHERE BUUD.CD_USUARIO = ? AND BUUD.CD_UNID_POLICIAL = ? AND CD_AGENCIA = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopUsuarioUnidadeDeon.class);

        try {
            query.setParameter(1, usuario);

            query.setParameter(2, Long.parseLong(codigoUnidade));
            query.setParameter(3, 3);

            hasPermissao = (query.getSingleResult() != null);
        } catch (NoResultException e) {
            hasPermissao = false;
        } catch (NonUniqueResultException e) {
            hasPermissao = true;
        } catch (Exception e) {
            throw new BusinessException("012_314: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return hasPermissao;
    }

    @Override
    public Boolean usuarioAlocadoUnidadeDHPP(long usuario)
            throws BusinessException {
        StringBuilder sb = new StringBuilder();
        Boolean hasPermissao = false;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " FROM BOP_USUARIO_UNIDADE_DEON BUUD ");
        sbAppend(sb, " WHERE BUUD.CD_USUARIO = ? ");
        sbAppend(sb, " AND ( ");
        sbAppend(sb, "			   (BUUD.CD_UNID_POLICIAL = ? AND CD_AGENCIA = ? )");

        sbAppend(sb, "      ) ");

        Query query = em.createNativeQuery(sb.toString(),
                BopUsuarioUnidadeDeon.class);

        try {
            query.setParameter(1, usuario);
            query.setParameter(2, Long
                    .parseLong(UnidadeAcessoSigiloso.dhppPlantao.getCodigo()));
            query.setParameter(3, 3);

            hasPermissao = (query.getSingleResult() != null);
        } catch (NoResultException e) {
            hasPermissao = false;
        } catch (NonUniqueResultException e) {
            hasPermissao = true;
        } catch (Exception e) {
            throw new BusinessException("012_315: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return hasPermissao;
    }

    @Override
    public BopOcorrenciaAgencia getBopOcorrenciaAgenciaByOcorrencia(
            BopOcorrencia bopOcorrenciaTmp,
            BopUnidadePolicial unidadePolicialLogada) throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopOcorrenciaAgencia boa = null;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " FROM BOP_OCORRENCIA_AGENCIA BOA ");
        sbAppend(sb, " WHERE BOA.NR_BOP = ? AND BOA.TIPO_BOP = ? ");
        sbAppend(sb, " AND BOA.CD_AGENCIA = ? AND BOA.CD_UNID_POLICIAL = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgencia.class);

        try {
            query.setParameter(1, bopOcorrenciaTmp.getId().getNrBop());
            query.setParameter(2, bopOcorrenciaTmp.getId().getTipoBop());
            query.setParameter(3, unidadePolicialLogada.getId().getCdAgencia());
            query.setParameter(4, unidadePolicialLogada.getId()
                    .getCdUnidPolicial());
            boa = (BopOcorrenciaAgencia) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_316: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return boa;
    }

    public List<BopAvariaVeiculoFake> getVeiculosOcorreciaTransito(Long nrBop,
            String tpBop) throws BusinessException {

        try {
            Query query = em
                    .createNativeQuery(
                            "SELECT DISTINCT BOP_AVARIA_VEICULO.ID_AVARIA_VEICULO, BOP_AVARIA_VEICULO.ID_TIPO_VEICULO, BOP_AVARIA_VEICULO.ID_VEICULO, BOP_AVARIA_VEICULO.ID_OBJETO, "
                            + "BOP_AVARIA_VEICULO.NR_BOP, BOP_AVARIA_VEICULO.TIPO_BOP FROM BOP_AVARIA_VEICULO WHERE BOP_AVARIA_VEICULO.NR_BOP = ? AND BOP_AVARIA_VEICULO.TIPO_BOP = ? ",
                            BopAvariaVeiculoFake.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tpBop);

            List<BopAvariaVeiculoFake> veiculos = query.getResultList();

            return veiculos;
        } catch (Exception e) {
            throw new BusinessException("012_317: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public void atualizaMontaVeiculo(BopAvariaVeiculoFake bopAvariaVeiculoFake)
            throws BusinessException {

        try {
            this.atualizaDsMontaVeiculo(bopAvariaVeiculoFake);

            clearCache(BopAvariaVeiculo.class);
        } catch (Exception e) {
            throw new BusinessException("012_318: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    private void atualizaDsMontaVeiculo(BopAvariaVeiculoFake bopAvariaVeiculo)
            throws BusinessException {

        try {
            StringBuilder whereBuilder = new StringBuilder();

            whereBuilder
                    .append(" UPDATE BOP_OBJETO_OCORR_VEICULO SET DS_MONTA = PA_ENVOLVIDO_ACIDENTE.RETORNA_MONTA( ? , ? , ? , ? )");
            whereBuilder
                    .append(" WHERE NR_BOP = ? AND TIPO_BOP = ? AND ID_VEICULO = ? AND ID_OBJETO  = ? ");

            Query query = em.createNativeQuery(whereBuilder.toString());
            query.setParameter(1, bopAvariaVeiculo.getNrBop());
            query.setParameter(2, bopAvariaVeiculo.getTipoBop());
            query.setParameter(3, bopAvariaVeiculo.getIdEnvolvido());
            query.setParameter(4, bopAvariaVeiculo.getIdTipoVeiculo());

            query.setParameter(5, bopAvariaVeiculo.getNrBop());
            query.setParameter(6, bopAvariaVeiculo.getTipoBop());
            query.setParameter(7, bopAvariaVeiculo.getIdVeiculo());
            query.setParameter(8, bopAvariaVeiculo.getIdObjeto());

            query.executeUpdate();
        } catch (Exception e) {
            throw new BusinessException("012_319: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public Boolean unidadeLogadaPodeEditarOcorrencia(String nrBop,
            BopUnidadePolicial b) throws BusinessException {
        Boolean podeEditar = false;
        StringBuilder sb = new StringBuilder();
        List<BopOcorrenciaAgencia> boas = null;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb,
                " FROM BOP_OCORRENCIA_AGENCIA BOA, BOP_OCORRENCIA_AGENCIA_DEON BOAD ");
        sbAppend(
                sb,
                " WHERE BOA.NR_BOP = ? AND BOA.CD_UNID_POLICIAL = ? AND BOA.CD_AGENCIA = ? AND BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA AND BOAD.FL_SITUACAO_OCORRENCIA ="
                + StatusOcorrencia.ABERTO.getId());

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgencia.class);

        try {
            query.setParameter(1, nrBop);
            query.setParameter(2, b.getId().getCdUnidPolicial());
            query.setParameter(3, b.getId().getCdAgencia());
            boas = query.getResultList();
            return (boas != null && boas.size() > 0);
        } catch (Exception e) {
            throw new BusinessException("012_320: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public void definirDataInicioConfeccao(String nrChamado,
            BopUnidadePolicial bopUnidadePolicialUsuarioLogado)
            throws BusinessException {
        BopOcorrenciaAgenciaDeon bopOcorrenciaAgenciaDeon = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD ");
        sbAppend(sb, " 	JOIN BOP_OCORRENCIA_AGENCIA BOA ");
        sbAppend(sb,
                " 		ON BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA ");
        sbAppend(
                sb,
                " 	WHERE BOA.NR_CHAMADO = ?  AND BOA.CD_UNID_POLICIAL = ? AND BOA.CD_AGENCIA = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgenciaDeon.class);

        try {
            query.setParameter(1, nrChamado);
            query.setParameter(2, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdUnidPolicial());
            query.setParameter(3, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdAgencia());

            bopOcorrenciaAgenciaDeon = (BopOcorrenciaAgenciaDeon) query
                    .getSingleResult();
        } catch (Exception e) {
            throw new BusinessException("012_321: "
                    + "Ocorreu um erro inesperado.", e);

        }

        try {

            bopOcorrenciaAgenciaDeon.setDtInicioConfeccao(new Date());

            bopOcorrenciaAgenciaDeon.setDtFimConfeccao(null);

            mergeEntity(bopOcorrenciaAgenciaDeon);
        } catch (Exception e) {
            throw new BusinessException("012_322: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public Boolean existeOutraUnidadeConfeccionando(String nrChamado,
            BopUnidadePolicial bopUnidadePolicialUsuarioLogado)
            throws BusinessException {
        Boolean retorno = true;
        List<BopOcorrenciaAgenciaDeon> bopOcorrenciaAgenciaDeonList = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD ");
        sbAppend(sb, " 	JOIN BOP_OCORRENCIA_AGENCIA BOA ");
        sbAppend(sb,
                " 		ON BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA ");
        sbAppend(
                sb,
                " 	WHERE BOA.NR_CHAMADO = ?  AND ( BOA.CD_UNID_POLICIAL <> ? OR BOA.CD_AGENCIA <> ? ) ");
        sbAppend(
                sb,
                " 	AND BOAD.DT_INICIO_CONFECCAO IS NOT NULL AND  BOAD.DT_FIM_CONFECCAO IS NULL ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgenciaDeon.class);

        try {
            query.setParameter(1, nrChamado);
            query.setParameter(2, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdUnidPolicial());
            query.setParameter(3, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdAgencia());

            bopOcorrenciaAgenciaDeonList = (List<BopOcorrenciaAgenciaDeon>) query
                    .getResultList();

            retorno = bopOcorrenciaAgenciaDeonList != null
                    && bopOcorrenciaAgenciaDeonList.size() > 0;
        } catch (NoResultException e) {
        } catch (Exception e) {
            throw new BusinessException("012_323: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return retorno;
    }

    @SuppressWarnings("unused")
    private boolean tentativaAcessoMenorDezMinutos(Date primeiroAcesso) {
        Date agora = new Date();

        long DURACAO = MILLISECONDS.convert(10, MINUTES);

        long TEMPO_TRANSCORRIDO = agora.getTime() - primeiroAcesso.getTime();

        return TEMPO_TRANSCORRIDO <= DURACAO;
    }

    @Override
    public boolean isPrimeiraTentativaAcesso(String nrChamado,
            BopUnidadePolicial bopUnidadePolicialUsuarioLogado)
            throws BusinessException {
        boolean primeiraTentativaAcesso = false;
        BopOcorrenciaAgenciaDeon bopOcorrenciaAgenciaDeon = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD ");
        sbAppend(sb, " 	JOIN BOP_OCORRENCIA_AGENCIA BOA ");
        sbAppend(sb,
                " 		ON BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA ");
        sbAppend(
                sb,
                " 	WHERE BOA.NR_CHAMADO = ?  AND BOA.CD_UNID_POLICIAL = ? AND BOA.CD_AGENCIA = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgenciaDeon.class);

        try {
            query.setParameter(1, nrChamado);
            query.setParameter(2, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdUnidPolicial());
            query.setParameter(3, bopUnidadePolicialUsuarioLogado.getId()
                    .getCdAgencia());

            bopOcorrenciaAgenciaDeon = (BopOcorrenciaAgenciaDeon) query
                    .getSingleResult();

            try {
                if (isNotNullOrEmpty(bopOcorrenciaAgenciaDeon)
                        && isNullOrEmpty(bopOcorrenciaAgenciaDeon
                                .getDtPrimeiroConfeccao())) {

                    bopOcorrenciaAgenciaDeon.setDtPrimeiroConfeccao(new Date());

                    mergeEntity(bopOcorrenciaAgenciaDeon);

                    primeiraTentativaAcesso = true;

                }
            } catch (Exception e) {
                throw new BusinessException("012_324: "
                        + "Ocorreu um erro inesperado.", e);

            }
        } catch (NoResultException e) {
            return false;
        } catch (Exception e) {
            throw new BusinessException("012_325: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return primeiraTentativaAcesso;
    }

    @Override
    public List<String> carregarUnidadesConfeccionando(String nrChamado,
            BopUnidadePolicial unidadePolicialUsuarioLogado)
            throws BusinessException {
        List<String> unidades = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT BUP.DS_UNID_POLICIAL ");
        sbAppend(sb, " 	FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD ");

        sbAppend(sb, " 	JOIN BOP_OCORRENCIA_AGENCIA BOA ");
        sbAppend(sb,
                " 		ON BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA ");
        sbAppend(sb, " 	JOIN BOP_UNIDADE_POLICIAL BUP ");
        sbAppend(
                sb,
                " 		ON BOA.CD_AGENCIA = BUP.CD_AGENCIA AND BOA.CD_UNID_POLICIAL = BUP.CD_UNID_POLICIAL ");

        sbAppend(
                sb,
                " 	WHERE BOA.NR_CHAMADO = ?  AND ( BOA.CD_UNID_POLICIAL <> ? OR BOA.CD_AGENCIA <> ? ) ");
        sbAppend(
                sb,
                " 	AND BOAD.DT_INICIO_CONFECCAO IS NOT NULL AND  BOAD.DT_FIM_CONFECCAO IS NULL ");

        Query query = em.createNativeQuery(sb.toString());

        try {
            query.setParameter(1, nrChamado);
            query.setParameter(2, unidadePolicialUsuarioLogado.getId()
                    .getCdUnidPolicial());
            query.setParameter(3, unidadePolicialUsuarioLogado.getId()
                    .getCdAgencia());

            unidades = (List<String>) query.getResultList();

        } catch (NoResultException e) {
        } catch (Exception e) {
            throw new BusinessException("012_326: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return unidades;
    }

    public byte[] getImagemBUByOcorrenciaAgencia(Long cdOcorrenciaAgencia,
            Long cdAgencia, Long cdUnidadePolicial) throws BusinessException {

        try {
            StringBuilder sb = new StringBuilder();

            sb.append(" SELECT BOAD.IMG_BU ");
            sb.append(" FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD ");
            sb.append(" JOIN BOP_OCORRENCIA_AGENCIA BOA ");
            sb.append(" ON (BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA) ");
            sb.append(" WHERE BOA.CD_AGENCIA           = ? ");
            sb.append(" AND BOA.CD_UNID_POLICIAL       = ? ");
            sb.append(" AND BOA.CD_OCORRENCIA_AGENCIA  = ? ");

            Query query = em.createNativeQuery(sb.toString());
            query.setParameter(1, cdAgencia);
            query.setParameter(2, cdUnidadePolicial);
            query.setParameter(3, cdOcorrenciaAgencia);

            return (byte[]) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_327: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public BopOcorrenciaAgenciaFato getOcorrenciaAgenciaFatoByOcorrenciaAgencia(
            BopOcorrenciaAgencia bopOcorrenciaAgencia) throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopOcorrenciaAgenciaFato boaf = null;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " FROM BOP_OCORRENCIA_AGENCIA_FATO BOAF ");
        sbAppend(sb, " WHERE BOAF.CD_OCORRENCIA_AGENCIA = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgenciaFato.class);

        try {
            query.setParameter(1, bopOcorrenciaAgencia.getCdOcorrenciaAgencia());
            query.setMaxResults(1);
            boaf = (BopOcorrenciaAgenciaFato) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_328: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return boaf;
    }

    @Override
    public boolean isEnvolvidoEmOcorrencia(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {
        Query query = null;

        String str = "SELECT COUNT(*) FROM BOP_ENVOLVIDOS_OCORRENCIA EOCOR "
                + "JOIN BOP_OCORRENCIA OCOR ON (OCOR.NR_BOP = EOCOR.NR_BOP AND OCOR.TIPO_BOP = EOCOR.TIPO_BOP) "
                + "JOIN BOP_UNIDADE_POLICIAL UPOL ON (OCOR.CD_UNID_POLICIAL = UPOL.CD_UNID_POLICIAL AND OCOR.CD_AGENCIA = UPOL.CD_AGENCIA) "
                + "LEFT JOIN BOP_ENVOLVIDO_OCORRENCIA_DEON EOCORD ON (EOCORD.NR_BOP = EOCOR.NR_BOP AND EOCORD.TIPO_BOP = EOCOR.TIPO_BOP AND EOCORD.ID_ENVOLVIDO = EOCOR.ID_ENVOLVIDO) "
                + "WHERE EOCOR.NR_BOP = ? AND EOCOR.TIPO_BOP = ? AND EOCOR.ID_ENVOLVIDO = ?";

        query = em.createNativeQuery(str);

        query.setParameter(1, bopEnvolvidosOcorrencia.getId().getNrBop());
        query.setParameter(2, bopEnvolvidosOcorrencia.getId().getTipoBop());
        query.setParameter(3, bopEnvolvidosOcorrencia.getId().getIdEnvolvido());

        try {
            return Integer.parseInt(query.getSingleResult().toString()) > 0 ? true
                    : false;
        } catch (NoResultException e) {
            return false;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_329: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public void atualizarIncidenteBopOcorrencia(BopOcorrencia bopOcorrencia)
            throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopIncidente bi = null;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " FROM BOP_INCIDENTE BI ");
        sbAppend(sb, " WHERE BI.TP_INCIDENTE = ( ");
        sbAppend(sb, " 	SELECT TP_INCIDENTE FROM BOP_OCORRENCIA_AGENCIA  ");
        sbAppend(
                sb,
                " 	WHERE NR_BOP = ? AND TIPO_BOP = ? AND CD_AGENCIA = ? AND CD_UNID_POLICIAL = ?   ");
        sbAppend(sb, " 	)  ");

        Query query = em.createNativeQuery(sb.toString(), BopIncidente.class);

        query.setParameter(1, bopOcorrencia.getId().getNrBop());
        query.setParameter(2, bopOcorrencia.getId().getTipoBop());
        query.setParameter(3, bopOcorrencia.getBopUnidadePolicial().getId()
                .getCdAgencia());
        query.setParameter(4, bopOcorrencia.getBopUnidadePolicial().getId()
                .getCdUnidPolicial());

        try {

            bi = (BopIncidente) query.getSingleResult();

            if (isNotNullOrEmpty(bi)) {

                bopOcorrencia.setBopIncidente(bi);

                mergeOcorrencia(bopOcorrencia);

            }

        } catch (Exception e) {
            throw new BusinessException("012_330: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public BopObjetoOcorrEletro mergeBopObjetoOcorrEletro(
            BopObjetoOcorrEletro bopObjetoOcorrEletro) {
        BopObjetoOcorrEletro retorno = em.merge(bopObjetoOcorrEletro);
        em.flush();
        em.refresh(retorno);
        return retorno;
    }

    public <T> void remove(T object) throws BusinessException {
        try {

            object = em.merge(object);
            em.remove(object);

        } catch (Exception e) {
            throw new BusinessException("012_331: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    @Override
    public List<BopEnvolvidosOcorrencia> getEnvolvido(
            BopOcorrenciaObjeto bopOcorrencia) throws BusinessException {
        StringBuilder sb = new StringBuilder();
        List<BopEnvolvidosOcorrencia> envolvidos = null;

        sbAppend(sb, " SELECT DISTINCT * ");
        sbAppend(sb, " FROM BOP_ENVOLVIDOS_OCORRENCIA BE ");
        sbAppend(sb,
                " 	WHERE BE.NR_BOP = ? AND BE.TIPO_BOP = ? AND BE.NM_COMPL_ENVOL IS NOT NULL");

        Query query = em.createNativeQuery(sb.toString(),
                BopEnvolvidosOcorrencia.class);

        query.setParameter(1, bopOcorrencia.getId().getNrBop());
        query.setParameter(2, bopOcorrencia.getId().getTipoBop());

        try {

            envolvidos = (List<BopEnvolvidosOcorrencia>) query.getResultList();

        } catch (Exception e) {
            throw new BusinessException("012_332: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return envolvidos;
    }

    @Override
    public BopEnvolvidoOcorrenciaDeon findEnvolvidoOcorrenciaDeon(
            Long idEnvolvidoOcorrenciaDeon) throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopEnvolvidoOcorrenciaDeon envolvidoOcorrenciaDeon = null;

        sbAppend(sb, " SELECT DISTINCT * ");
        sbAppend(sb, " FROM BOP_ENVOLVIDO_OCORRENCIA_DEON BEON ");
        sbAppend(sb, " 	WHERE BEON.ID_ENVOLVIDO_DEON = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopEnvolvidoOcorrenciaDeon.class);

        query.setParameter(1, idEnvolvidoOcorrenciaDeon);

        try {

            envolvidoOcorrenciaDeon = (BopEnvolvidoOcorrenciaDeon) query
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_333: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return envolvidoOcorrenciaDeon;
    }

    @Override
    public BopOcorrencia getBopOcorrenciaByNrChamado(String nrChamadoPesquisa)
            throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopOcorrencia bopOcorrencia = null;

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " FROM BOP_OCORRENCIA BO ");
        sbAppend(sb, " 	WHERE BO.NR_BOP IN (  ");
        sbAppend(
                sb,
                " 	SELECT BCO.NR_BOP FROM BOP_CHAMADO_OCORRENCIA BCO WHERE BCO.NR_CHAMADO = ? )  ");

        Query query = em.createNativeQuery(sb.toString(), BopOcorrencia.class);

        query.setParameter(1, Long.valueOf(nrChamadoPesquisa));

        try {

            bopOcorrencia = (BopOcorrencia) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_334: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopOcorrencia;
    }

    @Override
    public BopOcorrenciaAgencia getBopOcorrenciaAgenciaByNrChamado(
            String nrChamadoPesquisa) throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopOcorrenciaAgencia bopOcorrenciaAgencia = null;

        sbAppend(sb, " SELECT *FROM BOP_OCORRENCIA_AGENCIA ");
        sbAppend(
                sb,
                "  JOIN BOP_OCORRENCIA_AGENCIA_DEON ON(BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA ) ");
        sbAppend(
                sb,
                " 	 WHERE  BOP_OCORRENCIA_AGENCIA_DEON.FL_TRANSITO = 'S' AND BOP_OCORRENCIA_AGENCIA.NR_CHAMADO = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgencia.class);

        query.setParameter(1, Long.valueOf(nrChamadoPesquisa));

        try {

            bopOcorrenciaAgencia = (BopOcorrenciaAgencia) query
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_335: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopOcorrenciaAgencia;
    }

    public List<BopOcorrenciaAgencia> findOcorrenciaAgenciaStatus(int nrBop,
            String tipoBop, Long cdAgencia, int status)
            throws BusinessException {

        try {
            List<BopOcorrenciaAgencia> lista = em
                    .createNativeQuery(
                            "SELECT * FROM BOP_OCORRENCIA_AGENCIA a, BOP_OCORRENCIA_AGENCIA_DEON b "
                            + " WHERE NR_BOP = "
                            + nrBop
                            + " AND a.tipo_bop = '"
                            + tipoBop
                            + "' "
                            + " AND a.CD_AGENCIA =  "
                            + cdAgencia
                            + " AND a.CD_OCORRENCIA_AGENCIA = b.CD_OCORRENCIA_AGENCIA "
                            + " AND b.FL_SITUACAO_OCORRENCIA = "
                            + status, BopOcorrenciaAgencia.class)
                    .getResultList();

            return lista;
        } catch (Exception e) {
            throw new BusinessException("012_336: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public List<BopOcorrenciaAgencia> findOcorrenciaAgenciaStatusDiferente(
            long nrChamado, long unidadePol, long agencia, int status)
            throws BusinessException {

        try {
            List<BopOcorrenciaAgencia> lista = em
                    .createNativeQuery(
                            "SELECT * FROM BOP_OCORRENCIA_AGENCIA a, BOP_OCORRENCIA_AGENCIA_DEON b "
                            + " WHERE NR_CHAMADO = "
                            + nrChamado
                            + " AND a.CD_OCORRENCIA_AGENCIA = b.CD_OCORRENCIA_AGENCIA "
                            + " AND (a.CD_UNID_POLICIAL <> "
                            + unidadePol + " OR a.CD_AGENCIA <> "
                            + agencia + ")"
                            + " AND b.FL_SITUACAO_OCORRENCIA <> "
                            + status, BopOcorrenciaAgencia.class)
                    .getResultList();

            return lista;
        } catch (Exception e) {
            throw new BusinessException("012_337: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    public int findResponsavelOcorrenciaByOcorrencia(
            BopOcorrencia bopOcorrencia, BopUsuarios objetoSessao)
            throws BusinessException {
        StringBuilder sb = new StringBuilder();
        int i = 0;

        sbAppend(sb, "	SELECT ");
        sbAppend(sb, "		COUNT(1)");
        sbAppend(sb, "	FROM BOP_RESPONSAVEL_OCORRENCIA BRO");
        sbAppend(sb, "	WHERE ");
        sbAppend(sb,
                "		BRO.NR_BOP = ? AND BRO.TIPO_BOP = ? AND BRO.CD_USUARIO = ? ");

        try {
            Query query = em.createNativeQuery(sb.toString());

            query.setParameter(++i, bopOcorrencia.getId().getNrBop());
            query.setParameter(++i, bopOcorrencia.getId().getTipoBop());
            query.setParameter(++i, objetoSessao.getCdUsuario());

            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_338: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public void removerBopOcorrenciaSubTipoLocal(int nrBop, String tipoBop)
            throws BusinessException {

        try {

            String sql = " DELETE FROM BOP_OCORRENCIA_SUB_TIPO_LOCAL WHERE NR_BOP = ? AND TIPO_BOP = ?";

            Query q = em.createNativeQuery(sql).setParameter(1, nrBop)
                    .setParameter(2, tipoBop);

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_339: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public BopOcorrenciaSubTipoLocal getBopOcorrenciaSubTipoLocal(int nrBop,
            String tipoBop) throws BusinessException {
        BopOcorrenciaSubTipoLocal bopOcorrenciaSubTipoLocal = null;
        try {

            String sql = "SELECT *FROM BOP_OCORRENCIA_SUB_TIPO_LOCAL WHERE NR_BOP = ? AND TIPO_BOP = ?";

            Query query = em.createNativeQuery(sql,
                    BopOcorrenciaSubTipoLocal.class);
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            bopOcorrenciaSubTipoLocal = (BopOcorrenciaSubTipoLocal) query
                    .getSingleResult();

            return bopOcorrenciaSubTipoLocal;
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {

            throw new BusinessException("012_340: "
                    + "Ocorreu um erro inesperado.", e);
        }
    }

    public void fimLavraturaMergeOcorrenciaDeon(BopOcorrenciaDeon ocorrenciaDeon)
            throws BusinessException {
        try {
            ocorrenciaDeon.setDtFimLavratura(this.getSysDate());
            ocorrenciaDeon.setDsFimLavraturaIp(this.getIp());
        } catch (Exception e) {
            throw new BusinessException("012_341: "
                    + "Ocorreu um erro inesperado.", e);
        }
        try {

            String sql = " UPDATE BOP_OCORRENCIA_DEON SET DS_FIM_LAVRATURA_IP = ?, DT_FIM_LAVRATURA= ? WHERE ID_OCORRENCIA_DEON = ? ";

            Query q = em.createNativeQuery(sql);
            q.setParameter(1, ocorrenciaDeon.getDsFimLavraturaIp());
            q.setParameter(2, ocorrenciaDeon.getDtFimLavratura());
            q.setParameter(3, ocorrenciaDeon.getIdOcorrenciaDeon());

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_342: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public String getIp() throws BusinessException {

        InetAddress thisIp;

        try {
            thisIp = InetAddress.getLocalHost();
            return thisIp.getHostAddress();
        } catch (UnknownHostException e) {
            throw new BusinessException("012_343: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    @Override
    public BopDDDConfig getBopDDDConfig(String nrDDD) throws BusinessException {
        try {

            String sql = "SELECT *FROM BOP_DDD_CONFIG WHERE NR_DDD = ?";

            Query query = em.createNativeQuery(sql, BopDDDConfig.class);
            query.setParameter(1, Long.valueOf(nrDDD));

            return (BopDDDConfig) query.getSingleResult();

        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {

            throw new BusinessException("012_344: "
                    + "Ocorreu um erro inesperado.", e);
        }
    }

    public List<BopEnvolvidoSimples> getListaBopEnvolvidoSimplesFonemaEdicao(
            BopOcorrencia bopOcorrencia, String dsNome)
            throws BusinessException {

        StringBuilder queryString = new StringBuilder();
        Map<Integer, Object> parameters = new HashMap<Integer, Object>();
        int paramIndex = 0;

        queryString
                .append("SELECT ROWNUM, ID_ENVOLVIDO, NR_BOP, TIPO_BOP, NM_COMPL_ENVOL, DS_APELIDO, DS_TIPO_ENVOL");
        queryString.append(" 	FROM (");
        queryString
                .append("			SELECT ID_ENVOLVIDO, NR_BOP, TIPO_BOP, NM_COMPL_ENVOL, DS_APELIDO, DS_TIPO_ENVOL, ROWNUM RNUM");
        queryString.append("              FROM (");
        queryString
                .append("						SELECT BEO.ID_ENVOLVIDO, BEO.NR_BOP, BEO.TIPO_BOP, BEO.NM_COMPL_ENVOL, BEO.DS_APELIDO, BTE.DS_TIPO_ENVOL");
        queryString.append("							FROM BOP_ENVOLVIDOS_OCORRENCIA BEO");
        queryString
                .append("								LEFT JOIN BOP_TIPO_ENVOLVIMENTO BTE ON (BEO.CD_TIPO_ENV = BTE.CD_TIPO_ENV)");
        queryString.append("								WHERE BEO.NR_BOP = ? ");
        parameters.put(++paramIndex, bopOcorrencia.getId().getNrBop());

        queryString.append("									AND BEO.TIPO_BOP = ? ");
        parameters.put(++paramIndex, bopOcorrencia.getId().getTipoBop());

        if (dsNome != null && !dsNome.isEmpty()) {

            char cTam, cPosi, cPriNome;

            cTam = 'N'; // [N] Retorna os nomes com a mesma quantidade ou
            // mais de partes do nome informado
            cPosi = 'R'; // [R]elativo -> As partes do nome devem estar na
            // mesma ordem das partes do nome informado
            cPriNome = 'N'; // [N]ão -> Não importa a posição da primeira
            // parte do nome

            queryString.append(" 								AND ID_ENVOLVIDO IN (");
            queryString.append("														SELECT COLUMN_VALUE ");
            queryString
                    .append("															FROM TABLE (PA_FONETIZACAO_ENVOLVIDOS.BUSCAR_PESSOAS_FONETIZADAS ( ? , ? , ? , ? , 'O' )");

            parameters.put(++paramIndex, dsNome);
            parameters.put(++paramIndex, cTam);
            parameters.put(++paramIndex, cPosi);
            parameters.put(++paramIndex, cPriNome);

            queryString.append("																	   )");
            queryString.append("													)");
        }

        queryString.append(" 						ORDER BY BEO.NM_COMPL_ENVOL");
        queryString.append("                    )");
        queryString.append("	ORDER BY NM_COMPL_ENVOL )");

        Query query = em.createNativeQuery(queryString.toString(),
                BopEnvolvidoSimples.class);

        for (Entry<Integer, Object> entry : parameters.entrySet()) {
            query.setParameter(entry.getKey(), entry.getValue());
        }

        List<BopEnvolvidoSimples> resultList;
        try {
            resultList = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_345: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return resultList;

    }

    @Override
    public List<BopEnvolvidosOcorrencia> getEnvolvidosOcorrencias(
            BopOcorrencia bopOcorrencia) throws BusinessException {

        try {
            String sql = "SELECT * FROM BOP_ENVOLVIDOS_OCORRENCIA WHERE NR_BOP = ? AND TIPO_BOP = ?";
            Query query = em.createNativeQuery(sql,
                    BopEnvolvidosOcorrencia.class);
            query.setParameter(1, bopOcorrencia.getId().getNrBop());
            query.setParameter(2, bopOcorrencia.getId().getTipoBop());
            return query.getResultList();

        } catch (Exception e) {
            throw new BusinessException("012_346: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    @Override
    public BopEnvolvidoTipoEnvolvido getBopEnvolvidoTipoEnvolvido(
            BopEnvolvidoOcorrenciaDeon bopEnvolvidoOcorrenciaDeon)
            throws BusinessException {

        try {
            String sql = "SELECT * FROM BOP_ENVOLVIDO_TIPO_ENVOL WHERE ID_ENVOLVIDO_DEON = ? ";
            Query query = em.createNativeQuery(sql,
                    BopEnvolvidoTipoEnvolvido.class);
            query.setParameter(1,
                    bopEnvolvidoOcorrenciaDeon.getIdEnvolvidoDeon());
            return (BopEnvolvidoTipoEnvolvido) query.getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_347: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    public BopOcorrenciaAgencia getOcorrenciaAgenciaByOcorrenciaEUnidadePolicial(
            BopOcorrencia ocorrencia, BopUnidadePolicial unidadePolicial)
            throws BusinessException {

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, "	SELECT *");
        sbAppend(sb, "		 FROM BOP_OCORRENCIA_AGENCIA ");
        sbAppend(sb, "		WHERE BOP_OCORRENCIA_AGENCIA.NR_BOP = ? ");
        sbAppend(sb, " 		 AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = ?  ");
        sbAppend(sb, "			 AND BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ?");
        sbAppend(sb, "			 AND BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ?");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgencia.class);

        query.setParameter(1, ocorrencia.getId().getNrBop());
        query.setParameter(2, ocorrencia.getId().getTipoBop());
        query.setParameter(3, unidadePolicial.getId().getCdUnidPolicial());
        query.setParameter(4, unidadePolicial.getId().getCdAgencia());

        try {
            return (BopOcorrenciaAgencia) query.getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_348: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public BopObjetoOcorrVeiculo getVeiculoByCondutor(
            BopEnvolvidosOcorrencia bopEnvolvidosOcorrencia)
            throws BusinessException {

        BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo = null;

        try {
            Query query = em.createNamedQuery(
                    BopObjetoOcorrVeiculo.FIND_VEICULO_BY_CONDUTOR,
                    BopObjetoOcorrVeiculo.class);

            if (bopEnvolvidosOcorrencia != null) {
                query.setParameter("pIdEnvolvidoDeon", bopEnvolvidosOcorrencia
                        .getBopEnvolvidoOcorrenciaDeon().getIdEnvolvidoDeon());
            } else {
                query.setParameter("pIdEnvolvidoDeon", null);
            }
            bopObjetoOcorrVeiculo = (BopObjetoOcorrVeiculo) query
                    .getSingleResult();

        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {

            throw new BusinessException("012_349: "
                    + "Ocorreu um erro inesperado.", e);

        }
        return bopObjetoOcorrVeiculo;

    }

    public Long getUltimoSequencialVeiculo(long nrBop, String tipoBop)
            throws BusinessException {
        Long resultado = null;
        try {

            Query query = em
                    .createNativeQuery("SELECT MAX(NR_SEQUENCIAL_VEICULO_OCOR) FROM BOP_OBJETO_OCORR_VEICULO_DEON WHERE NR_BOP = ? AND TIPO_BOP = ?");
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            BigDecimal captura = new BigDecimal(query.getSingleResult()
                    .toString());

            resultado = (captura != null) ? captura.longValue() : Long
                    .valueOf(0L);
        } catch (NullPointerException e) {
            return Long.valueOf(0L);
        } catch (Exception e) {

            throw new BusinessException("012_350: "
                    + "Ocorreu um erro inesperado.", e);

        }
        return resultado;

    }

    @Override
    public void atualizarBopOcorrenciaAgencia(BopUsuarios usuario,
            BopUnidadePolicial unidade, BopOcorrencia ocorrencia)
            throws BusinessException {
        try {
            String sql = "UPDATE BOP_OCORRENCIA_AGENCIA SET ID_REGISTRO_RESPONSAVEL = ? WHERE NR_BOP = ? AND TIPO_BOP = ? AND CD_AGENCIA = ? AND CD_UNID_POLICIAL = ? AND ID_REGISTRO_RESPONSAVEL IS NULL ";

            Query q = em
                    .createNativeQuery(sql)
                    .setParameter(1,
                            usuario.getBopFuncionario().getIdRegistro())
                    .setParameter(2, ocorrencia.getId().getNrBop())
                    .setParameter(3, ocorrencia.getId().getTipoBop())
                    .setParameter(4, unidade.getId().getCdAgencia())
                    .setParameter(5, unidade.getId().getCdUnidPolicial());

            q.executeUpdate();

        } catch (Exception e) {
            throw new BusinessException("012_351: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public BopPais getPais(String cdNacio) throws BusinessException {
        BopPais bopPais;

        try {
            bopPais = (BopPais) em.createNamedQuery("BopPais.findPaisById")
                    .setParameter("cdPais", cdNacio).getSingleResult();
        } catch (NoResultException e) {
            bopPais = null;

        } catch (Exception e) {
            throw new BusinessException("012_352: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopPais;

    }

    @Override
    public BopEnvolvidoOcorrenciaDeon findEnvolvidoOcorrenciaDeonByNrTipoIdEnvolvido(
            long nrBop, String tipoBop, long idEnvolvido)
            throws BusinessException {
        StringBuilder sb = new StringBuilder();
        BopEnvolvidoOcorrenciaDeon envolvidoOcorrenciaDeon = null;

        sbAppend(sb, " SELECT DISTINCT * ");
        sbAppend(sb, " FROM BOP_ENVOLVIDO_OCORRENCIA_DEON BEOD ");
        sbAppend(sb,
                " 	WHERE BEOD.NR_BOP = ? AND TIPO_BOP = ? AND ID_ENVOLVIDO = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopEnvolvidoOcorrenciaDeon.class);

        query.setParameter(1, nrBop);
        query.setParameter(2, tipoBop);
        query.setParameter(3, idEnvolvido);

        try {

            envolvidoOcorrenciaDeon = (BopEnvolvidoOcorrenciaDeon) query
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_353: "
                    + "Ocorreu um erro inesperado.", e);

        }
        if (envolvidoOcorrenciaDeon != null
                && envolvidoOcorrenciaDeon.getIdEnvolvidoDeon() != null) {
            return envolvidoOcorrenciaDeon;
        }

        return null;
    }

    @Override
    public BopOcorrenciaAgenciaDeon getBopOcorrenciaAgenciaDeon(
            ConsultaOcorrenciaTransient consultarOcorrenciaTransient)
            throws BusinessException {
        Query query = null;
        BopOcorrenciaAgenciaDeon bopOcorrenciaAgenciaDeon = null;

        String str = "SELECT BOAD.ID_OCORRENCIA_AGENCIA_DEON, BOAD.CD_OCORRENCIA_AGENCIA, BOAD.FL_SITUACAO_OCORRENCIA, BOAD.FL_TRANSITO from BOP_OCORRENCIA_AGENCIA_DEON BOAD LEFT JOIN  BOP_OCORRENCIA_AGENCIA ON ( BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOAD.CD_OCORRENCIA_AGENCIA) "
                + " WHERE BOP_OCORRENCIA_AGENCIA.NR_BOP = ? AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = ? AND BOAD.FL_TRANSITO = 'S' ";

        query = em.createNativeQuery(str.toString(),
                BopOcorrenciaAgenciaDeon.class);

        query.setParameter(1, consultarOcorrenciaTransient.getNumeroBop());
        query.setParameter(2, consultarOcorrenciaTransient.getTipoBop());

        try {

            bopOcorrenciaAgenciaDeon = (BopOcorrenciaAgenciaDeon) query
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_354: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopOcorrenciaAgenciaDeon;

    }

    public BopVeiculoPassageiroDeon getBopVeiculoPassageiroDeonByIdEnvolvido(
            Long idEnvolvido) throws BusinessException {

        BopVeiculoPassageiroDeon bopVeiculoPassageiroDeon = null;

        Query query = em
                .createNativeQuery(
                        "SELECT * FROM BOP_VEICULO_PASSAGEIRO_DEON WHERE ID_ENVOLVIDO = ? ",
                        BopVeiculoPassageiroDeon.class);

        query.setParameter(1, idEnvolvido);

        try {

            bopVeiculoPassageiroDeon = (BopVeiculoPassageiroDeon) query
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_355: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopVeiculoPassageiroDeon;

    }

    @Override
    public OcorrenciaTransito buscaOcorrenciaTransito(
            BopOcorrenciaDeon ocorrencia) throws BusinessException {
        OcorrenciaTransito ocorrenciaTransito = null;

        try {
            ocorrenciaTransito = (OcorrenciaTransito) em
                    .createNamedQuery(OcorrenciaTransito.FIND_BY_OCORRENCIA)
                    .setParameter("ocorrencia", ocorrencia).getSingleResult();
        } catch (NoResultException e) {

            return null;

        } catch (Exception e) {
            throw new BusinessException("012_356: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return ocorrenciaTransito;
    }

    @Override
    public OcorrenciaTransito buscaOcorrenciaTransitoByBopOcorrencia(
            BopOcorrencia bopOcorrencia) throws BusinessException {
        OcorrenciaTransito ocorrenciaTransito = null;

        try {
            ocorrenciaTransito = (OcorrenciaTransito) em
                    .createNamedQuery(OcorrenciaTransito.FIND_BY_BOP_OCORRENCIA)
                    .setParameter("nrBop", bopOcorrencia.getId().getNrBop())
                    .setParameter("tipoBop", bopOcorrencia.getId().getTipoBop())
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_357: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return ocorrenciaTransito;
    }

    public BopEnvolvidosOcorrencia getEnvolvidoOcorrenciaByNrTipoNome(
            long nrBop, String tipoBop, String nmComplEnvol)
            throws BusinessException {

        Query query = em
                .createNamedQuery("BopEnvolvidosOcorrencia.findEnvolvidoByNrTipoNome");

        query.setParameter("nrBop", nrBop);
        query.setParameter("tipoBop", tipoBop);
        query.setParameter("nmComplEnvol", nmComplEnvol);

        List<BopEnvolvidosOcorrencia> bopEnvolvidosOcorrencia = null;
        try {
            bopEnvolvidosOcorrencia = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_358: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return bopEnvolvidosOcorrencia.isEmpty() ? null
                : bopEnvolvidosOcorrencia.get(0);

    }

    @Override
    public boolean existeEnvolvidosOcorrencia(BopOcorrencia bopOcorrencia)
            throws BusinessException {
        List<BopEnvolvidosOcorrencia> bopEnvolvidosOcorrencias = null;

        try {
            StringBuilder sql = new StringBuilder();

            sql.append("  SELECT * ");
            sql.append("   FROM BOP_ENVOLVIDOS_OCORRENCIA BEO ");
            sql.append("                   WHERE BEO.NR_BOP = ?");
            sql.append("                    AND BEO.TIPO_BOP = ? ");

            Query query = em.createNativeQuery(sql.toString(),
                    BopEnvolvidosOcorrencia.class);

            query.setParameter(1, bopOcorrencia.getId().getNrBop());
            query.setParameter(2, bopOcorrencia.getId().getTipoBop());

            bopEnvolvidosOcorrencias = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_359: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopEnvolvidosOcorrencias != null
                && bopEnvolvidosOcorrencias.size() > 0;
    }

    @Override
    public boolean existeAgenciaConfeccionando(
            ConsultaOcorrenciaTransient ocorrenciaTransient)
            throws BusinessException {
        Boolean retorno = false;
        List<BopOcorrenciaAgenciaDeon> bopOcorrenciaAgenciaDeonList = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_OCORRENCIA_AGENCIA_DEON BOAD ");
        sbAppend(sb, " 	JOIN BOP_OCORRENCIA_AGENCIA BOA ");
        sbAppend(sb,
                " 		ON BOAD.CD_OCORRENCIA_AGENCIA = BOA.CD_OCORRENCIA_AGENCIA ");
        sbAppend(
                sb,
                " 	WHERE BOA.NR_BOP = ? AND BOA.TIPO_BOP = ? AND BOAD.FL_SITUACAO_OCORRENCIA <> 4 ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaAgenciaDeon.class);

        try {
            query.setParameter(1, ocorrenciaTransient.getNumeroBop());
            query.setParameter(2, ocorrenciaTransient.getTipoBop());

            bopOcorrenciaAgenciaDeonList = (List<BopOcorrenciaAgenciaDeon>) query
                    .getResultList();

            retorno = bopOcorrenciaAgenciaDeonList != null
                    && bopOcorrenciaAgenciaDeonList.size() > 0;
        } catch (Exception e) {
            throw new BusinessException("012_360: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return retorno;

    }

    @Override
    public Long getTipoVeiculoOcorrencia(
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo)
            throws BusinessException {

        Long retorno = 0L;
        String tipoVeiculo = null;
        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT ID_TIPO_VEICULO ");
        sbAppend(sb, " 	 FROM BOP_OBJETO_OCORR_VEICULO ");
        sbAppend(sb, " 	WHERE NR_BOP = ? AND TIPO_BOP = ? AND ID_VEICULO = ? ");

        Query query = em.createNativeQuery(sb.toString());

        try {
            query.setParameter(1, bopObjetoOcorrVeiculo.getId().getNrBop());
            query.setParameter(2, bopObjetoOcorrVeiculo.getId().getTipoBop());
            query.setParameter(3, bopObjetoOcorrVeiculo.getId().getIdVeiculo());
            tipoVeiculo = (String) query.getSingleResult();
            if (tipoVeiculo != null) {
                retorno = Long.parseLong(tipoVeiculo);
            }
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_361: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return retorno;
    }

    @Override
    public BopObjetoEnvolvidoDeon getBopObjetoEnvolvidoDeon(long nrBop,
            String tipoBop, long idObjeto) throws BusinessException {
        List<BopObjetoEnvolvidoDeon> bopObjetoEnvolvidoDeonList = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_OBJETO_ENVOLVIDO_DEON BOED ");
        sbAppend(
                sb,
                " 	WHERE BOED.NR_BOP = ? AND BOED.TIPO_BOP = ? AND BOED.ID_OBJETO = ? AND BOED.ID_OBJETO_FILHO = 0 ");
        sbAppend(sb, " ORDER BY BOED.ID_OBJETO_ENVOLVIDO DESC ");

        Query query = em.createNativeQuery(sb.toString(),
                BopObjetoEnvolvidoDeon.class);

        try {
            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);
            query.setParameter(3, idObjeto);

            bopObjetoEnvolvidoDeonList = (List<BopObjetoEnvolvidoDeon>) query
                    .getResultList();

            return (!bopObjetoEnvolvidoDeonList.isEmpty()
                    && bopObjetoEnvolvidoDeonList != null && bopObjetoEnvolvidoDeonList
                            .size() > 1) ? bopObjetoEnvolvidoDeonList.get(0) : null;

        } catch (Exception e) {
            throw new BusinessException("012_362: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public boolean unidadeLatLong(
            BopUnidadePolicial bopUnidadePolicialUsuarioLogado)
            throws BusinessException {
        Boolean retorno = false;

        BopUnidadePolicial bopUnidadePolicial = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_UNIDADE_POLICIAL BUP ");
        sbAppend(sb, " 	WHERE BUP.CD_UNID_POLICIAL = ? AND BUP.CD_AGENCIA = ? AND BUP.ID_LAT_LONG = 'S' ");

        Query query = em.createNativeQuery(sb.toString(), BopUnidadePolicial.class);

        try {
            query.setParameter(1, bopUnidadePolicialUsuarioLogado.getId().getCdUnidPolicial());
            query.setParameter(2, bopUnidadePolicialUsuarioLogado.getId().getCdAgencia());

            bopUnidadePolicial = (BopUnidadePolicial) query.getSingleResult();

            retorno = bopUnidadePolicial != null
                    && bopUnidadePolicial.getId() != null
                    && bopUnidadePolicial.getId().getCdUnidPolicial() > 0;
        } catch (NoResultException e) { // query vazia, retorna false pra
            // continuar o fluxo.
            return false;
        } catch (Exception e) {
            throw new BusinessException("012_363: "
                    + "Ocorreu um erro inesperado.", e); // nossa exceção
        }

        return retorno;
    }

    @Override
    public void atualizaUnidadePolicial(
            BopUnidadePolicial unidadePolicialSelecionada,
            String exibeLatitudeLongitude) throws BusinessException {
        try {

            String sql = " UPDATE BOP_UNIDADE_POLICIAL SET ID_LAT_LONG = ? WHERE CD_AGENCIA = ? AND CD_UNID_POLICIAL = ? ";

            Query q = em
                    .createNativeQuery(sql)
                    .setParameter(1, exibeLatitudeLongitude)
                    .setParameter(2,
                            unidadePolicialSelecionada.getId().getCdAgencia())
                    .setParameter(
                            3,
                            unidadePolicialSelecionada.getId()
                                    .getCdUnidPolicial());

            q.executeUpdate();

        } catch (Exception e) {
            throw new BusinessException("012_364: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public List<BopUnidadePolicial> carregarUnidadesLatitudeLongitude()
            throws BusinessException {
        List<BopUnidadePolicial> unidades = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	FROM BOP_UNIDADE_POLICIAL BUP ");
        sbAppend(sb, " 	WHERE BUP.ID_LAT_LONG = 'S' ");
        sbAppend(sb, " 	ORDER BY BUP.DS_UNID_POLICIAL ASC ");

        Query query = em.createNativeQuery(sb.toString(),
                BopUnidadePolicial.class);

        try {
            unidades = (List<BopUnidadePolicial>) query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_365: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return unidades;
    }

    @Override
    public List<BopObjetoOcorrVeiculo> getVeiculoOcorrencia(
            BopOcorrencia bopOcorrencia) throws BusinessException {

        List<BopObjetoOcorrVeiculo> list = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	 FROM BOP_OBJETO_OCORR_VEICULO ");
        sbAppend(sb, " 	WHERE NR_BOP = ? AND TIPO_BOP = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopObjetoOcorrVeiculo.class);

        try {
            query.setParameter(1, bopOcorrencia.getId().getNrBop());
            query.setParameter(2, bopOcorrencia.getId().getTipoBop());
            list = (List<BopObjetoOcorrVeiculo>) query.getResultList();
            return list;

        } catch (Exception e) {
            throw new BusinessException("012_366: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public void insertBopObjetoUnidadePolicialDeon(
            BopUnidadePolicial unidadePolicial,
            BopObjetoOcorrVeiculo objetoOcorrVeiculo) throws BusinessException {
        try {
            String tipoBop = objetoOcorrVeiculo.getId().getTipoBop();

            Query query = em
                    .createNativeQuery("INSERT INTO BOP_OBJETO_UNID_POLICIAL_DEON (ID_OBJETO_UNID_POLICIAL, CD_AGENCIA, CD_UNID_POLICIAL, NR_BOP, TIPO_BOP, ID_OBJETO, ID_OBJETO_FILHO, FL_ATIVO, FL_TRANSITO ) VALUES (SEQ_OBJETO_UNID_POLICIAL_DEON.nextval, ?, ?, ?, ?, ?, ?, ?, ? )");
            query.setParameter(1, unidadePolicial.getId().getCdAgencia());
            query.setParameter(2, unidadePolicial.getId().getCdUnidPolicial());
            query.setParameter(3, objetoOcorrVeiculo.getId().getNrBop());
            query.setParameter(4, objetoOcorrVeiculo.getId().getTipoBop());
            query.setParameter(5, objetoOcorrVeiculo.getId().getIdObjeto());
            query.setParameter(6, objetoOcorrVeiculo.getId().getIdVeiculo());
            query.setParameter(7, "S");
            query.setParameter(8, "T".equals(tipoBop) ? "S" : "N");

            query.executeUpdate();
        } catch (Exception e) {
            throw new BusinessException("012_367: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public BopObjetoUnidadePolicialDeon getVeiculoDaOcorrenciaPorUnidadePolicial(
            BopOcorrencia bopOcorrencia, BopUnidadePolicial unidadePolicial,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo)
            throws BusinessException {

        List<BopObjetoUnidadePolicialDeon> bopObjetosUnidadePolicialDeon = null;

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT  * ");
        sql.append("   		  FROM BOP_OBJETO_UNID_POLICIAL_DEON  ");
        sql.append(" WHERE BOP_OBJETO_UNID_POLICIAL_DEON.NR_BOP = ? ");
        sql.append("            AND BOP_OBJETO_UNID_POLICIAL_DEON.TIPO_BOP = ? ");
        sql.append("            AND BOP_OBJETO_UNID_POLICIAL_DEON.CD_UNID_POLICIAL = ? ");
        sql.append("            AND BOP_OBJETO_UNID_POLICIAL_DEON.CD_AGENCIA = ? ");
        sql.append("            AND BOP_OBJETO_UNID_POLICIAL_DEON.ID_OBJETO_FILHO = ? ");
        sql.append("            AND BOP_OBJETO_UNID_POLICIAL_DEON.ID_OBJETO = ? ");

        Query query = em.createNativeQuery(sql.toString(),
                BopObjetoUnidadePolicialDeon.class);

        query.setParameter(1, bopOcorrencia.getId().getNrBop());
        query.setParameter(2, bopOcorrencia.getId().getTipoBop());
        query.setParameter(3, unidadePolicial.getId().getCdUnidPolicial());
        query.setParameter(4, unidadePolicial.getId().getCdAgencia());
        query.setParameter(5, bopObjetoOcorrVeiculo.getId().getIdVeiculo());
        query.setParameter(6, bopObjetoOcorrVeiculo.getId().getIdObjeto());

        try {
            bopObjetosUnidadePolicialDeon = query.getResultList();
            return (bopObjetosUnidadePolicialDeon != null && bopObjetosUnidadePolicialDeon
                    .size() > 0) ? bopObjetosUnidadePolicialDeon.get(0) : null;
        } catch (Exception e) {
            bopObjetosUnidadePolicialDeon = null;
            throw new BusinessException("012_368: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public List<BopOcorrenciaSubTipoLocal> getListaBopOcorrenciaSubTipoLocal(
            Long cdTipoLocal) throws BusinessException {
        List<BopOcorrenciaSubTipoLocal> list = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	 FROM BOP_OCORRENCIA_SUB_TIPO_LOCAL ");
        sbAppend(sb, " 	WHERE CD_SUBTIPO_LOCAL = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopOcorrenciaSubTipoLocal.class);

        try {
            query.setParameter(1, cdTipoLocal);
            list = (List<BopOcorrenciaSubTipoLocal>) query.getResultList();
            return list;

        } catch (Exception e) {
            throw new BusinessException("012_369: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    @Override
    public List<BopSubTipoLocal> getSubTipoLocal(Long cdTipoLocal)
            throws BusinessException {
        List<BopSubTipoLocal> list = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	 FROM BOP_SUB_TIPO_LOCAL ");
        sbAppend(sb, " 	WHERE CD_TIPO_LOCAL = ? ");

        Query query = em
                .createNativeQuery(sb.toString(), BopSubTipoLocal.class);

        try {
            query.setParameter(1, cdTipoLocal);
            list = (List<BopSubTipoLocal>) query.getResultList();
            return list;

        } catch (Exception e) {
            throw new BusinessException("012_370: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    // @Override
    // public List<BoletimEntity> findAllBoletimEntity( Long codigoAgencia, Long
    // codigoUnidade, String dataInicio, String dataFim, String horaInicio,
    // String horaFim ) {
    // StringBuilder sql = new StringBuilder();
    //
    // List<Long> unidades = findUnidadePoliciaisPai( codigoAgencia,
    // codigoUnidade );
    //
    // sql.append( " WITH " );
    // sql.append( "            T_OCORRENCIA AS (" );
    // sql.append(
    // "                                SELECT BOP_OCORRENCIA.NR_BOP" );
    // sql.append(
    // "                                       , BOP_OCORRENCIA.TIPO_BOP" );
    // sql.append(
    // "                                       , BOP_OCORRENCIA.DS_CIDADE" );
    // sql.append(
    // "                                       , BOP_OCORRENCIA.DS_BAIRRO" );
    // sql.append(
    // "                                       , BOP_OCORRENCIA.DT_CRIACAO" );
    // sql.append(
    // "                                            FROM BOP_OCORRENCIA" );
    // sql.append(
    // "                                                WHERE BOP_OCORRENCIA.DT_CRIACAO >=  TO_DATE (?, 'DD/MM/YYYY')"
    // );
    // sql.append(
    // "                                                    AND BOP_OCORRENCIA.DT_CRIACAO <= TO_DATE (?, 'DD/MM/YYYY')"
    // );
    // sql.append(
    // "                                                    AND TO_CHAR (BOP_OCORRENCIA.DT_CRIACAO, 'HH24:MI:SS') >= ?"
    // );
    // sql.append(
    // "                                                    AND TO_CHAR (BOP_OCORRENCIA.DT_CRIACAO, 'HH24:MI:SS') <= ?"
    // );
    // sql.append( "                            )," );
    // sql.append( "            T_CHAMADO_OCORRENCIA AS (" );
    // sql.append(
    // "                                        SELECT BOP_CHAMADO_OCORRENCIA.NR_BOP"
    // );
    // sql.append(
    // "                                            , BOP_CHAMADO_OCORRENCIA.TIPO_BOP"
    // );
    // sql.append(
    // "                                            , BOP_CHAMADO_OCORRENCIA.NR_CHAMADO "
    // );
    // sql.append(
    // "                                                FROM BOP_CHAMADO_OCORRENCIA      "
    // );
    // sql.append( "                                    )," );
    // sql.append( "            T_OCORRENCIA_DEON AS ( " );
    // sql.append(
    // "                                    SELECT BOP_OCORRENCIA_DEON.ID_ENDERECO_OCORRENCIA_DEON"
    // );
    // sql.append(
    // "                                         , BOP_OCORRENCIA_DEON.ID_OCORRENCIA_DEON"
    // );
    // sql.append(
    // "                                         , BOP_OCORRENCIA_DEON.NR_BOP"
    // );
    // sql.append(
    // "                                         , BOP_OCORRENCIA_DEON.TIPO_BOP"
    // );
    // sql.append(
    // "                                         , BOP_OCORRENCIA_DEON.DT_ENTREGA                                                                         "
    // );
    // sql.append(
    // "                                            FROM BOP_OCORRENCIA_DEON" );
    // sql.append( "                                 ),     " );
    // sql.append( "			T_ENDERECO_OCORRENCIA_DEON AS ( " );
    // sql.append(
    // "                                            SELECT BOP_ENDERECO_OCORRENCIA_DEON.ID_ENDERECO_OCORRENCIA_DEON"
    // );
    // sql.append(
    // "                                                FROM BOP_ENDERECO_OCORRENCIA_DEON"
    // );
    // sql.append( "                                          ),   " );
    // sql.append( "            T_OCORRENCIA_AGENCIA AS (" );
    // sql.append(
    // "                                        SELECT BOP_OCORRENCIA_AGENCIA.NR_BOP"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.TIPO_BOP"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.TP_INCIDENTE"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.NR_DDD  "
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.NR_TELEFONE  "
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.NR_CHAMADO"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.NR_DESPACHO"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.CD_AGENCIA"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL"
    // );
    // sql.append(
    // "                                             , BOP_OCORRENCIA_AGENCIA.ID_REGISTRO_RESPONSAVEL"
    // );
    // sql.append(
    // "                                                FROM BOP_OCORRENCIA_AGENCIA"
    // );
    // sql.append(
    // "                                                   WHERE BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ?  "
    // );
    // sql.append( "                                    )," );
    // sql.append( "            T_UNIDADE_POLICIAL AS (" );
    // sql.append(
    // "                                    SELECT BOP_UNIDADE_POLICIAL.CD_AGENCIA"
    // );
    // sql.append(
    // "                                         , BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL"
    // );
    // sql.append(
    // "                                         , BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL  "
    // );
    // sql.append(
    // "                                            FROM BOP_UNIDADE_POLICIAL"
    // );
    // sql.append(
    // "                                                WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL IN ("
    // );
    //
    // sql.append( codigoUnidade );
    //
    // for ( int i = 0; i < unidades.size(); i++ ) {
    //
    // sql.append( ", " );
    // sql.append( unidades.get( i ) );
    //
    // }
    //
    // sql.append( ")" );
    //
    // sql.append( "                                   ), " );
    // sql.append( "            T_MUNICIPIOS_GERAL AS (" );
    // sql.append(
    // "                                    SELECT BOP_MUNICIPIOS_GERAL.CD_MUNICIPIO"
    // );
    // sql.append(
    // "                                         , BOP_MUNICIPIOS_GERAL.NM_MUNICIPIO"
    // );
    // sql.append(
    // "                                         , BOP_MUNICIPIOS_GERAL.CD_UF"
    // );
    // sql.append(
    // "                                            FROM BOP_MUNICIPIOS_GERAL"
    // );
    // sql.append(
    // "                                                WHERE CD_UF = 'ES'        "
    // );
    // sql.append( "                                  ),          " );
    // sql.append( "            T_BAIRROS_GERAL AS (" );
    // sql.append(
    // "                                   SELECT BOP_BAIRROS_GERAL.CD_BAIRRO"
    // );
    // sql.append(
    // "                                         , BOP_BAIRROS_GERAL.NM_BAIRRO"
    // );
    // sql.append(
    // "                                         , BOP_BAIRROS_GERAL.CD_MUNICIPIO"
    // );
    // sql.append(
    // "                                         , BOP_BAIRROS_GERAL.CD_UF" );
    // sql.append(
    // "                                            FROM BOP_BAIRROS_GERAL" );
    // sql.append(
    // "                                                WHERE CD_UF = 'ES'        "
    // );
    // sql.append( "                                )," );
    // sql.append( "            T_INCIDENTE AS ( " );
    // sql.append(
    // "                              SELECT BOP_INCIDENTE.TP_INCIDENTE  " );
    // sql.append(
    // "                                   , BOP_INCIDENTE.DS_INCIDENTE  " );
    // sql.append(
    // "                                        FROM BOP_INCIDENTE    " );
    // sql.append( "                            )," );
    // sql.append( "            T_REGIAO_PLANEJAMENTO AS ( " );
    // sql.append(
    // "                                        SELECT BOP_REGIAO_PLANEJAMENTO.DS_REGIAO_PLAN   "
    // );
    // sql.append(
    // "                                             , BOP_REGIAO_PLANEJAMENTO.CD_REGIAO_PLAN"
    // );
    // sql.append(
    // "                                                FROM BOP_REGIAO_PLANEJAMENTO"
    // );
    // sql.append( "                                     ),  " );
    // sql.append( "            T_DESPACHO_ANDAMENTO AS ( " );
    // sql.append(
    // "                                       SELECT BOP_DESPACHO_ANDAMENTO.NR_DDD  "
    // );
    // sql.append(
    // "                                            , BOP_DESPACHO_ANDAMENTO.NR_TELEFONE  "
    // );
    // sql.append(
    // "                                            , BOP_DESPACHO_ANDAMENTO.NR_CHAMADO"
    // );
    // sql.append(
    // "                                            , BOP_DESPACHO_ANDAMENTO.NR_DESPACHO"
    // );
    // sql.append(
    // "                                            , BOP_DESPACHO_ANDAMENTO.ID_DESPACHADOR"
    // );
    // sql.append(
    // "                                            , BOP_DESPACHO_ANDAMENTO.FL_SITUACAO"
    // );
    // sql.append(
    // "                                                FROM BOP_DESPACHO_ANDAMENTO    "
    // );
    // sql.append( "                                    ) ," );
    // sql.append( "            T_PLAN_OPERACIONAL AS ( " );
    // sql.append(
    // "                                    SELECT BOP_PLAN_OPERACIONAL.CD_UF "
    // );
    // sql.append(
    // "                                         , BOP_PLAN_OPERACIONAL.CD_MUNICIPIO"
    // );
    // sql.append(
    // "                                         , BOP_PLAN_OPERACIONAL.CD_BAIRRO"
    // );
    // sql.append(
    // "                                         , BOP_PLAN_OPERACIONAL.CD_AGENCIA"
    // );
    // sql.append(
    // "                                         , BOP_PLAN_OPERACIONAL.CD_UNID_POLICIAL"
    // );
    // sql.append(
    // "                                         , BOP_PLAN_OPERACIONAL.CD_REGIAO_PLAN"
    // );
    // sql.append(
    // "                                            FROM BOP_PLAN_OPERACIONAL"
    // );
    // sql.append(
    // "                                                WHERE BOP_PLAN_OPERACIONAL.CD_AGENCIA = ?"
    // );
    // sql.append( "                                  )   " );
    // sql.append( "        SELECT T_OCORRENCIA.NR_BOP," );
    // sql.append( "               T_OCORRENCIA.TIPO_BOP ," );
    // sql.append(
    // "               T_CHAMADO_OCORRENCIA.NR_CHAMADO AS NUMERO_BO," );
    // sql.append(
    // "               T_MUNICIPIOS_GERAL.NM_MUNICIPIO AS MUNICIPIO," );
    // sql.append( "               T_BAIRROS_GERAL.NM_BAIRRO AS BAIRRO," );
    // sql.append(
    // "               T_REGIAO_PLANEJAMENTO.DS_REGIAO_PLAN AS SETOR," );
    // sql.append(
    // "               T_INCIDENTE.DS_INCIDENTE AS DESCRICAO_NATUREZA," );
    // sql.append(
    // "               TO_CHAR (T_OCORRENCIA.DT_CRIACAO, 'DD / MM / YYYY') AS DATA_FATO,"
    // );
    // sql.append(
    // "               TO_CHAR (T_OCORRENCIA.DT_CRIACAO, 'HH24:MI:SS') AS HORA_FATO,"
    // );
    // sql.append(
    // "               NVL2 (T_OCORRENCIA_DEON.DT_ENTREGA, T_UNIDADE_POLICIAL.DS_UNID_POLICIAL, 'CMT') AS DESTINO,"
    // );
    // sql.append(
    // "              (SELECT BP.NM_LEGAL FROM BOP_PESSOAS BP WHERE T_OCORRENCIA_AGENCIA.ID_REGISTRO_RESPONSAVEL = BP.ID_REGISTRO) AS CONFECCIONANTE,"
    // );
    // sql.append(
    // "              (SELECT BU.NM_USUARIO FROM BOP_USUARIOS BU WHERE T_DESPACHO_ANDAMENTO.ID_DESPACHADOR = BU.NM_ABREV_USUARIO AND T_DESPACHO_ANDAMENTO.FL_SITUACAO > 0) AS OPERADOR"
    // );
    // sql.append( "        FROM T_OCORRENCIA" );
    // sql.append(
    // "          JOIN T_CHAMADO_OCORRENCIA         ON ( T_CHAMADO_OCORRENCIA.NR_BOP =  T_OCORRENCIA.NR_BOP AND  T_CHAMADO_OCORRENCIA.TIPO_BOP =  T_OCORRENCIA.TIPO_BOP  ) "
    // );
    // sql.append(
    // "          JOIN T_OCORRENCIA_DEON            ON ( T_OCORRENCIA.NR_BOP = T_OCORRENCIA_DEON.NR_BOP AND T_OCORRENCIA.TIPO_BOP = T_OCORRENCIA_DEON.TIPO_BOP  )"
    // );
    // sql.append(
    // "          JOIN T_ENDERECO_OCORRENCIA_DEON 	ON ( T_ENDERECO_OCORRENCIA_DEON.ID_ENDERECO_OCORRENCIA_DEON = T_OCORRENCIA_DEON.ID_ENDERECO_OCORRENCIA_DEON)"
    // );
    // sql.append(
    // "          JOIN T_OCORRENCIA_AGENCIA         ON ( T_OCORRENCIA_AGENCIA.NR_BOP = T_OCORRENCIA.NR_BOP AND T_OCORRENCIA_AGENCIA.TIPO_BOP = T_OCORRENCIA.TIPO_BOP )"
    // );
    // sql.append(
    // "          JOIN T_UNIDADE_POLICIAL           ON ( T_UNIDADE_POLICIAL.CD_AGENCIA =  T_OCORRENCIA_AGENCIA.CD_AGENCIA AND  T_UNIDADE_POLICIAL.CD_UNID_POLICIAL =  T_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL )              "
    // );
    // sql.append(
    // "          JOIN T_MUNICIPIOS_GERAL           ON ( T_MUNICIPIOS_GERAL.NM_MUNICIPIO = T_OCORRENCIA.DS_CIDADE )"
    // );
    // sql.append(
    // "          JOIN T_BAIRROS_GERAL              ON ( T_MUNICIPIOS_GERAL.CD_MUNICIPIO = T_BAIRROS_GERAL.CD_MUNICIPIO  AND T_BAIRROS_GERAL.NM_BAIRRO = T_OCORRENCIA.DS_BAIRRO  )   "
    // );
    // sql.append(
    // "          JOIN T_INCIDENTE                  ON ( T_INCIDENTE.TP_INCIDENTE = T_OCORRENCIA_AGENCIA.TP_INCIDENTE)"
    // );
    // sql.append(
    // "		  LEFT JOIN T_DESPACHO_ANDAMENTO    ON ( T_DESPACHO_ANDAMENTO.NR_DDD = T_OCORRENCIA_AGENCIA.NR_DDD AND T_DESPACHO_ANDAMENTO.NR_TELEFONE = T_OCORRENCIA_AGENCIA.NR_TELEFONE AND T_DESPACHO_ANDAMENTO.NR_CHAMADO = T_OCORRENCIA_AGENCIA.NR_CHAMADO AND T_DESPACHO_ANDAMENTO.NR_DESPACHO = T_OCORRENCIA_AGENCIA.NR_DESPACHO )"
    // );
    // sql.append(
    // "		  LEFT JOIN T_PLAN_OPERACIONAL      ON (  T_PLAN_OPERACIONAL.CD_UF = T_MUNICIPIOS_GERAL.CD_UF AND"
    // );
    // sql.append(
    // "                                                  T_PLAN_OPERACIONAL.CD_MUNICIPIO = T_MUNICIPIOS_GERAL.CD_MUNICIPIO AND              "
    // );
    // sql.append(
    // "                                                  T_PLAN_OPERACIONAL.CD_BAIRRO = T_BAIRROS_GERAL.CD_BAIRRO AND"
    // );
    // sql.append(
    // "                                                  T_PLAN_OPERACIONAL.CD_AGENCIA = T_OCORRENCIA_AGENCIA.CD_AGENCIA AND"
    // );
    // sql.append(
    // "                                                   T_PLAN_OPERACIONAL.CD_UNID_POLICIAL = T_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL "
    // );
    // sql.append( "                                               )     " );
    // sql.append(
    // "		  LEFT JOIN T_REGIAO_PLANEJAMENTO   ON ( T_REGIAO_PLANEJAMENTO.CD_REGIAO_PLAN =  T_PLAN_OPERACIONAL.CD_REGIAO_PLAN)       "
    // );
    //
    // Query query = em.createNativeQuery( sql.toString(), BoletimEntity.class
    // );
    //
    // query.setParameter( 1, dataInicio );
    // query.setParameter( 2, dataFim );
    // query.setParameter( 3, horaInicio );
    // query.setParameter( 4, horaFim );
    // query.setParameter( 5, codigoAgencia );
    // query.setParameter( 6, codigoAgencia );
    //
    // List<BoletimEntity> list = null;
    //
    // try {
    //
    // list = query.getResultList();
    // } catch ( Exception e ) {
    // e.printStackTrace();
    // }
    // return list;
    //
    // }
    public BopEnvolvidoTipoEnvolvido getEnvolvidoTipoEnvol(
            BopEnvolvidoOcorrenciaDeon bopEnvolvidoOcorrenciaDeon)
            throws BusinessException {
        BopEnvolvidoTipoEnvolvido bopEnvolvidoTipoEnvolvido = null;

        StringBuilder sb = new StringBuilder();

        sbAppend(sb, " SELECT * ");
        sbAppend(sb, " 	 FROM BOP_ENVOLVIDO_TIPO_ENVOL ");
        sbAppend(sb, " 	WHERE ID_ENVOLVIDO_DEON = ? ");

        Query query = em.createNativeQuery(sb.toString(),
                BopEnvolvidoTipoEnvolvido.class);

        try {
            query.setParameter(1,
                    bopEnvolvidoOcorrenciaDeon.getIdEnvolvidoDeon());
            bopEnvolvidoTipoEnvolvido = (BopEnvolvidoTipoEnvolvido) query
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_371: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopEnvolvidoTipoEnvolvido;
    }

    public byte[] getBrasaoAgencia(BopAgencia agencia) throws BusinessException {

        byte[] brasao = null;

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT IM_BRASAO ");
        sql.append("	FROM BOP_AGENCIA");
        sql.append("	   WHERE  CD_AGENCIA = ? ");

        Query query = em.createNativeQuery(sql.toString());

        try {
            query.setParameter(1, agencia.getCdAgencia());
            brasao = (byte[]) query.getSingleResult();
        } catch (NoResultException e) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_372: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return brasao;

    }

    @Override
    public List<BopProfissaoOcupacao> getListaProfissaoOcupacao(String pesquisa)
            throws BusinessException {
        List<BopProfissaoOcupacao> list = null;
        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT *");
        sql.append(" FROM BOP_PROFISSAO_OCUPACAO");
        sql.append(" WHERE BOP_PROFISSAO_OCUPACAO.CD_PROF_OCUP_CBO LIKE '%%'");
        sql.append(" 	AND TRANSLATE( BOP_PROFISSAO_OCUPACAO.DS_PROF_OCUP,");
        sql.append(" 	'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE");
        sql.append(" 	TRANSLATE( ?,");
        sql.append(" 	'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu')");
        sql.append(" 	AND BOP_PROFISSAO_OCUPACAO.CD_PROF_OCUP_CBO IS NOT NULL");

        Query query = em.createNativeQuery(sql.toString(),
                BopProfissaoOcupacao.class);

        try {
            query.setParameter(1, "%" + pesquisa.toUpperCase() + "%");
            list = (List<BopProfissaoOcupacao>) query.getResultList();

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_373: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return list;
    }

    public List<BopOcorrenciaObjeto> getListaObjetosSalvosParaValidacao(
            BopOcorrencia ocorrencia) throws BusinessException {
        List<BopOcorrenciaObjeto> list = null;

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT *");
        sql.append(" 	FROM BOP_OCORRENCIA_OBJETOS");
        sql.append(" 		WHERE NR_BOP = ? ");
        sql.append(" 			AND TIPO_BOP = ?");
        sql.append(" 			AND DT_DESATIVACAO IS NULL");

        Query query = em.createNativeQuery(sql.toString(),
                BopOcorrenciaObjeto.class);

        try {
            query.setParameter(1, ocorrencia.getId().getNrBop());
            query.setParameter(2, ocorrencia.getId().getTipoBop());

            list = (List<BopOcorrenciaObjeto>) query.getResultList();
            return list;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_374: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    @Override
    public Boolean podeExcluirAnexoDigital(BopAnexoOcorrencia anexoOcorrencia,
            BopUsuarios usuario, BopUnidadePolicial unidade)
            throws BusinessException {
        StringBuilder sql = new StringBuilder();
        Long count = 0L;

        sql.append(" SELECT COUNT(1) ");
        sql.append(" FROM BOP_ANEXO_OCORRENCIA_DEON");
        sql.append(" JOIN BOP_OCORRENCIA_AGENCIA ON ( BOP_OCORRENCIA_AGENCIA.NR_BOP = BOP_ANEXO_OCORRENCIA_DEON.NR_BOP AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = BOP_ANEXO_OCORRENCIA_DEON.TIPO_BOP )");
        sql.append(" JOIN BOP_OCORRENCIA_AGENCIA_DEON ON ( BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA ) ");
        sql.append(" WHERE BOP_ANEXO_OCORRENCIA_DEON.USR_CRIACAO = ? ");
        sql.append(" AND BOP_OCORRENCIA_AGENCIA_DEON.FL_SITUACAO_OCORRENCIA = 1 ");
        sql.append(" AND BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = ? ");
        sql.append(" AND BOP_OCORRENCIA_AGENCIA.CD_UNID_POLICIAL = ?");
        sql.append(" AND BOP_OCORRENCIA_AGENCIA.NR_BOP = ? ");
        sql.append(" AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = ?");
        sql.append(" AND BOP_ANEXO_OCORRENCIA_DEON.ID_ANEXO = ?");

        Query query = em.createNativeQuery(sql.toString());

        try {
            query.setParameter(1, usuario.getNmAbrevUsuario());
            query.setParameter(2, unidade.getId().getCdAgencia());
            query.setParameter(3, unidade.getId().getCdUnidPolicial());
            query.setParameter(4, anexoOcorrencia.getId().getNrBop());
            query.setParameter(5, anexoOcorrencia.getId().getTipoBop());
            query.setParameter(6, anexoOcorrencia.getId().getIdAnexo());

            count = Long.valueOf(query.getSingleResult().toString())
                    .longValue();
            return count > 0;
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_375: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    @Override
    public VwDeonMarcaObjeto getMarcaByDescricao(String marca)
            throws BusinessException {
        VwDeonMarcaObjeto obj = null;
        try {
            obj = (VwDeonMarcaObjeto) em
                    .createNamedQuery(VwDeonMarcaObjeto.FIND_MARCA_BY_DESCRICAO)
                    .setParameter("dsMarca", "%" + marca + "%")
                    .setMaxResults(1).getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_376: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return obj;
    }

    @Override
    public BopModeloMatApreendido getModeloByDescricao(String modelo)
            throws BusinessException {
        BopModeloMatApreendido obj = null;
        try {
            obj = (BopModeloMatApreendido) em
                    .createNamedQuery(
                            BopModeloMatApreendido.FIND_MODELO_BY_DESCRICAO)
                    .setParameter("dsModelo", modelo).setMaxResults(1)
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_377: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return obj;
    }

    @Override
    public BopModeloMatApreendido getModeloByDescricaoEMarca(String modelo,
            Integer cdMarca) throws BusinessException {
        BopModeloMatApreendido obj = null;
        try {
            obj = (BopModeloMatApreendido) em
                    .createNamedQuery(
                            BopModeloMatApreendido.FIND_MODELO_BY_DESCRICAO_E_MARCA)
                    .setParameter("dsModelo", modelo)
                    .setParameter("cdMarca", cdMarca).getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_406: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return obj;
    }

    @Override
    public VwBopCores getCorByDescricao(String cor) throws BusinessException {
        VwBopCores obj = null;
        try {
            obj = (VwBopCores) em
                    .createNamedQuery(VwBopCores.FIND_COR_BY_DESCRICAO)
                    .setParameter("dsCor", cor).getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_379: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return obj;
    }

    @Override
    public BopTipoCombustivel getTipoCombustivelByDescricao(String desc)
            throws BusinessException {
        BopTipoCombustivel obj = null;
        try {
            obj = (BopTipoCombustivel) em
                    .createNamedQuery(
                            BopTipoCombustivel.FIND_TIPO_COMBUSTIVEL_BY_DESCRICAO)
                    .setParameter("dsTipoCombustivel", desc.toUpperCase())
                    .getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_380: "
                    + "Ocorreu um erro inesperado.", e);
        }
        return obj;
    }

    public BopMarcaModeloDenatran getMarcaModeloDenatran(String dsMarcaModelo)
            throws BusinessException {

        BopMarcaModeloDenatran bopMarcaModeloDentran;

        try {
            bopMarcaModeloDentran = (BopMarcaModeloDenatran) em
                    .createNamedQuery(
                            "BopMarcaModeloDenatran.FIND_MARCA_MODELO")
                    .setParameter("dsMarcaModelo", dsMarcaModelo)
                    .getSingleResult();
        } catch (NoResultException e) {
            bopMarcaModeloDentran = null;
        } catch (Exception e) {
            throw new BusinessException("012_381: "
                    + "Ocorreu um erro inesperado.", e);
        }

        return bopMarcaModeloDentran;

    }

    public Boolean verificaObjetoEnvolvido(
            BopEnvolvidosOcorrencia bopEnvolvidoOcorDeletar)
            throws BusinessException {
        StringBuilder sql = new StringBuilder();
        Long count = 0L;

        sql.append(" SELECT COUNT(1) FROM ( ");
        sql.append(" SELECT 1 FROM BOP_OBJETO_OCORR_ARMA_DEON WHERE ID_DETENTOR = ?	UNION ALL ");
        sql.append(" SELECT 1 FROM  BOP_OBJETO_OCORR_MUNICAO_DEON WHERE ID_DETENTOR = ?	UNION ALL ");
        sql.append(" SELECT 1 FROM  BOP_OBJETO_OCORR_VEICULO_DEON WHERE ID_ENVOLVIDO_DEON = ? ) ");

        Query query = em.createNativeQuery(sql.toString());

        try {
            query.setParameter(1, bopEnvolvidoOcorDeletar
                    .getBopEnvolvidoOcorrenciaDeon().getIdEnvolvidoDeon());
            query.setParameter(2, bopEnvolvidoOcorDeletar
                    .getBopEnvolvidoOcorrenciaDeon().getIdEnvolvidoDeon());
            query.setParameter(3, bopEnvolvidoOcorDeletar
                    .getBopEnvolvidoOcorrenciaDeon().getIdEnvolvidoDeon());

            count = Long.valueOf(query.getSingleResult().toString())
                    .longValue();
            return count > 0;
        } catch (Exception e) {
            throw new BusinessException("012_382: "
                    + "Ocorreu um erro inesperado.", e);
        }

    }

    public Boolean verificaIncidenteEvolucao(String incidente) throws BusinessException {

        StringBuilder sql = new StringBuilder();
        Long count = 0L;

        sql.append(" SELECT COUNT(*) FROM BOP_INCIDENTE_EVOLUCAO_OCORR WHERE TP_INCIDENTE_EVOLUCAO = ? ");

        Query query = em.createNativeQuery(sql.toString());

        try {

            query.setParameter(1, incidente);

            count = Long.valueOf(query.getSingleResult().toString()).longValue();
            return count > 0;

        } catch (Exception e) {
            throw new BusinessException("012_383: Ocorreu um erro inesperado.", e);
        }
    }

    public Boolean verificaEnvolvidoVitima(BopOcorrencia ocorrencia, BopUnidadePolicial unidade) throws BusinessException {

        StringBuilder sql = new StringBuilder();
        Long count = 0L;

        sql.append(" SELECT COUNT(1) FROM BOP_ENVOLVIDO_OCORRENCIA_DEON  ");

        sql.append(" JOIN BOP_ENVOLVIDOS_OCORRENCIA ON  ( BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP = BOP_ENVOLVIDO_OCORRENCIA_DEON.NR_BOP  ");
        sql.append("  AND BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP = BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP  ");
        sql.append(" AND BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO = BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO      ) ");
        sql.append(" LEFT JOIN BOP_ENVOLVIDO_ACIDENTE ON  ( BOP_ENVOLVIDOS_OCORRENCIA.NR_BOP = BOP_ENVOLVIDO_ACIDENTE.NR_BOP AND BOP_ENVOLVIDOS_OCORRENCIA.TIPO_BOP = BOP_ENVOLVIDO_ACIDENTE.TIPO_BOP ");

        sql.append("   AND BOP_ENVOLVIDOS_OCORRENCIA.ID_ENVOLVIDO = BOP_ENVOLVIDO_ACIDENTE.ID_ENVOLVIDO   ) ");
        sql.append(" JOIN BOP_ENVOLVIDO_TIPO_ENVOL ON ( BOP_ENVOLVIDO_OCORRENCIA_DEON.ID_ENVOLVIDO_DEON =  BOP_ENVOLVIDO_TIPO_ENVOL.ID_ENVOLVIDO_DEON ) ");
        sql.append(" WHERE BOP_ENVOLVIDO_OCORRENCIA_DEON.NR_BOP = ? ");
        sql.append(" AND BOP_ENVOLVIDO_OCORRENCIA_DEON.TIPO_BOP = ? ");
        sql.append(" AND BOP_ENVOLVIDO_TIPO_ENVOL.CD_AGENCIA = ? ");
        sql.append(" AND BOP_ENVOLVIDO_TIPO_ENVOL.CD_UNID_POLICIAL = ? ");
        sql.append(" AND BOP_ENVOLVIDO_TIPO_ENVOL.FL_ATIVO = 'S' ");
        sql.append(" AND (BOP_ENVOLVIDO_TIPO_ENVOL.CD_TIPO_ENV = 33 OR BOP_ENVOLVIDO_TIPO_ENVOL.CD_TIPO_ENV = 1 OR FL_CONDUTOR_VITIMA = 'S') ");

        Query query = em.createNativeQuery(sql.toString());

        try {

            query.setParameter(1, ocorrencia.getId().getNrBop());
            query.setParameter(2, ocorrencia.getId().getTipoBop());
            query.setParameter(3, unidade.getId().getCdAgencia());
            query.setParameter(4, unidade.getId().getCdUnidPolicial());

            count = Long.valueOf(query.getSingleResult().toString()).longValue();
            return count > 0;

        } catch (Exception e) {
            throw new BusinessException("012_384: Ocorreu um erro inesperado.", e);
        }
    }

    public void atualizarSituacaoEvolucao(BopOcorrencia ocorrencia, String statusEvolucao) throws BusinessException {
        StringBuilder sql = new StringBuilder();

        sql.append(" UPDATE BOP_OCORRENCIA_DEON SET STATUS_EVOLUCAO = ? WHERE NR_BOP = ? AND TIPO_BOP = ? ");

        Query query = em.createNativeQuery(sql.toString());

        try {

            query.setParameter(1, statusEvolucao);
            query.setParameter(2, ocorrencia.getId().getNrBop());
            query.setParameter(3, ocorrencia.getId().getTipoBop());

            query.executeUpdate();

        } catch (Exception e) {
            throw new BusinessException("012_385: Ocorreu um erro inesperado.", e);
        }
    }

    public List<BopMotivoEvolucaoOcorEnv> getListaMotivoEvolucaoOcorEnv() throws BusinessException {
        List<BopMotivoEvolucaoOcorEnv> list = null;

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT *");
        sql.append(" 	FROM BOP_MOTIVO_EVOLUCAO_OCOR_ENV");
        sql.append(" 		WHERE FL_ATIVO = 'S' ");

        Query query = em.createNativeQuery(sql.toString(), BopMotivoEvolucaoOcorEnv.class);

        try {

            list = (List<BopMotivoEvolucaoOcorEnv>) query.getResultList();
            return list;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_386: Ocorreu um erro inesperado.", e);
        }

    }

    public List<BopMeioEvolucaoOcorEnv> getListaMeioEvolucaoOcorEnv() throws BusinessException {
        List<BopMeioEvolucaoOcorEnv> list = null;

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT *");
        sql.append(" 	FROM BOP_MEIO_EVOLUCAO_OCOR_ENV");
        sql.append(" 		WHERE FL_ATIVO = 'S' ");

        Query query = em.createNativeQuery(sql.toString(), BopMeioEvolucaoOcorEnv.class);

        try {

            list = (List<BopMeioEvolucaoOcorEnv>) query.getResultList();
            return list;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_387: Ocorreu um erro inesperado.", e);
        }

    }

    public BopOcorrenciaEvolucaoEnvol mergeBopOcorrenciaEvolucaoEnvol(BopOcorrenciaEvolucaoEnvol bopOcorrenciaEvolucaoEnvol) throws BusinessException {
        try {
            BopOcorrenciaEvolucaoEnvol retorno = em.merge(bopOcorrenciaEvolucaoEnvol);

            em.flush();

            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_388: Ocorreu um erro inesperado.", e);

        }
    }

    public List<BopCutisEvolucao> findAllCutisEvolucao() throws BusinessException {
        List<BopCutisEvolucao> list = null;

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT CD_CUTIS, DS_CUTIS FROM BOP_CUTIS ");

        Query query = em.createNativeQuery(sql.toString(), BopCutisEvolucao.class);

        try {

            list = query.getResultList();
            return list;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_387: Ocorreu um erro inesperado.", e);
        }
    }

    public BopOcorrenciaEvolucaoEnvol getEvolucaoEnvol(Long id) throws BusinessException {
        BopOcorrenciaEvolucaoEnvol ocorrenciaEvolucaoEnvol = new BopOcorrenciaEvolucaoEnvol();

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT * FROM BOP_OCORRENCIA_EVOLUCAO_ENVOL WHERE ID_EVOLUCAO_ENVOL = ? ");

        Query query = em.createNativeQuery(sql.toString(), BopOcorrenciaEvolucaoEnvol.class);

        query.setParameter(1, id);
        try {

            ocorrenciaEvolucaoEnvol = (BopOcorrenciaEvolucaoEnvol) query.getSingleResult();
            return ocorrenciaEvolucaoEnvol;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_388: Ocorreu um erro inesperado.", e);
        }
    }

    public void removerEvolucaoEnvol(Long id, String nmAbrevUsuario) throws BusinessException {

        BopOcorrenciaEvolucaoEnvol ocorrenciaEvolucaoEnvol = new BopOcorrenciaEvolucaoEnvol();

        ocorrenciaEvolucaoEnvol = this.getEvolucaoEnvol(id);

        ocorrenciaEvolucaoEnvol.setDtExclusao(new Date());
        ocorrenciaEvolucaoEnvol.setUsrExclusao(nmAbrevUsuario);

        try {

            ocorrenciaEvolucaoEnvol = this.mergeBopOcorrenciaEvolucaoEnvol(ocorrenciaEvolucaoEnvol);

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_389: Ocorreu um erro inesperado.", e);
        }
    }

    public List<EvolucaoOcorrenciaEnvolvido> getListEvolucaoOcorrEvol(int intValue) throws BusinessException {
        List<EvolucaoOcorrenciaEnvolvido> list = null;

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT ID_EVOLUCAO_OCOR AS ID, 'OCORRENCIA' AS TIPO,  DT_INCLUSAO ,USR_INCLUSAO FROM BOP_OCORRENCIA_EVOLUCAO_OCORR ");
        sql.append(" WHERE ID_OCORRENCIA_DEON = ? AND USR_EXCLUSAO IS NULL AND DT_EXCLUSAO IS NULL ");
        sql.append(" UNION ALL ");
        sql.append(" SELECT ID_EVOLUCAO_ENVOL AS ID, 'ENVOLVIDO' AS TIPO,  DT_INCLUSAO ,USR_INCLUSAO FROM BOP_OCORRENCIA_EVOLUCAO_ENVOL ");
        sql.append(" WHERE ID_OCORRENCIA_DEON = ? AND USR_EXCLUSAO IS NULL AND DT_EXCLUSAO IS NULL ");

        Query query = em.createNativeQuery(sql.toString(), EvolucaoOcorrenciaEnvolvido.class);

        query.setParameter(1, intValue);
        query.setParameter(2, intValue);
        try {

            list = query.getResultList();
            return list;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_390: Ocorreu um erro inesperado.", e);
        }
    }

    public List<BopMunicipio> getMunicipioEvolucao(String cdUf, boolean comNaoInformado) throws BusinessException {
        if (cdUf == null) {
            return null;
        }
        List<BopMunicipio> listBopMunicipio;
        try {
            listBopMunicipio = em.createNamedQuery(BopMunicipio.FIND_BY_UF)
                    .setParameter("cdUf", cdUf)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_391: Ocorreu um erro inesperado.", e);

        }
        if (!cdUf.trim().equals("NI") && comNaoInformado) {
            List<BopMunicipio> listNaoInformado = em
                    .createNamedQuery(BopMunicipio.FIND_BY_UF)
                    .setParameter("cdUf", "NI").getResultList();
            listBopMunicipio.addAll(listNaoInformado);
        }
        return listBopMunicipio;
    }

    public List<BopBairro> getBairroEvolucao(Long cdMunicipio, String cdUf, boolean comNaoInformado) throws BusinessException {
        if (cdMunicipio == null || cdUf == null) {
            return null;
        }
        List<BopBairro> listBopBairro;
        try {
            listBopBairro = em
                    .createNamedQuery(BopBairro.FIND_BY_MUNICIPIO)
                    .setParameter("cdUf", cdUf)
                    .setParameter("cdMunicipio", cdMunicipio)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_392: "
                    + "Ocorreu um erro inesperado.", e);

        }
        if (!cdUf.trim().equals("NI") && comNaoInformado) {
            List<BopBairro> listNaoInformado = em
                    .createNamedQuery(BopBairro.FIND_BY_MUNICIPIO)
                    .setParameter("cdUf", "NI")
                    .setParameter("cdMunicipio", Long.parseLong("9999999999"))
                    .getResultList();
            listBopBairro.addAll(listNaoInformado);
        }
        return listBopBairro;
    }

    public BopOcorrenciaEvolucaoOcorr mergeBopOcorrenciaEvolucaoOcor(BopOcorrenciaEvolucaoOcorr bopOcorrenciaEvolucaoOcor) throws BusinessException {
        try {
            BopOcorrenciaEvolucaoOcorr retorno = em.merge(bopOcorrenciaEvolucaoOcor);

            em.flush();

            em.refresh(retorno);

            return retorno;
        } catch (Exception e) {
            throw new BusinessException("012_393: Ocorreu um erro inesperado.", e);
        }
    }

    public void removerEvolucaoOcorr(Long id, String nmAbrevUsuario) throws BusinessException {

        BopOcorrenciaEvolucaoOcorr ocorrenciaEvolucaoOcor = new BopOcorrenciaEvolucaoOcorr();

        ocorrenciaEvolucaoOcor = this.getEvolucaoOcorr(id);

        ocorrenciaEvolucaoOcor.setDtExclusao(new Date());
        ocorrenciaEvolucaoOcor.setUsrExclusao(nmAbrevUsuario);

        try {

            ocorrenciaEvolucaoOcor = this.mergeBopOcorrenciaEvolucaoOcor(ocorrenciaEvolucaoOcor);

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_394: Ocorreu um erro inesperado.", e);
        }
    }

    public BopOcorrenciaEvolucaoOcorr getEvolucaoOcorr(Long id) throws BusinessException {
        BopOcorrenciaEvolucaoOcorr ocorrenciaEvolucaoOcorr = new BopOcorrenciaEvolucaoOcorr();

        StringBuilder sql = new StringBuilder();

        sql.append(" SELECT * FROM BOP_OCORRENCIA_EVOLUCAO_OCORR WHERE ID_EVOLUCAO_OCOR = ? ");

        Query query = em.createNativeQuery(sql.toString(), BopOcorrenciaEvolucaoOcorr.class);

        query.setParameter(1, id);
        try {

            ocorrenciaEvolucaoOcorr = (BopOcorrenciaEvolucaoOcorr) query.getSingleResult();
            return ocorrenciaEvolucaoOcorr;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_395: Ocorreu um erro inesperado.", e);
        }
    }

    public boolean isParticipacaoPC(int nrBop, String tipoBop) throws BusinessException {

        StringBuilder sql = new StringBuilder();
        try {
            sql.append(" SELECT COUNT(1) FROM BOP_OCORRENCIA_AGENCIA ");
            sql.append(" JOIN BOP_OCORRENCIA_AGENCIA_DEON ON (  BOP_OCORRENCIA_AGENCIA.CD_OCORRENCIA_AGENCIA = BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA ) ");
            sql.append(" WHERE  BOP_OCORRENCIA_AGENCIA.CD_AGENCIA = 3 ");
            sql.append(" AND BOP_OCORRENCIA_AGENCIA.NR_BOP = ? ");
            sql.append(" AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = ? ");

            Query query = em.createNativeQuery(sql.toString());

            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);
            BigDecimal resul = (BigDecimal) query.getSingleResult();
            return resul.longValue() > 0;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_396: Ocorreu um erro inesperado.", e);
        }
    }

    public String verificaStatusOcorrencia(Long cdAgencia, int nrBop, String tipoBop) throws BusinessException {

        StringBuilder sql = new StringBuilder();
        try {
            sql.append(" SELECT FU_STATUS_EVOLUVAO_OCORR (?, ?, ? ) FROM DUAL ");

            Query query = em.createNativeQuery(sql.toString());

            query.setParameter(1, cdAgencia);
            query.setParameter(2, nrBop);
            query.setParameter(3, tipoBop);
            String resul = (String) query.getSingleResult();
            return resul;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_397: Ocorreu um erro inesperado.", e);
        }
    }

    public boolean isExisteAgenciaDeon(Long cdOcorrenciaAgencia) throws BusinessException {

        StringBuilder sql = new StringBuilder();
        try {
            sql.append(" SELECT COUNT(1) FROM BOP_OCORRENCIA_AGENCIA_DEON ");
            sql.append(" WHERE  BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA = ? ");

            Query query = em.createNativeQuery(sql.toString());

            query.setParameter(1, cdOcorrenciaAgencia);
            BigDecimal resul = (BigDecimal) query.getSingleResult();
            return resul.longValue() > 0;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_398: Ocorreu um erro inesperado.", e);
        }
    }

    public BopOcorrenciaAgenciaDeon getBopOcorrenciaAgenciaDeon(Long cdOcorrenciaAgencia) throws BusinessException {

        StringBuilder sql = new StringBuilder();
        try {
            sql.append(" SELECT * FROM BOP_OCORRENCIA_AGENCIA_DEON ");
            sql.append(" WHERE  BOP_OCORRENCIA_AGENCIA_DEON.CD_OCORRENCIA_AGENCIA = ? ");

            Query query = em.createNativeQuery(sql.toString(), BopOcorrenciaAgenciaDeon.class);

            query.setParameter(1, cdOcorrenciaAgencia);
            return (BopOcorrenciaAgenciaDeon) query.getSingleResult();
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_399: Ocorreu um erro inesperado.", e);
        }
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrGeral bopObjetoOcorrGeral, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT(DISTINCT BO.DT_CRIACAO)"
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_GERAL BOOG ON BOOG.TIPO_BOP = BOO.TIPO_BOP AND BOOG.ID_OBJETO = BOO.ID_OBJETO AND BOOG.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }

        appendWhereClause(strbfQuery, bopObjetoOcorrGeral.getDsObservacao(),
                " BOOG.DS_OBSERVACAO LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.DT_GERACAO DESC ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrGeral.getDsObservacao())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrGeral.getDsObservacao()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_172: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrGeral bopObjetoOcorrGeral, int inicio, int fim,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum  FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " 	BOP_INCIDENTE.DS_INCIDENTE, BOP_INCIDENTE.ID_INCIDENTE_PAI, BOP_INCIDENTE.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " 	JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " 	JOIN BOP_INCIDENTE ON BO.TP_INCIDENTE_PRINCIPAL = BOP_INCIDENTE.TP_INCIDENTE"
                + " 	JOIN BOP_OBJETO_OCORR_GERAL BOOG ON BOOG.TIPO_BOP = BOO.TIPO_BOP AND BOOG.ID_OBJETO = BOO.ID_OBJETO AND BOOG.NR_BOP = BOO.NR_BOP "
                + " 	JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }

        appendWhereClause(strbfQuery, bopObjetoOcorrGeral.getDsObservacao(),
                " BOOG.DS_OBSERVACAO LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (inicio + fim) + " ) WHERE rnum >" + inicio);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrGeral.getDsObservacao())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrGeral.getDsObservacao()));
        }

        List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient;
        try {
            listaConsultaOcorrenciaTransient = query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_173: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listaConsultaOcorrenciaTransient;
    }

    @Override
    public int getListaOcorrenciaCountComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT(DISTINCT BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJETO_OCORR_ELETRO BOOE on BOOE.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OBJETO_OCORR_ELETRO_DEON BOOED on BOOED.ID_OBJETO = BOO.ID_OBJETO "
                + " LEFT JOIN  BOP_OBJ_OCOR_ELETRO_CHIPS_DEON BOOECD ON BOOECD.ID_ELETRO_DEON = BOOED.ID_ELETRO_DEON ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrEletro.getNmProprietario(),
                " ( translate( BOOE.NM_PROPRIETARIO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrSerial(),
                " BOOE.NR_SERIAL like ? ");

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrLinha(),
                    " BOOECD.NR_LINHA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOE.CD_MARCA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getDsImei(),
                    " BOOECD.DS_IMEI like ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getNmModelo(),
                    " BOOED.NM_MODELO like ? ");
        }

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter(parameters++, bopObjetoOcorrEletro.getNrLinha());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter(parameters++, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter(parameters++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter(parameters++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_176: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrenciaComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrEletro bopObjetoOcorrEletro, int indexPaginacao,
            int rows, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ROWNUM FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJETO_OCORR_ELETRO BOOE on BOOE.ID_OBJETO = BOO.ID_OBJETO "
                + " JOIN BOP_OBJETO_OCORR_ELETRO_DEON BOOED on BOOED.ID_OBJETO = BOO.ID_OBJETO "
                + " LEFT JOIN  BOP_OBJ_OCOR_ELETRO_CHIPS_DEON BOOECD ON BOOECD.ID_ELETRO_DEON = BOOED.ID_ELETRO_DEON ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrEletro.getNmProprietario(),
                " ( translate( BOOE.NM_PROPRIETARIO, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrSerial(),
                " BOOE.NR_SERIAL like ? ");

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro.getNrLinha(),
                    " BOOECD.NR_LINHA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOE.CD_MARCA = ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getDsImei(),
                    " BOOECD.DS_IMEI like ? ");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            appendWhereClause(strbfQuery, bopObjetoOcorrEletro
                    .getBopObjetoOcorrEletroDeon().getNmModelo(),
                    " BOOED.NM_MODELO like ? ");
        }

        strbfQuery.append(" order by  BCO.NR_CHAMADO desc ");

        Query query = this.em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNmProprietario())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrEletro.getNmProprietario() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrSerial())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrEletro.getNrSerial() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getNrLinha())) {
            query.setParameter(parameters++, bopObjetoOcorrEletro.getNrLinha());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro.getVwDeonMarcaObjeto())) {
            query.setParameter(parameters++, bopObjetoOcorrEletro
                    .getVwDeonMarcaObjeto().getIdMarca());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getDsImei())) {
            query.setParameter(parameters++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getDsImei() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrEletro
                .getBopObjetoOcorrEletroDeon().getNmModelo())) {
            query.setParameter(parameters++, "%"
                    + bopObjetoOcorrEletro.getBopObjetoOcorrEletroDeon()
                            .getNmModelo() + "%");
        }

        List<ConsultaOcorrenciaTransient> listaRetorno;
        try {
            listaRetorno = query.setFirstResult(indexPaginacao)
                    .setMaxResults(rows).getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_177: "
                    + "Ocorreu um erro inesperado.", e);

        }

        return listaRetorno;
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrArma bopObjetoOcorrArma, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT COUNT(DISTINCT BCO.NR_CHAMADO) "
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_ARMA BOOA ON BOOA.TIPO_BOP = BOO.TIPO_BOP AND BOOA.ID_OBJETO = BOO.ID_OBJETO AND BOOA.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_ARMA_DEON BOOAD ON BOOAD.TIPO_BOP = BOOA.TIPO_BOP AND BOOAD.ID_ARMA = BOOA.ID_ARMA AND BOOAD.NR_BOP = BOOA.NR_BOP AND BOOAD.ID_OBJETO = BOOA.ID_OBJETO "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto(), " BOO.CD_TIPO_MAT_APR = ? ");
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(), " BOO.ID_TIPO_ACAO = ? ");

            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getVwDeonTipoArma(), " BOOA.CD_TIPO_ARMA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getVwDeonMarcaObjeto(), " BOOA.CD_MARCA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopModeloMatApreendido(), " BOOA.CD_MODELO = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getNrCalibre(), " BOOAD.NR_CALIBRE LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getNrSerie(), " BOOAD.NR_SERIE LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getNrPatrimonio(), " BOOA.NR_PATRIMONIO LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsRegistroSinarm(), " BOOAD.DS_REGISTRO_SINARM LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsRegistroSigma(), " BOOAD.DS_REGISTRO_SIGMA LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma(), " BOOAD.CD_TIPO_ARMA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon(), " BOOAD.ID_CORONHA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getDsCapacidade(), " BOOAD.DS_CAPACIDADE = ? ");

        } else {

            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsObservacao(),
                    " BOOAD.DS_OBSERVACAO LIKE ? ");

        }

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getVwDeonTipoObjeto().getIdTipoObjeto());
            }

            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonTipoArma().getIdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonMarcaObjeto())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonMarcaObjeto().getIdMarca());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopModeloMatApreendido())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopModeloMatApreendido().getId().getCdModelo());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrCalibre() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrSerie() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getNrPatrimonio())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrArma.getNrPatrimonio() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSinarm() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSigma())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSigma() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getCdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon()
                        .getId());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsCapacidade());
            }

        } else {
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsObservacao() + "%");
            }
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_178: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrArma bopObjetoOcorrArma, int indexPaginacao,
            int rows, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OBJETO_OCORR_ARMA BOOA ON BOOA.TIPO_BOP = BOO.TIPO_BOP AND BOOA.ID_OBJETO = BOO.ID_OBJETO AND BOOA.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_OBJETO_OCORR_ARMA_DEON BOOAD ON BOOAD.TIPO_BOP = BOOA.TIPO_BOP AND BOOAD.ID_ARMA = BOOA.ID_ARMA AND BOOAD.NR_BOP = BOOA.NR_BOP AND BOOAD.ID_OBJETO = BOOA.ID_OBJETO "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP =  BO.NR_BOP AND BOA.TIPO_BOP =  BO.TIPO_BOP   ) "
                + " JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP =  BO.NR_BOP AND BOD.TIPO_BOP =  BO.TIPO_BOP )  "
                + " JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD  ON (  BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON )  ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {

            appendWhereClause(strbfQuery,
                    bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
            appendWhereClause(strbfQuery,
                    bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                    " BOO.ID_TIPO_ACAO = ? ");
            appendWhereClause(strbfQuery,
                    bopObjetoOcorrArma.getVwDeonTipoArma(),
                    " BOOA.CD_TIPO_ARMA = ? ");
            appendWhereClause(strbfQuery,
                    bopObjetoOcorrArma.getVwDeonMarcaObjeto(),
                    " BOOA.CD_MARCA = ? ");
            appendWhereClause(strbfQuery,
                    bopObjetoOcorrArma.getBopModeloMatApreendido(),
                    " BOOA.CD_MODELO = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre(),
                    " BOOAD.NR_CALIBRE LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie(),
                    " BOOAD.NR_SERIE LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma.getNrPatrimonio(),
                    " BOOA.NR_PATRIMONIO LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm(),
                    " BOOAD.DS_REGISTRO_SINARM LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSigma(),
                    " BOOAD.DS_REGISTRO_SIGMA LIKE ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma(),
                    " BOOAD.CD_TIPO_ARMA = ? ");
            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon(),
                    " BOOAD.ID_CORONHA = ? ");

            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade(),
                    " BOOAD.DS_CAPACIDADE = ? ");

        } else {

            appendWhereClause(strbfQuery, bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsObservacao(),
                    " BOOAD.DS_OBSERVACAO LIKE ? ");

        }

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (indexPaginacao + rows) + " ) WHERE rnum >" + indexPaginacao);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }

        if (bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon().getCdTipoArma() == 1) {
            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getVwDeonTipoObjeto().getIdTipoObjeto());
            }

            if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon())) {
                query.setParameter(parametros++, bopOcorrenciaObjeto
                        .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonTipoArma().getIdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getVwDeonMarcaObjeto())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getVwDeonMarcaObjeto().getIdMarca());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopModeloMatApreendido())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopModeloMatApreendido().getId().getCdModelo());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrCalibre())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrCalibre() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getNrSerie())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getNrSerie() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma.getNrPatrimonio())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrArma.getNrPatrimonio() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSinarm())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSinarm() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsRegistroSigma())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsRegistroSigma() + "%");
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getCdTipoArma())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getCdTipoArma());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getBopCoronhaArmaDeon()
                        .getId());
            }

            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon().getDsCapacidade())) {
                query.setParameter(parametros++, bopObjetoOcorrArma
                        .getBopObjetoOcorrArmaDeon().getDsCapacidade());
            }

        } else {
            if (this.isNotNullOrEmpty(bopObjetoOcorrArma
                    .getBopObjetoOcorrArmaDeon())) {
                query.setParameter(parametros++, "%"
                        + bopObjetoOcorrArma.getBopObjetoOcorrArmaDeon()
                                .getDsObservacao() + "%");
            }
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_179: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrBicicletaDeon bopObjetoOcorrBicicletaDeon,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;
        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT(DISTINCT BCO.NR_CHAMADO)"
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJ_OCORR_BICICLETA_DEON BOOBD ON BOOBD.TIPO_BOP = BOO.TIPO_BOP AND BOOBD.ID_OBJETO = BOO.ID_OBJETO AND BOOBD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND  BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getNmMarca(),
                " BOOBD.NM_MARCA LIKE ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getNmModelo(),
                " BOOBD.NM_MODELO LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getVwCor(),
                " BOOBD.CD_COR = ?  ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getCdNumeroSerie(),
                " BOOBD.CD_NUMERO_SERIE LIKE ? ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmMarca())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmMarca() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmModelo())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmModelo() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrBicicletaDeon
                    .getVwCor().getCdCor());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon
                .getCdNumeroSerie())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getCdNumeroSerie() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_180: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrBicicletaDeon bopObjetoOcorrBicicletaDeon,
            int indexPaginacao, int rows, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT DT_CRIACAO, NR_CHAMADO,"
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJ_OCORR_BICICLETA_DEON BOOBD ON BOOBD.TIPO_BOP = BOO.TIPO_BOP AND BOOBD.ID_OBJETO = BOO.ID_OBJETO AND BOOBD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND  BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getNmMarca(),
                " BOOBD.NM_MARCA LIKE ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getNmModelo(),
                " BOOBD.NM_MODELO LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrBicicletaDeon.getVwCor(),
                " BOOBD.CD_COR = ?  ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrBicicletaDeon.getCdNumeroSerie(),
                " BOOBD.CD_NUMERO_SERIE LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (indexPaginacao + rows) + " ) WHERE rnum >" + indexPaginacao);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmMarca())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmMarca() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getNmModelo())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getNmModelo() + "%");
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon.getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrBicicletaDeon
                    .getVwCor().getCdCor());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrBicicletaDeon
                .getCdNumeroSerie())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrBicicletaDeon.getCdNumeroSerie() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_181: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDinheiroDeon bopObjetoOcorrDinheiroDeon,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT(DISTINCT BCO.NR_CHAMADO) "
                + "FROM  BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJ_OCORR_DINHEIRO_DEON BOODD ON BOODD.TIPO_BOP = BOO.TIPO_BOP AND BOODD.ID_OBJETO = BOO.ID_OBJETO AND BOODD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrDinheiroDeon.getDsObservacao(),
                " BOODD.DS_OBSERVACAO LIKE ?  ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDinheiroDeon.getDsObservacao())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDinheiroDeon.getDsObservacao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_182: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDinheiroDeon bopObjetoOcorrDinheiroDeon,
            int indexPaginacao, int rows, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DT_CRIACAO, NR_CHAMADO,"
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM  BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJ_OCORR_DINHEIRO_DEON BOODD ON BOODD.TIPO_BOP = BOO.TIPO_BOP AND BOODD.ID_OBJETO = BOO.ID_OBJETO AND BOODD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery,
                bopObjetoOcorrDinheiroDeon.getDsObservacao(),
                " BOODD.DS_OBSERVACAO LIKE ?  ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (indexPaginacao + rows) + " ) WHERE rnum >" + indexPaginacao);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDinheiroDeon.getDsObservacao())) {
            query.setParameter(parametros++,
                    "%" + bopObjetoOcorrDinheiroDeon.getDsObservacao() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_183: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCountComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT(DISTINCT BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJ_OCORR_DOCUMENTO_DEON BOODD on BOODD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getBopTipoDocumento(),
                " BOODD.ID_TIPO_DOCUMENTO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDocumento.getNrDocumento(),
                " BOODD.NR_DOCUMENTO like ? ");
        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrDocumento.getNmTitularDoc(),
                " ( translate( BOODD.NM_TITULAR_DOC, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter(parameters++, bopObjetoOcorrDocumento
                    .getBopTipoDocumento().getIdTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_186: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrenciaComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDocumento bopObjetoOcorrDocumento,
            int indexPaginacao, int rows, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ROWNUM "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJ_OCORR_DOCUMENTO_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(strbfQuery,
                bopObjetoOcorrDocumento.getBopTipoDocumento(),
                " BOOCD.ID_TIPO_DOCUMENTO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDocumento.getNrDocumento(),
                " BOOCD.NR_DOCUMENTO like ? ");
        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrDocumento.getNmTitularDoc(),
                " ( translate( BOOCD.NM_TITULAR_DOC, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        strbfQuery.append(" order by  BCO.NR_CHAMADO desc ");

        Query query = this.em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getBopTipoDocumento())) {
            query.setParameter(parameters++, bopObjetoOcorrDocumento
                    .getBopTipoDocumento().getIdTipoDocumento());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNrDocumento())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrDocumento.getNrDocumento() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrDocumento.getNmTitularDoc())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrDocumento.getNmTitularDoc() + "%");
        }

        try {
            return query.setFirstResult(indexPaginacao).setMaxResults(rows)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_187: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDroga bopObjetoOcorrDroga, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT(DISTINCT BCO.NR_CHAMADO) "
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_DROGA BOOD ON BOOD.TIPO_BOP = BOO.TIPO_BOP AND BOOD.ID_OBJETO = BOO.ID_OBJETO AND BOOD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDroga.getDsObservacao(),
                " BOOD.DS_OBSERVACAO LIKE ? ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDroga.getDsObservacao())) {
            query.setParameter(parametros,
                    "%" + bopObjetoOcorrDroga.getDsObservacao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_188: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrDroga bopObjetoOcorrDroga, int indexPaginacao,
            int rows, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OBJETO_OCORR_DROGA BOOD ON BOOD.TIPO_BOP = BOO.TIPO_BOP AND BOOD.ID_OBJETO = BOO.ID_OBJETO AND BOOD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrDroga.getDsObservacao(),
                " BOOD.DS_OBSERVACAO LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (indexPaginacao + rows) + " ) WHERE rnum >" + indexPaginacao);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrDroga.getDsObservacao())) {
            query.setParameter(parametros,
                    "%" + bopObjetoOcorrDroga.getDsObservacao() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_189: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCountComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT(DISTINCT BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJETO_OCORR_CHEQUE_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCheque.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrConta(),
                " BOOCD.NR_CONTA like ? ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCheque
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_192: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrenciaComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCheque bopObjetoOcorrCheque, int indexPaginacao,
            int rows, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ROWNUM "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJETO_OCORR_CHEQUE_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCheque.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCheque.getNrConta(),
                " BOOCD.NR_CONTA like ? ");

        strbfQuery.append(" order by  BCO.NR_CHAMADO desc ");

        Query query = this.em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCheque
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCheque.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCheque.getNrConta() + "%");
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_193: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCountComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT(DISTINCT BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJETO_OCORR_CARTAO_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCartao.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrTipo(),
                " BOOCD.NR_TIPO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrConta(),
                " BOOCD.NR_CONTA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmBandeira(),
                " BOOCD.NM_BANDEIRA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrCartao(),
                " BOOCD.NR_CARTAO like ? ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_196: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrenciaComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrCartao bopObjetoOcorrCartao, int indexPaginacao,
            int rows, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ROWNUM  "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJETO_OCORR_CARTAO_DEON BOOCD on BOOCD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrCartao.getNmTitular(),
                " ( translate( BOOCD.NM_TITULAR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");

        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrTipo(),
                " BOOCD.NR_TIPO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getBopBancoDeon(),
                " BOOCD.CD_BANCO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrAgencia(),
                " BOOCD.NR_AGENCIA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrConta(),
                " BOOCD.NR_CONTA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNmBandeira(),
                " BOOCD.NM_BANDEIRA like ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrCartao.getNrCartao(),
                " BOOCD.NR_CARTAO like ? ");

        strbfQuery.append(" order by  BCO.NR_CHAMADO desc ");

        Query query = this.em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmTitular())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmTitular() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrTipo())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao.getNrTipo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getBopBancoDeon())) {
            query.setParameter(parameters++, bopObjetoOcorrCartao
                    .getBopBancoDeon().getCdBanco());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrAgencia())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrAgencia() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrConta())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrConta() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNmBandeira())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNmBandeira() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrCartao.getNrCartao())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrCartao.getNrCartao() + "%");
        }

        try {
            return query.setFirstResult(indexPaginacao).setMaxResults(rows)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_197: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrMunicaoDeon bopObjetoOcorrMunicaoDeon,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                "SELECT COUNT(DISTINCT BCO.NR_CHAMADO) "
                + "FROM  BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_MUNICAO_DEON BOOMD ON BOOMD.TIPO_BOP = BOO.TIPO_BOP AND BOOMD.ID_OBJETO = BOO.ID_OBJETO AND BOOMD.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    "  BOO.ID_TIPO_ACAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon(),
                    " BOOMD.CD_MARCA_MUNICAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma(),
                    " BOOMD.CD_CALIBRE = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao(),
                    " BOOMD.CD_TIPO_MUNICAO = ? ");
        }

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao());
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_198: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrMunicaoDeon bopObjetoOcorrMunicaoDeon,
            int indexPaginacao, int rows, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal) throws BusinessException {
        this.connector = null;
        Query query;
        int parametros = 1;
        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM  BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OBJETO_OCORR_MUNICAO_DEON BOOMD ON BOOMD.TIPO_BOP = BOO.TIPO_BOP AND BOOMD.ID_OBJETO = BOO.ID_OBJETO AND BOOMD.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    "  BOO.ID_TIPO_ACAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon(),
                    " BOOMD.CD_MARCA_MUNICAO = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma(),
                    " BOOMD.CD_CALIBRE = ? ");
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao(),
                    " BOOMD.CD_TIPO_MUNICAO = ? ");
        }

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (indexPaginacao + rows) + " ) WHERE rnum >" + indexPaginacao);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopMarcaMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopMarcaMunicaoDeon().getCdMarcaMunicaoDeon());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopCalibreArma() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopCalibreArma().getCdCalibreArma());
        }

        if (bopObjetoOcorrMunicaoDeon.getBopTipoMunicaoDeon() != null) {
            query.setParameter(parametros++, bopObjetoOcorrMunicaoDeon
                    .getBopTipoMunicaoDeon().getCdTipoMunicao());
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_199: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCountComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select COUNT(DISTINCT BC.NR_CHAMADO) "
                + " from BOP_CHAMADOS BC "
                + " join BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " join BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " join BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " join BOP_OBJ_OCORR_NOTA_FISCAL_DEON BOONFD on BOONFD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrNotaFiscal.getNmPortador(),
                " ( translate( BOONFD.NM_PORTADOR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNrCnpj(),
                " BOONFD.NR_CNPJ like ? ");

        Query query = this.em.createNativeQuery(strbfQuery.toString());

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_202: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrenciaComTranslate(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrNotaFiscal bopObjetoOcorrNotaFiscal,
            int indexPaginacao, int rows, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal) throws BusinessException {
        this.connector = null;

        StringBuffer strbfQuery = new StringBuffer(
                " select DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + " ROWNUM "
                + " FROM BOP_CHAMADOS BC "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO on BC.NR_CHAMADO = BCO.NR_CHAMADO "
                + " JOIN BOP_OCORRENCIA BO on (BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP) "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_OCORRENCIA_OBJETOS BOO on (BO.NR_BOP = BOO.NR_BOP AND BO.TIPO_BOP = BOO.TIPO_BOP) "
                + " JOIN BOP_OBJ_OCORR_NOTA_FISCAL_DEON BOONFD on BOONFD.ID_OBJETO = BOO.ID_OBJETO ");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");

        appendWhereClause(
                strbfQuery,
                bopObjetoOcorrNotaFiscal.getNmPortador(),
                " ( translate( BOONFD.NM_PORTADOR, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') LIKE translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) ");
        appendWhereClause(strbfQuery, bopObjetoOcorrNotaFiscal.getNrCnpj(),
                " BOONFD.NR_CNPJ like ? ");

        strbfQuery.append(" order by BCO.NR_CHAMADO desc ");

        Query query = this.em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        int parameters = 1;

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parameters++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parameters++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parameters++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parameters++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parameters++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNmPortador())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrNotaFiscal.getNmPortador() + "%");
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrNotaFiscal.getNrCnpj())) {
            query.setParameter(parameters++,
                    "%" + bopObjetoOcorrNotaFiscal.getNrCnpj() + "%");
        }

        try {
            return (List<ConsultaOcorrenciaTransient>) query
                    .setFirstResult(indexPaginacao).setMaxResults(rows)
                    .getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_203: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaOcorrenciaCount(BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT COUNT(DISTINCT BO.DT_CRIACAO) "
                + "FROM BOP_OCORRENCIA_OBJETOS BOO JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "JOIN  BOP_OBJETO_OCORR_VEICULO BOOV ON BOOV.TIPO_BOP = BOO.TIPO_BOP AND BOOV.ID_OBJETO = BOO.ID_OBJETO AND BOOV.NR_BOP = BOO.NR_BOP "
                + "JOIN BOP_OBJETO_OCORR_VEICULO_DEON BOOVD ON BOOVD.TIPO_BOP = BOOV.TIPO_BOP AND BOOVD.NR_BOP = BOOV.NR_BOP AND BOOVD.ID_OBJETO = BOOV.ID_OBJETO AND BOOVD.ID_VEICULO = BOOV.ID_VEICULO "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }
        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrPlaca(),
                "  BOOV.NR_PLACA LIKE ? ");
        if (bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOV.CD_MARCA = ? ");
        }
        if (bopObjetoOcorrVeiculo.getBopModeloMatApreendido() != null
                && bopObjetoOcorrVeiculo.getBopModeloMatApreendido().getId() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo(),
                    " BOOV.CD_MODELO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrAno(),
                " BOOV.NR_ANO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor(),
                " BOOVD.CD_COR = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrChassi(),
                " BOOV.NR_CHASSI LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrRenavam(),
                " BOOV.NR_RENAVAM LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlaca())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlaca()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopModeloMatApreendido())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrAno())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo.getNrAno());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopObjetoOcorrVeiculoDeon().getVwCor().getCdCor());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrChassi())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrChassi()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrRenavam())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrRenavam()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_204: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaOcorrencia(
            BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrVeiculo bopObjetoOcorrVeiculo, int inicio, int fim,
            Date dataInicial, Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        this.connector = null;

        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, NR_BOP, TIPO_BOP, "
                + " ROWNUM FROM ( "
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, a.NR_BOP, a.TIPO_BOP, "
                + " ROWNUM rnum FROM ( "
                + " SELECT DISTINCT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + " JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN  BOP_OBJETO_OCORR_VEICULO BOOV ON BOOV.TIPO_BOP = BOO.TIPO_BOP AND BOOV.ID_OBJETO = BOO.ID_OBJETO AND BOOV.NR_BOP = BOO.NR_BOP "
                + " JOIN BOP_OBJETO_OCORR_VEICULO_DEON BOOVD ON BOOVD.TIPO_BOP = BOOV.TIPO_BOP AND BOOVD.NR_BOP = BOOV.NR_BOP AND BOOVD.ID_OBJETO = BOOV.ID_OBJETO AND BOOVD.ID_VEICULO = BOOV.ID_VEICULO "
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS')  >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS')  <= ?");
        }

        if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto(),
                    " BOO.CD_TIPO_MAT_APR = ? ");
        }
        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            appendWhereClause(strbfQuery, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto(),
                    " BOO.ID_TIPO_ACAO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrPlaca(),
                "  BOOV.NR_PLACA LIKE ? ");
        if (bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca(), " BOOV.CD_MARCA = ? ");
        }
        if (bopObjetoOcorrVeiculo.getBopModeloMatApreendido() != null
                && bopObjetoOcorrVeiculo.getBopModeloMatApreendido().getId() != null) {
            appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo(),
                    " BOOV.CD_MODELO = ? ");
        }
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrAno(),
                " BOOV.NR_ANO = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor(),
                " BOOVD.CD_COR = ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrChassi(),
                " BOOV.NR_CHASSI LIKE ? ");
        appendWhereClause(strbfQuery, bopObjetoOcorrVeiculo.getNrRenavam(),
                " BOOV.NR_RENAVAM LIKE ? ");

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC)  a WHERE ROWNUM <= "
                + (inicio + fim) + " ) WHERE rnum >" + inicio);
        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaTransient.class);

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getVwDeonTipoObjeto().getIdTipoObjeto());
        }
        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto
                .getBopTipoAcaoObjetoDeon())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrPlaca())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrPlaca()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getVwDeonMarcaObjeto())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getVwDeonMarcaObjeto().getIdMarca());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopModeloMatApreendido())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopModeloMatApreendido().getId().getCdModelo());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrAno())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo.getNrAno());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo
                .getBopObjetoOcorrVeiculoDeon().getVwCor())) {
            query.setParameter(parametros++, bopObjetoOcorrVeiculo
                    .getBopObjetoOcorrVeiculoDeon().getVwCor().getCdCor());
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrChassi())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrChassi()));
        }
        if (this.isNotNullOrEmpty(bopObjetoOcorrVeiculo.getNrRenavam())) {
            query.setParameter(parametros++,
                    this.montarLike(bopObjetoOcorrVeiculo.getNrRenavam()));
        }

        try {
            List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient = query
                    .getResultList();

            return listaConsultaOcorrenciaTransient;
        } catch (Exception e) {
            throw new BusinessException("012_205: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<ConsultaOcorrenciaTransient> getListaConsultaOcorrenciaTransient(
            OcorrenciaTransiente ocorrenciaTransient, int inicio, int fim,
            Date horaInicial, Date horaFinal, Date dataInicial, Date dataFinal)
            throws BusinessException {
        Query query = null;
        int parametros = 1;

        StringBuffer queryString = new StringBuffer(
                "SELECT DT_CRIACAO, NR_CHAMADO, "
                + " DS_INCIDENTE, ID_INCIDENTE_PAI, TP_INCIDENTE, "
                + " ROWNUM, DS_UNID_POLICIAL  FROM ("
                + " SELECT /*+ FIRST_ROWS */ a.DT_CRIACAO, a.NR_CHAMADO, "
                + " a.DS_INCIDENTE, a.ID_INCIDENTE_PAI, a.TP_INCIDENTE, "
                + " ROWNUM rnum, a.DS_UNID_POLICIAL FROM ( "
                + " SELECT BO.DT_CRIACAO, BCO.NR_CHAMADO, "
                + " BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, "
                + " DECODE( BCO.TIPO_BOP, 'S', BUP_BOA.DS_UNID_POLICIAL,  BUP.DS_UNID_POLICIAL) AS DS_UNID_POLICIAL "
                + " FROM BOP_OCORRENCIA BO "
                + " JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE"
                + " JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP AND BO.TIPO_BOP = BCO.TIPO_BOP "
                + " JOIN BOP_UNIDADE_POLICIAL BUP ON BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL AND BUP.CD_AGENCIA = BO.CD_AGENCIA "
                + " JOIN BOP_OCORRENCIA_AGENCIA BOA ON BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP "
                + " JOIN BOP_UNIDADE_POLICIAL BUP_BOA ON BUP_BOA.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL AND BUP_BOA.CD_AGENCIA = BOA.CD_AGENCIA "
                + "	JOIN ");

        if (dataInicial != null) {
            this.appendWhereClause(queryString, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(queryString, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            this.appendWhereClause(queryString, horaInicialString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  >= ?");
        }
        if (horaFinal != null) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            this.appendWhereClause(queryString, horaFinalString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  <= ?");
        }

        this.appendWhereClause(queryString, " BO.TIPO_BOP <> 'R' ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_AGENCIA = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_UNID_POLICIAL = ? ");
        this.appendWhereClause(queryString, ocorrenciaTransient.getNrChamado(),
                "BCO.NR_CHAMADO = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopIncidente(),
                "BO.TP_INCIDENTE_PRINCIPAL = ? ");

        this.appendWhereClause(
                queryString,
                ocorrenciaTransient.getNmEnvolvido(),
                "EXISTS (SELECT 1 "
                + "FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                + "WHERE BO.NR_BOP = BEO.NR_BOP "
                + "AND BO.TIPO_BOP = BEO.TIPO_BOP "
                + "AND UPPER(translate( BEO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu'))  like UPPER( translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) )");

        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaIni(),
                " ( BO.DT_CRIACAO >= ? ) ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaFim(),
                " ( BO.DT_CRIACAO <= ? ) ");

        queryString.append(" ORDER BY BCO.NR_CHAMADO DESC) a WHERE ROWNUM <= "
                + (inicio + fim) + " ) WHERE rnum >" + inicio);

        query = em.createNativeQuery(queryString.toString(),
                ConsultaOcorrenciaObjTransient.class);

        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdAgencia());
        }
        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdUnidPolicial());
        }
        if (ocorrenciaTransient.getNrChamado() != null) {
            query.setParameter(parametros++, ocorrenciaTransient.getNrChamado());
        }
        if (ocorrenciaTransient.getBopIncidente() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopIncidente().getTpIncidente());
        }
        if (ocorrenciaTransient.getNmEnvolvido() != null) {
            query.setParameter(
                    parametros++,
                    ocorrenciaTransient.isCheckNmEnvolvido() ? this
                    .montarLike(ocorrenciaTransient.getNmEnvolvido())
                    : ocorrenciaTransient.getNmEnvolvido());
        }
        if (ocorrenciaTransient.getDtOcorrenciaIni() != null) {
            query.setParameter(parametros++,
                    ocorrenciaTransient.getDtOcorrenciaIni());
        }
        if (ocorrenciaTransient.getDtOcorrenciaFim() != null) {
            query.setParameter(parametros++,
                    Util.setFimDoDia(ocorrenciaTransient.getDtOcorrenciaFim()));
        }

        try {
            List<ConsultaOcorrenciaTransient> listaConsultaOcorrenciaTransient = query
                    .getResultList();

            return listaConsultaOcorrenciaTransient;
        } catch (Exception e) {
            throw new BusinessException("012_220: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public int getListaConsultaOcorrenciaTransientCount(
            OcorrenciaTransiente ocorrenciaTransient, Date dataInicial,
            Date dataFinal, Date horaInicial, Date horaFinal)
            throws BusinessException {
        Query query = null;
        int parametros = 1;

        StringBuffer queryString = new StringBuffer(
                " SELECT COUNT(1) FROM BOP_OCORRENCIA BO "
                + "JOIN BOP_CHAMADO_OCORRENCIA BCO ON BO.NR_BOP = BCO.NR_BOP "
                + "AND BO.TIPO_BOP = BCO.TIPO_BOP "
                + "JOIN BOP_UNIDADE_POLICIAL BUP ON BUP.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL "
                + "AND BUP.CD_AGENCIA = BO.CD_AGENCIA "
                + "JOIN BOP_OCORRENCIA_AGENCIA BOA ON BOA.NR_BOP = BO.NR_BOP "
                + "AND BOA.TIPO_BOP = BO.TIPO_BOP "
                + "JOIN BOP_UNIDADE_POLICIAL BUP_BOA ON BUP_BOA.CD_UNID_POLICIAL = BOA.CD_UNID_POLICIAL "
                + "AND BUP_BOA.CD_AGENCIA = BOA.CD_AGENCIA ");

        if (dataInicial != null) {
            this.appendWhereClause(queryString, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(queryString, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            this.appendWhereClause(queryString, horaInicialString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  >= ?");
        }
        if (horaFinal != null) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            this.appendWhereClause(queryString, horaFinalString,
                    " TO_CHAR(DT_FATO,'HH24:MI:SS')  <= ?");
        }

        this.appendWhereClause(queryString, " BO.TIPO_BOP <> 'R' ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_AGENCIA = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopUnidadePolicial(),
                "BO.CD_UNID_POLICIAL = ? ");
        this.appendWhereClause(queryString, ocorrenciaTransient.getNrChamado(),
                "BCO.NR_CHAMADO = ? ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getBopIncidente(),
                "BO.TP_INCIDENTE_PRINCIPAL = ? ");
        this.appendWhereClause(
                queryString,
                ocorrenciaTransient.getNmEnvolvido(),
                "EXISTS (SELECT 1 "
                + "FROM BOP_ENVOLVIDOS_OCORRENCIA BEO "
                + "WHERE BO.NR_BOP = BEO.NR_BOP "
                + "AND BO.TIPO_BOP = BEO.TIPO_BOP "
                + "AND UPPER(translate( BEO.NM_COMPL_ENVOL, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü', 'ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu'))  like UPPER(translate( ?, 'ÁÇÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕËÜáçéíóúàèìòùâêîôûãõëü','ACEIOUAEIOUAEIOUAOEUaceiouaeiouaeiouaoeu') ) )");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaIni(),
                " ( TRUNC( BO.DT_CRIACAO ) >= TRUNC( ? ) ) ");
        this.appendWhereClause(queryString,
                ocorrenciaTransient.getDtOcorrenciaFim(),
                " ( TRUNC( BO.DT_CRIACAO ) <= TRUNC( ? ) ) ");

        query = em.createNativeQuery(queryString.toString());

        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdAgencia());
        }
        if (ocorrenciaTransient.getBopUnidadePolicial() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopUnidadePolicial().getId().getCdUnidPolicial());
        }
        if (ocorrenciaTransient.getNrChamado() != null) {
            query.setParameter(parametros++, ocorrenciaTransient.getNrChamado());
        }
        if (ocorrenciaTransient.getBopIncidente() != null) {
            query.setParameter(parametros++, ocorrenciaTransient
                    .getBopIncidente().getTpIncidente());
        }
        if (ocorrenciaTransient.getNmEnvolvido() != null) {
            query.setParameter(
                    parametros++,
                    ocorrenciaTransient.isCheckNmEnvolvido() ? this
                    .montarLike(ocorrenciaTransient.getNmEnvolvido())
                    : ocorrenciaTransient.getNmEnvolvido());
        }
        if (ocorrenciaTransient.getDtOcorrenciaIni() != null) {
            query.setParameter(parametros++,
                    ocorrenciaTransient.getDtOcorrenciaIni());
        }
        if (ocorrenciaTransient.getDtOcorrenciaFim() != null) {
            query.setParameter(parametros++,
                    Util.setFimDoDia(ocorrenciaTransient.getDtOcorrenciaFim()));
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (NoResultException e) {
            return 0;
        } catch (NumberFormatException e) {
            throw new BusinessException("012_221: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public boolean tentativaAcessoMenorTrintaMinutos(Date ultimaAtualizacao) throws BusinessException {

        try {

            Date agora = new Date();

            long DURACAO = MILLISECONDS.convert(30, MINUTES);

            long TEMPO_TRANSCORRIDO = agora.getTime() - ultimaAtualizacao.getTime();

            return TEMPO_TRANSCORRIDO <= DURACAO;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_402: Ocorreu um erro inesperado.", e);
        }

    }

    public List<BopOcorrenciaAgencia> getOcorrenciaAgenciaUltAtualizacao(long nrChamado, long unidade) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        try {

            sql.append(" SELECT * FROM BOP_OCORRENCIA_AGENCIA a, BOP_OCORRENCIA_AGENCIA_DEON b ");
            sql.append(" WHERE NR_CHAMADO = ? ");
            sql.append(" AND a.CD_OCORRENCIA_AGENCIA = b.CD_OCORRENCIA_AGENCIA ");
            sql.append(" AND ( a.CD_UNID_POLICIAL <> ?) ");
            sql.append(" AND b.DT_ULT_ATUALIZACAO IS NOT NULL ");

            Query query = em.createNativeQuery(sql.toString(), BopOcorrenciaAgencia.class);

            query.setParameter(1, nrChamado);
            query.setParameter(2, unidade);

            List<BopOcorrenciaAgencia> resul = query.getResultList();

            return resul;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_401: Ocorreu um erro inesperado.", e);
        }
    }

    public String getEmailUnidade(Long emailUnidade) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        try {
            sql.append(" SELECT DEON_AGENCIA_EMAIL.DS_EMAIL FROM DEON_AGENCIA_EMAIL WHERE DEON_AGENCIA_EMAIL.CD_AGENCIA  = ? ");

            Query query = em.createNativeQuery(sql.toString());

            query.setParameter(1, emailUnidade);

            String result = (String) query.getSingleResult();
            return result;

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_400: Ocorreu um erro inesperado.", e);
        }
    }

    public List<ConsultaImeiTransiente> getOcorrenciaImeiRelacionado(String dsImei, String dsImei2, String dsImei3, String dsImei4, int nrBop) throws BusinessException {

        List<ConsultaImeiTransiente> resul = new ArrayList<ConsultaImeiTransiente>();

        try {

            StringBuilder sql = new StringBuilder();

            sql.append(" SELECT BOP_CHAMADO_OCORRENCIA.NR_CHAMADO, BOP_CHAMADO_OCORRENCIA.NR_BOP, BOP_CHAMADO_OCORRENCIA.TIPO_BOP, ");
            sql.append(" BOP_OCORRENCIA.DT_FATO, ");
            sql.append(" PA_INCIDENTE.GET_INCIDENTE(BOP_OCORRENCIA.TP_INCIDENTE_PRINCIPAL) AS DS_INCIDENTE, ");
            sql.append(" BOP_TIPO_ACAO_OBJETO_DEON.DS_TIPO_ACAO_OBJETO ");
            sql.append(" FROM BOP_OBJ_OCOR_ELETRO_CHIPS_DEON ");
            sql.append(" JOIN BOP_OBJETO_OCORR_ELETRO_DEON ON ( BOP_OBJETO_OCORR_ELETRO_DEON.ID_ELETRO_DEON = BOP_OBJ_OCOR_ELETRO_CHIPS_DEON.ID_ELETRO_DEON ) ");
            sql.append(" JOIN BOP_OBJETO_OCORR_ELETRO ON ( BOP_OBJETO_OCORR_ELETRO_DEON.ID_ELETRO = BOP_OBJETO_OCORR_ELETRO.ID_ELETRO AND ");
            sql.append(" BOP_OBJETO_OCORR_ELETRO_DEON.ID_OBJETO = BOP_OBJETO_OCORR_ELETRO.ID_OBJETO ) ");
            sql.append(" JOIN BOP_OCORRENCIA_OBJETOS ON ( BOP_OCORRENCIA_OBJETOS.NR_BOP = BOP_OBJETO_OCORR_ELETRO.NR_BOP AND ");
            sql.append(" BOP_OCORRENCIA_OBJETOS.TIPO_BOP = BOP_OBJETO_OCORR_ELETRO.TIPO_BOP AND ");
            sql.append(" BOP_OCORRENCIA_OBJETOS.ID_OBJETO  = BOP_OBJETO_OCORR_ELETRO.ID_OBJETO ) ");
            sql.append(" JOIN BOP_CHAMADO_OCORRENCIA ON ( BOP_CHAMADO_OCORRENCIA.NR_BOP = BOP_OBJETO_OCORR_ELETRO.NR_BOP AND ");
            sql.append(" BOP_CHAMADO_OCORRENCIA.TIPO_BOP = BOP_OBJETO_OCORR_ELETRO.TIPO_BOP ) ");
            sql.append(" JOIN BOP_OCORRENCIA ON ( BOP_CHAMADO_OCORRENCIA.NR_BOP = BOP_OCORRENCIA.NR_BOP AND ");
            sql.append(" BOP_CHAMADO_OCORRENCIA.TIPO_BOP = BOP_OCORRENCIA.TIPO_BOP ) ");
            sql.append(" JOIN BOP_TIPO_ACAO_OBJETO_DEON ON ( BOP_TIPO_ACAO_OBJETO_DEON.ID_TIPO_ACAO_OBJETO = BOP_OCORRENCIA_OBJETOS.ID_TIPO_ACAO ) ");
            sql.append(" WHERE BOP_OBJETO_OCORR_ELETRO.NR_BOP NOT IN (?) AND BOP_OBJ_OCOR_ELETRO_CHIPS_DEON.DS_IMEI IN (? ");

            if (dsImei2 != null) {
                sql.append(",? ");
            }
            if (dsImei3 != null) {
                sql.append(",? ");
            }
            if (dsImei4 != null) {
                sql.append(",? ");
            }

            sql.append(" ) ");
            sql.append(" AND BOP_OBJ_OCOR_ELETRO_CHIPS_DEON.DS_IMEI IS NOT NULL ");

            Query query = em.createNativeQuery(sql.toString(), ConsultaImeiTransiente.class);

            query.setParameter(1, nrBop);
            query.setParameter(2, dsImei);

            if (dsImei2 != null) {
                query.setParameter(3, dsImei2);
            }
            if (dsImei3 != null) {
                query.setParameter(4, dsImei3);
            }
            if (dsImei4 != null) {
                query.setParameter(5, dsImei4);
            }

            resul = query.getResultList();
            return resul;

        } catch (Exception e) {
            throw new BusinessException("012_396: Ocorreu um erro inesperado.", e);
        }

    }

    public String getAlertaTextoParametroFlCriminal(String texto) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        try {
            sql.append(" SELECT PA_PARAMETROS.GET_PARAMETRO( ? ) AS PARAMETRO FROM DUAL ");

            Query query = em.createNativeQuery(sql.toString());

            query.setParameter(1, texto);

            String result = (String) query.getSingleResult();

            return result;

        } catch (Exception e) {
            throw new BusinessException("012_403: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public String getAlertaCorParametroFlCriminal(String cor) throws BusinessException {

        StringBuilder builder = new StringBuilder();

        try {

            builder.append(" SELECT PA_PARAMETROS.GET_PARAMETRO( ? ) AS PARAMETRO FROM DUAL ");

            Query query = em.createNativeQuery(builder.toString());

            query.setParameter(1, cor);

            String result = (String) query.getSingleResult();
            return result;

        } catch (Exception e) {
            throw new BusinessException("012_404: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    public void calculaMonta(Long nrBop, String tipoBop) throws BusinessException {

        StringBuilder builder = new StringBuilder();

        try {

            builder.append(" BEGIN PO_CALCULA_MONTA (?, ?); END; ");

            Query query = em.createNativeQuery(builder.toString());

            query.setParameter(1, nrBop);
            query.setParameter(2, tipoBop);

            query.executeUpdate();

        } catch (Exception e) {
            throw new BusinessException("012_405: Ocorreu um erro inesperado.", e);

        }
    }

    public int verificarDenuncia(Long nrChamado) throws BusinessException {

        StringBuilder builder = new StringBuilder();

        try {

            builder.append(" SELECT COUNT(1) FROM BOP_DENUNCIA WHERE BOP_DENUNCIA.ID_DENUNCIA = ? ");

            Query query = em.createNativeQuery(builder.toString());

            query.setParameter(1, nrChamado);

            int result = Integer.parseInt(query.getSingleResult().toString());

            return result;

        } catch (Exception e) {
            throw new BusinessException("012_406: Ocorreu um erro inesperado.", e);

        }

    }

    public void geraRespotaDifusao(Long idDenuncia, Long unidadePolicial, String usuarioLogado, Long nrChamado) throws BusinessException {

        Query query = em
                .createNativeQuery("BEGIN PO_INCLUI_RESPOSTA_DIFUSAO( ? , ? , ? , ? ); END;");

        query.setParameter(1, idDenuncia);
        query.setParameter(2, unidadePolicial);
        query.setParameter(3, usuarioLogado);
        query.setParameter(4, nrChamado);

        try {
            query.executeUpdate();
        } catch (Exception e) {
            throw new BusinessException("012_407: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public BopOcorrDenunciaRelacionada mergeBopOcorrDenunciaRelacionada(
            BopOcorrDenunciaRelacionada bopOcorrDenunciaRelacionada) throws BusinessException {

        try {
            bopOcorrDenunciaRelacionada = em.merge(bopOcorrDenunciaRelacionada);

            em.flush();

            em.refresh(bopOcorrDenunciaRelacionada);

            return bopOcorrDenunciaRelacionada;
        } catch (Exception e) {
            throw new BusinessException("012_408: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public void removerBopOcorrDenunciaRelacionada(BopOcorrDenunciaRelacionada bopOcorrDenunciaRelacionada)
            throws BusinessException {
        if (bopOcorrDenunciaRelacionada != null) {
            try {
                BopOcorrDenunciaRelacionada bopOcorrDenunciaRelacionadaRemover = em
                        .getReference(BopOcorrDenunciaRelacionada.class,
                                bopOcorrDenunciaRelacionada.getId());
                em.remove(bopOcorrDenunciaRelacionadaRemover);
            } catch (Exception e) {
                throw new BusinessException("012_409: "
                        + "Ocorreu um erro inesperado. ", e);
            }
        }
    }

    @Override
    public List<BopOcorrDenunciaRelacionada> getListaBopOcorrDenunciaRelacionada(String nrChamado) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT  BOP_OCORR_DENUNCIA_RELACIONADA.* ");
        sql.append("  FROM BOP_OCORR_DENUNCIA_RELACIONADA , BOP_OCORRENCIA_AGENCIA ");
        sql.append("  WHERE NR_CHAMADO = ? ");
        sql.append("  AND BOP_OCORRENCIA_AGENCIA.NR_BOP = BOP_OCORR_DENUNCIA_RELACIONADA.NR_BOP ");

        Query query = em.createNativeQuery(sql.toString(),
                BopOcorrDenunciaRelacionada.class);

        query.setParameter(1, nrChamado);

        try {
            return (List<BopOcorrDenunciaRelacionada>) query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_410: " + "Ocorreu um erro inesperado. ", e);

        }

    }

    @Override
    public Long verificaRelacionamentoDenunciaAnonima(int nrBop, String TipoBop) throws BusinessException {

        StringBuilder builder = new StringBuilder();

        try {

            builder.append(" SELECT COUNT(1) FROM BOP_OCORR_DENUNCIA_RELACIONADA WHERE NR_BOP = ? AND TIPO_BOP = ? ");

            Query query = em.createNativeQuery(builder.toString());

            query.setParameter(1, nrBop);
            query.setParameter(2, TipoBop);

            BigDecimal result = (BigDecimal) query.getSingleResult();

            return result.longValue();

        } catch (Exception e) {
            throw new BusinessException("012_411: Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public BopLogOcorrEmailEnvolvido persistLogOcorrEmailEnvolvido(BopLogOcorrEmailEnvolvido bopLogOcorrEmailEnvolvido)
            throws BusinessException {

        try {
            em.persist(bopLogOcorrEmailEnvolvido);

            em.flush();
            em.refresh(bopLogOcorrEmailEnvolvido);

            return bopLogOcorrEmailEnvolvido;
        } catch (Exception e) {
            throw new BusinessException("012_412: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public BopEnvolvidoTipoEnvolvido getEnvolvidoTipEnvol(BopEnvolvidoTipoEnvolvido envolvidoTipoEnvolvido) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT * FROM BOP_ENVOLVIDO_TIPO_ENVOL WHERE  ID_ENVOLVIDO_DEON = ?  AND CD_AGENCIA = ? AND CD_UNID_POLICIAL = ? ");

        Query query = em.createNativeQuery(sql.toString(), BopEnvolvidoTipoEnvolvido.class);

        query.setParameter(1, envolvidoTipoEnvolvido.getBopEnvolvidoOcorrenciaDeon().getIdEnvolvidoDeon());
        query.setParameter(2, envolvidoTipoEnvolvido.getBopUnidadePolicial().getId().getCdAgencia());
        query.setParameter(3, envolvidoTipoEnvolvido.getBopUnidadePolicial().getId().getCdUnidPolicial());

        try {
            return (BopEnvolvidoTipoEnvolvido) query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_413: " + "Ocorreu um erro inesperado. ", e);

        }

    }

    @Override
    public List<String> getImeisOcorrencia(int nrBop, String TipoBop, Long idEletroDeon) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT BOP_OBJ_OCOR_ELETRO_CHIPS_DEON.DS_IMEI  ");
        sql.append("  FROM BOP_OBJ_OCOR_ELETRO_CHIPS_DEON  ");
        sql.append("  JOIN BOP_OBJETO_OCORR_ELETRO_DEON ON ( BOP_OBJETO_OCORR_ELETRO_DEON.ID_ELETRO_DEON = BOP_OBJ_OCOR_ELETRO_CHIPS_DEON.ID_ELETRO_DEON )  ");
        sql.append("  WHERE BOP_OBJETO_OCORR_ELETRO_DEON.NR_BOP    =  ?  ");
        sql.append("  AND BOP_OBJETO_OCORR_ELETRO_DEON.TIPO_BOP = ? AND BOP_OBJETO_OCORR_ELETRO_DEON.ID_ELETRO_DEON NOT IN (?)  ");
        sql.append("  AND BOP_OBJ_OCOR_ELETRO_CHIPS_DEON.DS_IMEI IS NOT NULL  ");

        Query query = em.createNativeQuery(sql.toString());

        query.setParameter(1, nrBop);
        query.setParameter(2, TipoBop);
        query.setParameter(3, idEletroDeon);
        List<String> ime;
        ime = query.getResultList();
        try {
            return ime;
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_414: " + "Ocorreu um erro inesperado. ", e);

        }

    }

    @Override
    public int getListaOcorrenciaPlacaVeicularCount(
            BopOcorrenciaObjeto bopOcorrenciaObjeto, String nrPlaca,
            BopObjetoOcorrPlacaVeicularDeon bopObjetoOcorrPlacaVeicularDeon, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaPlacaVeicular(nrPlaca, bopOcorrenciaObjeto, bopObjetoOcorrPlacaVeicularDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.contarQuery(strbfQuery);

        query = em.createNativeQuery(strbfQuery.toString());

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//		if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrPlacaVeicularDeon != null) {
            if (this.isNotNullOrEmpty(bopObjetoOcorrPlacaVeicularDeon.getDsObservacao())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrPlacaVeicularDeon.getDsObservacao() + "%");
            }
        }
        if (nrPlaca != null) {
            query.setParameter(parametros++, nrPlaca);
        }

        try {
            BigDecimal qtd = (BigDecimal) query.getSingleResult();

            return qtd.intValue();
        } catch (Exception e) {
            throw new BusinessException("012_415: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    private StringBuffer getQueryOcorrenciaPlacaVeicular(
            String nrPlaca, BopOcorrenciaObjeto bopOcorrenciaObjeto,
            BopObjetoOcorrPlacaVeicularDeon bopObjetoOcorrPlacaVeicularDeon, Date dataInicial, Date dataFinal,
            Date horaInicial, Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado, BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) {

        StringBuffer strbfQuery = new StringBuffer(
                " SELECT DISTINCT  BOOPV.ID_PLACA_VEICULAR ID_OBJETO, BO.DT_FATO , BO.DT_CRIACAO, BCO.NR_CHAMADO,  "
                + "  BOI.DS_INCIDENTE, BOI.ID_INCIDENTE_PAI, BOI.TP_INCIDENTE, BO.NR_BOP, BO.TIPO_BOP, "
                + "  ( SELECT BOP_AGENCIA.DS_AGENCIA FROM BOP_AGENCIA WHERE BOP_AGENCIA.CD_AGENCIA = BO.CD_AGENCIA ) AS AGENCIA_RECEBIMENTO, "
                + "  ( SELECT BOP_UNIDADE_POLICIAL.DS_UNID_POLICIAL FROM BOP_UNIDADE_POLICIAL WHERE BOP_UNIDADE_POLICIAL.CD_UNID_POLICIAL = BO.CD_UNID_POLICIAL ) AS UNIDADE_RECEBIMENTO, "
                + "  FU_CONCATENA_AGENCIA(BO.NR_BOP, BO.TIPO_BOP) AGENCIA_REGISTRO, "
                + "  FU_CONCATENA_UNIDADE_POLICIAL(BO.NR_BOP, BO.TIPO_BOP)  "
                + "  UNIDADE_REGISTRO, BEOD.CD_UF, BMG.NM_MUNICIPIO AS DS_CIDADE, BBG.NM_BAIRRO AS DS_BAIRRO, BTAOD.DS_TIPO_ACAO_OBJETO, BTMA.DS_TIPO_MAT_APR AS TIPO_OBJETO, "
                + "  NULL  DS_LOGRADOURO, "
                + "  NULL  NR_NUMERO, "
                + "  NULL DS_COMPLEMENTO, "
                + "  NULL DS_TIPO_LOCAL, "
                + "  NULL DS_MARCA, "
                + "  NULL  NM_MODELO, "
                + "  NULL DS_OBSERVACAO, "
                + "  NULL TIPO, "
                + "  NULL NR_ANO, "
                + "  NULL  CD_COR, "
                + "  NULL  NR_PLACA, "
                + "  NULL  NR_RENAVAM, "
                + "  NULL NR_CHASS, "
                + "  NULL NR_CALIBRE, "
                + "  NULL NR_SERIE, "
                + "  NULL DS_TIPO_FABRICACAO, "
                + "  NULL ESPECIE, "
                + "  NULL FL_SERIE_ILEGIVEL, "
                + "  NULL FL_SERIE_RASPADO,  "
                + "  NULL NR_PLACA_APARENTE_FALSA "
                + " FROM BOP_OCORRENCIA_OBJETOS BOO "
                + "   JOIN BOP_OCORRENCIA BO ON BOO.TIPO_BOP = BO.TIPO_BOP AND BOO.NR_BOP = BO.NR_BOP "
                + "   JOIN BOP_INCIDENTE BOI ON BO.TP_INCIDENTE_PRINCIPAL = BOI.TP_INCIDENTE "
                + "   JOIN BOP_OBJETO_OCOR_PLACA_VEICULAR BOOPV ON BOOPV.TIPO_BOP = BOO.TIPO_BOP AND BOOPV.ID_OBJETO = BOO.ID_OBJETO AND BOOPV.NR_BOP = BOO.NR_BOP "
                + "   JOIN BOP_CHAMADO_OCORRENCIA BCO ON BCO.TIPO_BOP = BO.TIPO_BOP AND BCO.NR_BOP = BO.NR_BOP "
                + "   JOIN BOP_OCORRENCIA_AGENCIA BOA ON ( BOA.NR_BOP = BO.NR_BOP AND BOA.TIPO_BOP = BO.TIPO_BOP ) "
                + "   JOIN BOP_OCORRENCIA_AGENCIA_DEON BOAD ON ( BOA.CD_OCORRENCIA_AGENCIA =  BOAD.CD_OCORRENCIA_AGENCIA)     "
                + "   JOIN BOP_OCORRENCIA_DEON BOD ON ( BOD.NR_BOP = BO.NR_BOP AND BOD.TIPO_BOP = BO.TIPO_BOP ) "
                + "   JOIN BOP_ENDERECO_OCORRENCIA_DEON BEOD ON ( BEOD.ID_ENDERECO_OCORRENCIA_DEON = BOD.ID_ENDERECO_OCORRENCIA_DEON ) "
                + "   JOIN BOP_TIPO_ACAO_OBJETO_DEON BTAOD ON ( BTAOD.ID_TIPO_ACAO_OBJETO = BOO.ID_TIPO_ACAO ) "
                + "   JOIN BOP_MUNICIPIOS_GERAL BMG ON ( BMG.CD_UF = BEOD.CD_UF AND BMG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO ) "
                + "   JOIN BOP_BAIRROS_GERAL BBG ON ( BBG.CD_UF = BEOD.CD_UF AND BBG.CD_MUNICIPIO = BEOD.CD_MUNICIPIO AND BBG.CD_BAIRRO = BEOD.CD_BAIRRO ) "
                + "   JOIN BOP_TIPO_MAT_APREENDIDO BTMA ON ( BTMA.CD_TIPO_MAT_APR = BOO.CD_TIPO_MAT_APR )   ");

        this.appendWhereClause(strbfQuery, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto(),
                " BOO.CD_TIPO_MAT_APR = ? "
                + "AND BOAD.FL_SITUACAO_OCORRENCIA = 4 AND BOA.DS_OCORRENCIA IS NOT NULL AND BO.TP_INCIDENTE_PRINCIPAL NOT IN ('Z98')");

        if (dataInicial != null) {
            this.appendWhereClause(strbfQuery, dataInicial,
                    " TRUNC(DT_FATO) >= ?");
        }
        if (dataFinal != null) {
            this.appendWhereClause(strbfQuery, dataFinal,
                    " TRUNC(DT_FATO) <= ?");
        }
        if (horaInicial != null) {
            this.appendWhereClause(strbfQuery, horaInicial,
                    " TO_CHAR(DT_FATO,'HH24MISS') >= ?");
        }
        if (horaFinal != null) {
            this.appendWhereClause(strbfQuery, horaFinal,
                    " TO_CHAR(DT_FATO,'HH24MISS') <= ?");
        }
        if (dataRegistroInicial != null) {
            this.appendWhereClause(strbfQuery, dataRegistroInicial,
                    " TRUNC(DT_CRIACAO) >= ?");
        }
        if (dataRegistroFinal != null) {
            this.appendWhereClause(strbfQuery, dataRegistroFinal,
                    " TRUNC(DT_CRIACAO) <= ?");
        }
        if (agenciaSelecionada != null) {
            this.appendWhereClause(strbfQuery, agenciaSelecionada,
                    " BOA.CD_AGENCIA = ? ");
        }
        if (bopUnidadePolicialSelecionado != null) {
            this.appendWhereClause(strbfQuery, bopUnidadePolicialSelecionado,
                    " BOA.CD_UNID_POLICIAL = ? ");
        }
        if (ufSelecionado != null) {
            this.appendWhereClause(strbfQuery, ufSelecionado,
                    " BEOD.CD_UF = ?  ");
        }
        if (municipioSelecionado != null) {
            this.appendWhereClause(strbfQuery, municipioSelecionado,
                    " BEOD.CD_MUNICIPIO = ?  ");
        }
        if (bairroSelecionado != null) {
            this.appendWhereClause(strbfQuery, bairroSelecionado,
                    " BEOD.CD_BAIRRO = ?  ");
        }
        if (incidenteSelecionado != null) {
            this.appendWhereClause(strbfQuery, incidenteSelecionado,
                    " BO.TP_INCIDENTE_PRINCIPAL = ?  ");
        }
        if (nrPlaca != null) {
            this.appendWhereClause(strbfQuery, nrPlaca,
                    " BOOPV.NR_PLACA = ?  ");
        }
        if (descricaoOcorrencia != null) {
            this.appendWhereClause(strbfQuery, descricaoOcorrencia,
                    " UPPER(BOA.DS_OCORRENCIA) LIKE ?  ");
        }

//		appendWhereClause(strbfQuery,
//				bopOcorrenciaObjeto.getVwDeonTipoObjeto(),
//				" BOO.CD_TIPO_MAT_APR = ? ");
        appendWhereClause(strbfQuery,
                bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon(),
                " BOO.ID_TIPO_ACAO = ? ");
        if (bopObjetoOcorrPlacaVeicularDeon != null) {
            appendWhereClause(strbfQuery,
                    bopObjetoOcorrPlacaVeicularDeon.getDsObservacao(),
                    " BOOPV.DS_OBSERVACAO LIKE ?  ");
        }

        strbfQuery.append(" ORDER BY BCO.NR_CHAMADO DESC ");

        return strbfQuery;

    }

    @Override
    public List<ConsultaOcorrenciaObjTransient> getListaOcorrenciaPlacaVeicularPaginado(
            BopOcorrenciaObjeto bopOcorrenciaObjeto, String nrPlaca,
            BopObjetoOcorrPlacaVeicularDeon bopObjetoOcorrPlacaVeicularDeon, int inicio,
            int fim, Date dataInicial, Date dataFinal, Date horaInicial,
            Date horaFinal, Date dataRegistroInicial, Date dataRegistroFinal, BopAgencia agenciaSelecionada, BopUnidadePolicial bopUnidadePolicialSelecionado, BopUnidadesFederacao ufSelecionado,
            BopMunicipio municipioSelecionado, BopBairro bairroSelecionado, BopIncidente incidenteSelecionado, String descricaoOcorrencia) throws BusinessException {
        this.connector = null;
        Query query = null;
        int parametros = 1;

        StringBuffer strbfQuery = this.getQueryOcorrenciaPlacaVeicular(nrPlaca, bopOcorrenciaObjeto, bopObjetoOcorrPlacaVeicularDeon, dataInicial, dataFinal, horaInicial, horaFinal, dataRegistroInicial, dataRegistroFinal, agenciaSelecionada, bopUnidadePolicialSelecionado, ufSelecionado, municipioSelecionado, bairroSelecionado, incidenteSelecionado, descricaoOcorrencia);

        this.paginarQuery(strbfQuery, inicio, fim);

        query = em.createNativeQuery(strbfQuery.toString(),
                ConsultaOcorrenciaObjTransient.class);

        if (this.isNotNullOrEmpty(bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto())) {
            query.setParameter(parametros++, bopOcorrenciaObjeto.getVwDeonTipoObjeto().getIdTipoObjeto());
        }

        if (this.isNotNullOrEmpty(dataInicial)) {
            query.setParameter(parametros++, dataInicial);
        }
        if (this.isNotNullOrEmpty(dataFinal)) {
            query.setParameter(parametros++, dataFinal);
        }
        if (this.isNotNullOrEmpty(horaInicial)) {
            String horaInicialString = new SimpleDateFormat("HHmmss")
                    .format(horaInicial);
            query.setParameter(parametros++, horaInicialString);
        }
        if (this.isNotNullOrEmpty(horaFinal)) {
            String horaFinalString = new SimpleDateFormat("HHmmss")
                    .format(horaFinal);
            query.setParameter(parametros++, horaFinalString);
        }
        if (this.isNotNullOrEmpty(dataRegistroInicial)) {
            query.setParameter(parametros++, dataRegistroInicial);
        }
        if (this.isNotNullOrEmpty(dataRegistroFinal)) {
            query.setParameter(parametros++, dataRegistroFinal);
        }
        if (this.isNotNullOrEmpty(agenciaSelecionada)) {
            query.setParameter(parametros++, agenciaSelecionada.getCdAgencia());
        }
        if (this.isNotNullOrEmpty(bopUnidadePolicialSelecionado)) {
            query.setParameter(parametros++, bopUnidadePolicialSelecionado.getId().getCdUnidPolicial());
        }
        if (this.isNotNullOrEmpty(ufSelecionado)) {
            query.setParameter(parametros++, ufSelecionado.getCdUf());
        }
        if (this.isNotNullOrEmpty(municipioSelecionado)) {
            query.setParameter(parametros++, municipioSelecionado.getId().getCdMunicipio());
        }
        if (this.isNotNullOrEmpty(bairroSelecionado)) {
            query.setParameter(parametros++, bairroSelecionado.getId().getCdBairro());
        }
        if (this.isNotNullOrEmpty(incidenteSelecionado)) {
            query.setParameter(parametros++, incidenteSelecionado.getTpIncidente());
        }
        if (this.isNotNullOrEmpty(nrPlaca)) {
            query.setParameter(parametros++, nrPlaca);
        }
        if (this.isNotNullOrEmpty(descricaoOcorrencia)) {
            query.setParameter(parametros++, "%" + descricaoOcorrencia + "%");
        }
//		if (bopOcorrenciaObjeto.getVwDeonTipoObjeto() != null) {
//			query.setParameter(parametros++, bopOcorrenciaObjeto
//					.getVwDeonTipoObjeto().getIdTipoObjeto());
//		}

        if (bopOcorrenciaObjeto.getBopTipoAcaoObjetoDeon() != null) {
            query.setParameter(parametros++, bopOcorrenciaObjeto
                    .getBopTipoAcaoObjetoDeon().getIdTipoAcaoObjeto());
        }

        if (bopObjetoOcorrPlacaVeicularDeon != null) {
            if (this.isNotNullOrEmpty(bopObjetoOcorrPlacaVeicularDeon.getDsObservacao())) {
                query.setParameter(parametros++,
                        "%" + bopObjetoOcorrPlacaVeicularDeon.getDsObservacao() + "%");
            }
        }

        try {
            return query.getResultList();
        } catch (Exception e) {
            throw new BusinessException("012_416: "
                    + "Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public List<BopHistEvolucaoDesaparecido> getHistoricoEvolucaoDesaparecido(Long idEnvolvidoDeon) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT * FROM BOP_HIST_EVOLUCAO_DESAPARECIDO  WHERE ID_ENVOLVIDO_DEON = ? ORDER BY DT_CRIACAO DESC ");
        Query query = em.createNativeQuery(sql.toString(), BopHistEvolucaoDesaparecido.class);

        query.setParameter(1, idEnvolvidoDeon);

        List<BopHistEvolucaoDesaparecido> listaHistorico;
        listaHistorico = query.getResultList();

        try {
            return listaHistorico;
        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_417: " + "Ocorreu um erro inesperado. ", e);

        }

    }

    @Override
    public List<DeonSituacaoDesaparecido> getAllSituacaoEnvolvidoDesaparecido() throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT * FROM DEON_SITUACAO_DESAPARECIDO WHERE FL_ATIVO = 'S'  ");
        Query query = em.createNativeQuery(sql.toString(), DeonSituacaoDesaparecido.class);

        List<DeonSituacaoDesaparecido> listaSituacao;
        listaSituacao = query.getResultList();

        try {
            return listaSituacao;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_418: " + "Ocorreu um erro inesperado. ", e);

        }

    }

    @Override
    public void removerAnexoEnvDesaparecido(Long idEnvolvidoDeon) throws BusinessException {

        try {

            String sql = " DELETE FROM DEON_ANEXO_ENV_DESAPARECIDO WHERE ID_ENVOLVIDO_DEON = ? ";

            Query q = em.createNativeQuery(sql).setParameter(1, idEnvolvidoDeon);

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_419: Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public List<DeonOcorrenciaAnexoProv> getAllBopAnexoOcorrencia(Long idOcorrencia) throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT * FROM DEON_OCORRENCIA_ANEXO_PROV WHERE ID_OCORRENCIA = ?  ");
        Query query = em.createNativeQuery(sql.toString(), DeonOcorrenciaAnexoProv.class);

        query.setParameter(1, idOcorrencia);

        List<DeonOcorrenciaAnexoProv> listaAnexos;
        listaAnexos = query.getResultList();

        try {
            return listaAnexos;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_420: " + "Ocorreu um erro inesperado. ", e);

        }

    }

    @Override
    public DeonAnexoEnvDesaparecido findDeonAnexoDesaparecidoProv(Long idEnvolvido) {

        DeonAnexoEnvDesaparecido deonAnexoDesaparecidoProv = new DeonAnexoEnvDesaparecido();
        try {
            Query query = em.createNativeQuery(" SELECT * FROM DEON_ANEXO_ENV_DESAPARECIDO WHERE ID_ENVOLVIDO_DEON =  ? ".toString(), DeonAnexoEnvDesaparecido.class);

            query.setParameter(1, idEnvolvido);

            deonAnexoDesaparecidoProv = (DeonAnexoEnvDesaparecido) query.getSingleResult();

        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return deonAnexoDesaparecidoProv;
    }

    @Override
    public Long existeFotoDesaparecido(Long idEnvolvidoDeon) throws BusinessException {
        StringBuilder builder = new StringBuilder();

        try {

            builder.append(" SELECT COUNT(1) FROM DEON_ANEXO_ENV_DESAPARECIDO WHERE ID_ENVOLVIDO_DEON =  ? ");

            Query query = em.createNativeQuery(builder.toString());

            query.setParameter(1, idEnvolvidoDeon);

            BigDecimal result = (BigDecimal) query.getSingleResult();

            return result.longValue();

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_411: Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public BopUnidadePolicialDeon getBopUnidadePolicialDeon(Long idAgencia, Long idUnidade) throws BusinessException {

        try {
            StringBuilder sql = new StringBuilder();

            sql.append("  SELECT * FROM BOP_UNIDADE_POLICIAL_DEON WHERE ID_AGENCIA = ? AND ID_UNIDADE_POLICIAL = ?  ");
            Query query = em.createNativeQuery(sql.toString(), BopUnidadePolicialDeon.class);

            query.setParameter(1, idAgencia);
            query.setParameter(2, idUnidade);

            BopUnidadePolicialDeon unidade;
            unidade = (BopUnidadePolicialDeon) query.getSingleResult();

            if (unidade != null) {
                BopUnidadePolicial u = unidadePolicialSessionLocal.find(unidade.getId().getIdUnidPolicial());
                BopAgencia agencia = u.getBopAgencia();

                unidade.setAgencia(agencia.getDsAgencia());
                unidade.setUnidade(u.getDsUnidPolicial());
            }

            return unidade;
        } catch (NoResultException ex) {
            ex.printStackTrace();

        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_423: " + "Ocorreu um erro inesperado. ", e);
        }
        return null;
    }

    @Override
    public List<BopUnidadePolicialDeon> getAllBopUnidadePolicialDeonTco() throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT * FROM BOP_UNIDADE_POLICIAL_DEON WHERE FL_TCO = 'S'  ");
        Query query = em.createNativeQuery(sql.toString(), BopUnidadePolicialDeon.class);

        List<BopUnidadePolicialDeon> listaUnidades;
        listaUnidades = query.getResultList();

        for (BopUnidadePolicialDeon u : listaUnidades) {

            BopUnidadePolicial unidade = unidadePolicialSessionLocal.find(u.getId().getIdUnidPolicial());
            BopAgencia agencia = unidade.getBopAgencia();

            u.setAgencia(agencia.getDsAgencia());
            u.setUnidade(unidade.getDsUnidPolicial());
        }

        try {
            return listaUnidades;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_424: " + "Ocorreu um erro inesperado. ", e);
        }
    }

    @Override
    public List<SinqTemplate> getListSinqTemplate(int indexPaginacao, int rows, String nome, Integer codigo, long cdAgencia) throws BusinessException {

        try {
            Query query = null;

            //String str = "SELECT * FROM (SELECT A.*, ROWNUM RNUM FROM BOP_UNIDADE_POLICIAL A WHERE A.FL_ATIVO = 'S' ";
            String str = String.format("SELECT * FROM (SELECT A.*, ROWNUM RNUM FROM SINQ_TEMPLATE A WHERE DT_USUARIO_EXCLUSAO IS NULL AND ID_AGENCIA = %d ", cdAgencia);

            if (nome != null && !nome.isEmpty()) {
                str += " AND DS_NOME LIKE '%" + nome.toString() + "%' ";
            }

            str += " AND ROWNUM <= ? )  WHERE RNUM  > ? ";

            str += " ORDER BY DS_NOME";

            query = em.createNativeQuery(str, SinqTemplate.class);

            query.setParameter(1, indexPaginacao + rows);

            query.setParameter(2, indexPaginacao);

            List<SinqTemplate> listSinqTemplate = query.getResultList();

            return listSinqTemplate;
        } catch (Exception e) {
            throw new BusinessException("012_425: "
                    + "Ocorreu um erro inesperado. ", e);
        }

    }

    @Override
    public int getListSinqTemplateCount(String nome, Integer codigo, long cdAgencia) throws BusinessException {

        Query query = null;

        try {

            String str = String.format("SELECT COUNT(*) FROM SINQ_TEMPLATE WHERE DT_USUARIO_EXCLUSAO IS NULL AND ID_AGENCIA = %d ", cdAgencia);

            if (nome != null && !nome.isEmpty()) {
                str += " AND DS_NOME LIKE '" + nome + "%'";
            }

            query = em.createNativeQuery(str);

            return Integer.parseInt(query.getSingleResult().toString());
        } catch (Exception e) {
            throw new BusinessException("012_425: Ocorreu um erro inesperado. ", e);
        }

    }

    @Override
    public List<DeonIncidentePecaTco> getAllDeonIncidentePecaTco() throws BusinessException {

        StringBuilder sql = new StringBuilder();

        sql.append("  SELECT DEON_INCIDENTE_PECA_TCO.* FROM DEON_INCIDENTE_PECA_TCO ");
        sql.append(" JOIN SINQ_TEMPLATE ON ( DEON_INCIDENTE_PECA_TCO.ID_TEMPLATE = SINQ_TEMPLATE.ID_TEMPLATE AND SINQ_TEMPLATE.DT_USUARIO_EXCLUSAO IS NULL AND SINQ_TEMPLATE.ID_USUARIO_EXCLUSAO IS NULL )  ");
        Query query = em.createNativeQuery(sql.toString(), DeonIncidentePecaTco.class);

        List<DeonIncidentePecaTco> listapecas = query.getResultList();

        for (DeonIncidentePecaTco peca : listapecas) {
            SinqTemplate template = templateBOLocal.getReference(peca.getId().getIdTemplate());
            BopIncidente incidente = incidenteSessionLocal.find(peca.getId().getIdIncidente());
            peca.setSgTemplate(template.getDsNome());
            peca.setSgIncidente(incidente.getDsIncidenteCompleto());
        }
        
        
        return listapecas;

    }

    @Override
    public void removerDeonIncidentePecaTco(String tpIncidente, Long idTemplate) throws BusinessException {

        try {

            String sql = " DELETE FROM DEON_INCIDENTE_PECA_TCO WHERE ID_TEMPLATE = ? AND TP_INCIDENTE = ?";

            Query q = em.createNativeQuery(sql).setParameter(1, idTemplate)
                    .setParameter(2, tpIncidente);

            q.executeUpdate();

        } catch (Exception e) {

            throw new BusinessException("012_427: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public List<SinqPecaGeradaDTO> getPecasTco(Long nrBop, String tipoBop, Long idRegistroRespo) throws BusinessException {

        StringBuilder sql = new StringBuilder();

//        sql.append("  SELECT SINQ_PECA_GERADA_INQ.*  ");
//        sql.append("    FROM SINQ_OCORRENCIA ");
//        sql.append("    JOIN SINQ_INQUERITO                ON ( SINQ_INQUERITO.ID_OCORRENCIA = SINQ_OCORRENCIA.ID_OCORRENCIA ) ");
//        sql.append("    JOIN SINQ_INQUERITO_CADERNO_PROCED ON ( SINQ_INQUERITO_CADERNO_PROCED.ID_INQUERITO = SINQ_INQUERITO.ID_INQUERITO ) ");
//        sql.append("   JOIN SINQ_PECA_CADERNO_PROCED      ON ( SINQ_PECA_CADERNO_PROCED.ID_CADERNO_PROCED = SINQ_INQUERITO_CADERNO_PROCED.ID_CADERNO_PROCED ) ");
//        sql.append("    JOIN SINQ_PECA_GERADA_INQ          ON ( SINQ_PECA_GERADA_INQ.ID_PECA_GERADA_INQ = SINQ_PECA_CADERNO_PROCED.ID_PECA_GERADA_INQ)  ");
//        sql.append("   WHERE SINQ_OCORRENCIA.NR_BOP_VINCULADO = ?  ");
//        sql.append("     AND SINQ_OCORRENCIA.TIPO_BOP_VINCULADO = ? ");
//        sql.append("     AND SINQ_PECA_GERADA_INQ.ID_USUARIO_CRIACAO IN (  ");
//        sql.append("          SELECT BOP_USUARIOS.CD_USUARIO  ");
//        sql.append("          FROM BOP_USUARIOS ");
//        sql.append("          WHERE BOP_USUARIOS.ID_FUNCIONARIO =  ?  )   ");
        sql.append("  SELECT SINQ_PECA_GERADA_INQ.ID_USUARIO_CRIACAO, SINQ_PECA_GERADA_INQ.ID_PECA_GERADA_INQ  ");
        sql.append("  , SINQ_PECA_GERADA_INQ.DS_NOME, SINQ_PECA_GERADA_INQ.ID_TIPO_PECA,  SINQ_PECA_GERADA_INQ.ID_TEMPLATE ");
        sql.append("  , SINQ_PECA_TEMPLATE.TX_HTML_CABECALHO AS TX_HTML_CABECALHO  ");
        sql.append("  , SINQ_PECA_TEMPLATE.TX_HTML_RODAPE AS TX_HTML_RODAPE  ");
        sql.append("  , SINQ_PECA_TEMPLATE.TX_HTML_CORPO AS TX_HTML_CORPO,  SINQ_PARTE_TEMPLATE.IM_CABECALHO AS IM_CABECALHO ");
        sql.append(" FROM SINQ_OCORRENCIA      ");
        sql.append(" JOIN SINQ_INQUERITO                   ON ( SINQ_INQUERITO.ID_OCORRENCIA = SINQ_OCORRENCIA.ID_OCORRENCIA )    ");
        sql.append(" JOIN SINQ_INQUERITO_CADERNO_PROCED    ON ( SINQ_INQUERITO_CADERNO_PROCED.ID_INQUERITO = SINQ_INQUERITO.ID_INQUERITO )     ");
        sql.append(" JOIN SINQ_PECA_CADERNO_PROCED         ON ( SINQ_PECA_CADERNO_PROCED.ID_CADERNO_PROCED = SINQ_INQUERITO_CADERNO_PROCED.ID_CADERNO_PROCED )    ");
        sql.append(" JOIN SINQ_PECA_GERADA_INQ             ON ( SINQ_PECA_GERADA_INQ.ID_PECA_GERADA_INQ = SINQ_PECA_CADERNO_PROCED.ID_PECA_GERADA_INQ)      ");
        sql.append(" JOIN SINQ_PECA_TEMPLATE               ON ( SINQ_PECA_TEMPLATE.ID_PECA_GERADA_INQ = SINQ_PECA_GERADA_INQ.ID_PECA_GERADA_INQ) ");
        sql.append(" LEFT JOIN SINQ_TEMPLATE               ON ( SINQ_TEMPLATE.ID_TEMPLATE = SINQ_PECA_TEMPLATE.ID_TEMPLATE )     ");
        sql.append(" LEFT JOIN SINQ_PARTE_TEMPLATE         ON ( SINQ_PARTE_TEMPLATE.ID_PARTE_TEMPLATE = SINQ_TEMPLATE.ID_CABECALHO AND SINQ_PARTE_TEMPLATE.ID_TIPO_PARTE_TEMPLATE = 1) ");
        sql.append(" WHERE SINQ_OCORRENCIA.NR_BOP_VINCULADO = ?     ");
        sql.append(" AND SINQ_OCORRENCIA.TIPO_BOP_VINCULADO = ?        ");
        sql.append(" AND SINQ_PECA_GERADA_INQ.ID_USUARIO_CRIACAO IN (      SELECT BOP_USUARIOS.CD_USUARIO ");
        sql.append("                                                 FROM BOP_OCORRENCIA_AGENCIA ");
        sql.append("                                                 JOIN BOP_USUARIOS ON (BOP_USUARIOS.ID_FUNCIONARIO = BOP_OCORRENCIA_AGENCIA.ID_REGISTRO_RESPONSAVEL ) ");
        sql.append("                                                 WHERE BOP_OCORRENCIA_AGENCIA.NR_BOP = ? ");
        sql.append("                                                 AND BOP_OCORRENCIA_AGENCIA.TIPO_BOP = ? ");
        sql.append("                                                 AND BOP_OCORRENCIA_AGENCIA.ID_REGISTRO_RESPONSAVEL  IS NOT NULL ");
        sql.append("                                                 AND ROWNUM = 1 ");
        sql.append("                                                                                           )  ");
        sql.append(" ORDER BY SINQ_PECA_CADERNO_PROCED.NR_ORDEM ");

        Query query = em.createNativeQuery(sql.toString(), SinqPecaGeradaDTO.class);

        query.setParameter(1, nrBop);
        query.setParameter(2, tipoBop);
        query.setParameter(3, nrBop);
        query.setParameter(4, tipoBop);
        //query.setParameter(3, idRegistroRespo);

        List<SinqPecaGeradaDTO> listaPecas = query.getResultList();
        //listaPecas = 

        try {
            return listaPecas;
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_428: " + "Ocorreu um erro inesperado. ", e);
        }
    }

    @Override
    public Long getIdRegistroResponsavel(String tipoBop, Long nrBop, BopUnidadePolicial unidadePolicial) throws BusinessException {

        Query query = null;

        long agencia = unidadePolicial.getId().getCdAgencia();
        long unidade = unidadePolicial.getId().getCdUnidPolicial();
        try {

            String str = "SELECT ID_REGISTRO_RESPONSAVEL FROM BOP_OCORRENCIA_AGENCIA WHERE CD_AGENCIA = ? AND CD_UNID_POLICIAL = ? AND NR_BOP = ?  AND TIPO_BOP = ? ";

            query = em.createNativeQuery(str);

            query.setParameter(1, agencia);
            query.setParameter(2, unidade);
            query.setParameter(3, nrBop);
            query.setParameter(4, tipoBop);
            Long id = Long.parseLong(query.getSingleResult().toString());
            return id;

        } catch (NoResultException ex) {
            return null;

        } catch (Exception e) {
            throw new BusinessException("012_429: Ocorreu um erro inesperado. ", e);
        }

    }

    public byte[] gerarPDFPecaTemplate(SinqPecaGeradaDTO sinqPecaTemplate, boolean imprimindoCaderno, boolean agenciaTCO) throws BusinessException {
        try {

            byte[] pdf = this.preparaHtmlTemplate((SinqPecaGeradaDTO) sinqPecaTemplate, imprimindoCaderno, agenciaTCO);

            return pdf;

        } catch (Exception e) {
            throw new BusinessException("012_430: Ocorreu um erro inesperado.", e);

        }

    }

    public byte[] preparaHtmlTemplate(SinqPecaGeradaDTO sinqPecaTemplate, boolean imprimindoCaderno, boolean agenciaTCO) throws BusinessException {

        try {

            //sinqPecaTemplate = pecaBOLocal.atualizaFontePecaTemplate( sinqPecaTemplate );
            StringBuilder str = new StringBuilder();

            Document document;

            if (imprimindoCaderno) {
                document = new Document(PageSize.A4, 60, 60, 210, 100);

            } else {
                document = new Document(PageSize.A4, 60, 60, 210, 100);

            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();

            PdfWriter pdf = PdfWriter.getInstance(document, baos);

            EventoCabecalhoRodapePecaTemplate cabecalhoRodape = new EventoCabecalhoRodapePecaTemplate();
            cabecalhoRodape.setImprimindoCaderno(imprimindoCaderno);

            Image logo = null;
            if (agenciaTCO) {
                InputStream resource = DeonInternoSession.class.getResourceAsStream("/resources/logo_BAON.JPG");
                BufferedImage bufferedImage = ImageIO.read(resource);
                ByteArrayOutputStream baosImage = new ByteArrayOutputStream();
                ImageIO.write(bufferedImage, "png", baosImage);
                logo = Image.getInstance(baosImage.toByteArray());
            } else {
                logo = Image.getInstance(sinqPecaTemplate.getImagemCabecalho());
            }

            logo.scaleToFit(500, 60);
            logo.setAlignment(Image.ALIGN_LEFT);

            cabecalhoRodape.setImagemTopo(logo);

            StringBuilder cabecalho = new StringBuilder();
            cabecalho.append(sinqPecaTemplate.getTxHtmlCabecalho());

            cabecalhoRodape.setCabecalho(cabecalho);

            StringBuilder rodape = new StringBuilder();
            rodape.append(sinqPecaTemplate.getTxHtmlRodape());
            cabecalhoRodape.setRodape(rodape);

            pdf.setPageEvent(cabecalhoRodape);

            document.open();

            document.newPage();

            str = new StringBuilder();
            str.append(sinqPecaTemplate.getTxHtmlCorpo());

            PdfPTable table = new PdfPTable(1);
            table.setWidths(new int[]{500});
            table.setTotalWidth(500);
            table.setLockedWidth(true);
            table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
            PdfPCell cell = new PdfPCell();
            cell.setBorder(Rectangle.NO_BORDER);

            ElementList list = XMLWorkerHelper.parseToElementList(str.toString(), null);
            for (int i = 0; i < list.size(); i++) {

                Element element = list.get(i);

                //	System.out.println(element.toString() );
                if (!element.toString().contains(LINE_BREAK)) {
                    cell.addElement(element);
                } else {

                    table.addCell(cell);
                    document.add(table);
                    document.newPage();

                    cell = new PdfPCell();
                    cell.setBorder(Rectangle.NO_BORDER);

                    table = new PdfPTable(1);
                    table.setWidths(new int[]{500});
                    table.setTotalWidth(500);
                    table.setLockedWidth(true);
                    table.getDefaultCell().setBorder(Rectangle.NO_BORDER);
                }

            }

            table.addCell(cell);

            document.add(table);

            document.close();

            return baos.toByteArray();

        } catch (RuntimeWorkerException e) {
            throw e;
        } catch (Exception e) {

            throw new BusinessException("012_431: Ocorreu um erro inesperado.", e);
        }

    }

    public byte[] gerarPDFPecas(List<SinqPecaGeradaDTO> listaSinqPecaCadernoProced, boolean agenciaTCO) throws Exception {

        try {
            if (listaSinqPecaCadernoProced != null && listaSinqPecaCadernoProced.size() == 0) {
                return null;
            }

            List<byte[]> listaBytePeca = new ArrayList<byte[]>();

            /**
             * Ordenar a lista para imprimir o pdf.
             */
            //Collections.sort( listaSinqPecaCadernoProced );
            for (SinqPecaGeradaDTO sinqPecaCadernoProced : listaSinqPecaCadernoProced) {

                if (sinqPecaCadernoProced != null) {
                    if (sinqPecaCadernoProced.getIdTipoPeca().equals(TipoPeca.PECA_ANEXO.getCodigo())) {

                        //listaBytePeca.add( this.gerarPDFPecaTemplate( (SinqPecaTemplate)sinqPecaCadernoProced.getSinqPecaGeradaInq(), true ) );
                    } else if (sinqPecaCadernoProced.getIdTipoPeca().equals(TipoPeca.PECA_TEMPLATE.getCodigo())) {
                        listaBytePeca.add(this.gerarPDFPecaTemplate(sinqPecaCadernoProced, true, agenciaTCO));

                    } else if (sinqPecaCadernoProced.getIdTipoPeca().equals(TipoPeca.PECA_CONTA.getCodigo())) {

                        //listaBytePeca.add( this.gerarPDFPecaConta( (SinqPecaConta)sinqPecaCadernoProced.getSinqPecaGeradaInq() ) );
                    }
                }

            }

            if (Util.isListBlank(listaBytePeca)) {
                return null;
            }

            return PDFUtil.mergePDF(listaBytePeca);
        } catch (Exception e) {
            throw new BusinessException("012_432: Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public byte[] gerarPDFPecaAnexo(SinqPecaGeradaInq pecaGeradaInq) throws Exception {

        try {
            //em.getEntityManagerFactory().getCache().evict( SinqPecaAnexo.class );

            SinqPecaAnexo pecaAnexo = findPecaAnexoById(pecaGeradaInq.getIdPecaGeradaInq());

            byte[] sbAppendHtml = this.prepararHTMLDocumento(pecaAnexo);

            return sbAppendHtml;

        } catch (RuntimeWorkerException ex) {

            ex.printStackTrace();
            throw new RuntimeException("Existem problemas no peça anexo  : " + pecaGeradaInq.getIdPecaGeradaInq() + " , Favor verifcar tags nao fechadas na tabela SINQ_PECA_ANEXO");

        } catch (Exception e) {
            throw new BusinessException("012_433: Ocorreu um erro inesperado.", e);

        }
    }

    @Override
    public byte[] prepararHTMLDocumento(SinqPecaAnexo pecaAnexo) throws Exception {

        try {

            BopUsuarios usuario = usuarioSessionLocal.find(18600L);

            Document document;

            ByteArrayOutputStream baos = new ByteArrayOutputStream();

            if (pecaAnexo.getMimeType().contains("pdf")) {

                PdfReader reader = null;
                int numeroPaginas = 0;

                if (pecaAnexo.getArquivoPeca() != null) {

                    reader = new PdfReader(pecaAnexo.getArquivoPeca());

                    if (reader != null) {

                        numeroPaginas = reader.getNumberOfPages();

                        document = new Document(PageSize.A4, 120, 80, 150, 50);

                        PdfWriter pdf = PdfWriter.getInstance(document, baos);
                        document.open();

                        PdfContentByte cb = pdf.getDirectContent();

                        PdfImportedPage proximaPagina;

                        int i = 0;

                        while (i <= numeroPaginas) {

                            if (i == 0) {
                                document.newPage();
                                i++;

                                StringBuffer str = new StringBuffer();

                                PdfImportedPage page1 = pdf.getImportedPage(reader, i);

                                str.append("		<div style='position: float; margin-left: 105px; margin-top:350px;'>  	  ");
                                str.append("			<fieldset style='border:1px solid black; width:570px; height:420px; text-align: center;'>     ");
                                str.append("			<legend style='margin-left:15px; font-size:18px; font-weight: bold;'><b>CERTIDÃO E JUNTADA</b></legend>	  ");
                                str.append("			<br><br><br>	  ");
                                str.append("			<div style=' text-align: justify; width:530px; height:auto;  margin-left: 10px; margin-right: 10px; font-size:18px;'>	  ");
                                str.append(pecaAnexo.getDadosCertidaoEJuntada(usuario.getBopFuncionario()));
                                str.append("			</div>	  ");
                                str.append("			</fieldset> 										      ");
                                str.append("		</div>  ");

                                PdfReader p = new PdfReader(PDFUtil.gerarPDFFromHTML(str.toString(), ""));
                                page1 = pdf.getImportedPage(p, 1);

                                cb.addTemplate(page1, .8f, 0, 0, .8f, 50, -90);

                            }

                            document.newPage();

                            proximaPagina = pdf.getImportedPage(reader, i);
                            i++;

                            cb.addTemplate(proximaPagina, .9f, 0, 0, .87f, 50, 20);

                        }
                        document.close();

                    }

                }

            } else {

                document = new Document(PageSize.A4, 60, 50, 150, 50);

                PdfWriter pdf = PdfWriter.getInstance(document, baos);

                document.open();

                PdfContentByte cb = pdf.getDirectContent();

                document.newPage();

                StringBuffer str = new StringBuffer();

                str.append("		<div style='position: float; margin-left: 105px; margin-top:350px;'>  	  ");
                str.append("			<fieldset style='border:1px solid black; width:570px; height:320px; text-align: center;'>     ");
                str.append("			<legend style='margin-left:15px;'><b>CERTIDÃO E JUNTADA</b></legend>	  ");
                str.append("			<br><br><br>	  ");
                str.append("			<div style=' text-align: justify; width:530px; height:auto;  margin-left: 10px; margin-right: 10px;'>	  ");
                str.append(pecaAnexo.getDadosCertidaoEJuntada(usuario.getBopFuncionario()));
                str.append("			</div>	  ");
                str.append("			</fieldset> 										      ");
                str.append("		</div>  ");

                PdfReader p = new PdfReader(PDFUtil.gerarPDFFromHTML(str.toString(), ""));

                cb.addTemplate(pdf.getImportedPage(p, 1), .8f, 0, 0, .87f, 40, -90);

                document.newPage();

                Image image = Image.getInstance(pecaAnexo.getArquivoPeca());
                image.scaleToFit(500, 570);

                document.add(image);

                document.close();

            }

            return baos.toByteArray();

        } catch (RuntimeWorkerException e) {
            throw e;
        } catch (Exception o) {
            throw new BusinessException("012_434: " + "Ocorreu um erro inesperado.", o);

        }

    }

    @Override
    public SinqPecaAnexo findPecaAnexoById(Long idPecaGeradaInq) throws BusinessException {
        Query query = null;

        int parametros = 1;

        String str = "SELECT *  FROM Sinq_Peca_Anexo SPA  INNER JOIN Sinq_Peca_Gerada_Inq SPGI ON (SPA.id_peca_gerada_inq = SPGI.id_peca_gerada_inq)  WHERE SPA.id_Peca_Gerada_Inq = ? ";

        query = em.createNativeQuery(str, SinqPecaAnexo.class);
        query.setParameter(parametros++, idPecaGeradaInq);

        try {
            return (SinqPecaAnexo) query.getSingleResult();

        } catch (NoResultException e) {
            return null;
        } catch (Exception e) {
            throw new BusinessException("012_435: " + "Ocorreu um erro inesperado.", e);

        }
    }

    public void atualizaLongitudeOcorrenciaInternet(Double latitude, Double longitude, Long protocolo)
            throws BusinessException {

        try {
            StringBuilder whereBuilder = new StringBuilder();

            whereBuilder.append(" UPDATE BOP_ENDERECO_OCORRENCIA_DEON ");
            whereBuilder.append("   SET BOP_ENDERECO_OCORRENCIA_DEON.NR_LATITUDE = ? ");
            whereBuilder.append("   , BOP_ENDERECO_OCORRENCIA_DEON.NR_LONGITUDE = ? ");
            whereBuilder.append("   WHERE BOP_ENDERECO_OCORRENCIA_DEON.ID_ENDERECO_OCORRENCIA_DEON = ( ");
            whereBuilder.append("    SELECT ");
            whereBuilder.append("   BOP_OCORRENCIA_DEON.ID_ENDERECO_OCORRENCIA_DEON ");
            whereBuilder.append("    FROM ");
            whereBuilder.append("   BOP_OCORRENCIA_DEON ");
            whereBuilder.append("    JOIN ");
            whereBuilder.append("   DEON_OCORRENCIA_PROV ON ( DEON_OCORRENCIA_PROV.NR_BOP_GERADO = ");
            whereBuilder.append("   BOP_OCORRENCIA_DEON.NR_BOP ) ");
            whereBuilder.append("   JOIN ");
            whereBuilder.append("   DEON_PROTOCOLO ON ( DEON_PROTOCOLO.ID_PROTOCOLO = ");
            whereBuilder.append("   DEON_OCORRENCIA_PROV.ID_PROTOCOLO ) ");
            whereBuilder.append("    WHERE ");
            whereBuilder.append("   BOP_OCORRENCIA_DEON.TIPO_BOP = 'D' ");
            whereBuilder.append("    AND ");
            whereBuilder.append("   DEON_PROTOCOLO.NR_PROTOCOLO = ?  ) ");

            Query query = em.createNativeQuery(whereBuilder.toString());

            query.setParameter(1, latitude);
            query.setParameter(2, longitude);
            query.setParameter(3, protocolo);

            query.executeUpdate();
        } catch (Exception e) {
            throw new BusinessException("012_436: "
                    + "Ocorreu um erro inesperado.", e);

        }

    }

    @Override
    public void atualizarListaIncidente() throws BusinessException {

        try {
            List<BopIncidente> listBopIncidente = em.createNamedQuery("BopIncidente.findAll", BopIncidente.class).getResultList();

            BopIncidente.listBopIncidente = new ArrayList<BopIncidenteSimples>();

            for (BopIncidente bopIncidente : listBopIncidente) {

                BopIncidente.listBopIncidente.add(new BopIncidenteSimples(bopIncidente));

            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new BusinessException("012_437:Ocorreu um erro inesperado.", e);

        }
    }

}
